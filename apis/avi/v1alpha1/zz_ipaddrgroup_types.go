/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPPortsIPInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IPPortsIPObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IPPortsIPParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type IPPortsInitParameters struct {
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	IP []IPPortsIPInitParameters `json:"ip,omitempty" tf:"ip,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Port *string `json:"port,omitempty" tf:"port,omitempty"`
}

type IPPortsObservation struct {
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	IP []IPPortsIPObservation `json:"ip,omitempty" tf:"ip,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Port *string `json:"port,omitempty" tf:"port,omitempty"`
}

type IPPortsParameters struct {

	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// +kubebuilder:validation:Optional
	IP []IPPortsIPParameters `json:"ip,omitempty" tf:"ip,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Port *string `json:"port" tf:"port,omitempty"`
}

type IpAddrGroupAddrsInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IpAddrGroupAddrsObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IpAddrGroupAddrsParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type IpAddrGroupConfigpbAttributesInitParameters struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type IpAddrGroupConfigpbAttributesObservation struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type IpAddrGroupConfigpbAttributesParameters struct {

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type IpAddrGroupInitParameters struct {
	Addrs []IpAddrGroupAddrsInitParameters `json:"addrs,omitempty" tf:"addrs,omitempty"`

	ConfigpbAttributes []IpAddrGroupConfigpbAttributesInitParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	CountryCodes []*string `json:"countryCodes,omitempty" tf:"country_codes,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	IPPorts []IPPortsInitParameters `json:"ipPorts,omitempty" tf:"ip_ports,omitempty"`

	MarathonAppName *string `json:"marathonAppName,omitempty" tf:"marathon_app_name,omitempty"`

	MarathonServicePort *string `json:"marathonServicePort,omitempty" tf:"marathon_service_port,omitempty"`

	Markers []IpAddrGroupMarkersInitParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Prefixes []IpAddrGroupPrefixesInitParameters `json:"prefixes,omitempty" tf:"prefixes,omitempty"`

	Ranges []IpAddrGroupRangesInitParameters `json:"ranges,omitempty" tf:"ranges,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type IpAddrGroupMarkersInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type IpAddrGroupMarkersObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type IpAddrGroupMarkersParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type IpAddrGroupObservation struct {
	Addrs []IpAddrGroupAddrsObservation `json:"addrs,omitempty" tf:"addrs,omitempty"`

	ConfigpbAttributes []IpAddrGroupConfigpbAttributesObservation `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	CountryCodes []*string `json:"countryCodes,omitempty" tf:"country_codes,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IPPorts []IPPortsObservation `json:"ipPorts,omitempty" tf:"ip_ports,omitempty"`

	MarathonAppName *string `json:"marathonAppName,omitempty" tf:"marathon_app_name,omitempty"`

	MarathonServicePort *string `json:"marathonServicePort,omitempty" tf:"marathon_service_port,omitempty"`

	Markers []IpAddrGroupMarkersObservation `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Prefixes []IpAddrGroupPrefixesObservation `json:"prefixes,omitempty" tf:"prefixes,omitempty"`

	Ranges []IpAddrGroupRangesObservation `json:"ranges,omitempty" tf:"ranges,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type IpAddrGroupParameters struct {

	// +kubebuilder:validation:Optional
	Addrs []IpAddrGroupAddrsParameters `json:"addrs,omitempty" tf:"addrs,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigpbAttributes []IpAddrGroupConfigpbAttributesParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	CountryCodes []*string `json:"countryCodes,omitempty" tf:"country_codes,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	IPPorts []IPPortsParameters `json:"ipPorts,omitempty" tf:"ip_ports,omitempty"`

	// +kubebuilder:validation:Optional
	MarathonAppName *string `json:"marathonAppName,omitempty" tf:"marathon_app_name,omitempty"`

	// +kubebuilder:validation:Optional
	MarathonServicePort *string `json:"marathonServicePort,omitempty" tf:"marathon_service_port,omitempty"`

	// +kubebuilder:validation:Optional
	Markers []IpAddrGroupMarkersParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Prefixes []IpAddrGroupPrefixesParameters `json:"prefixes,omitempty" tf:"prefixes,omitempty"`

	// +kubebuilder:validation:Optional
	Ranges []IpAddrGroupRangesParameters `json:"ranges,omitempty" tf:"ranges,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type IpAddrGroupPrefixesIPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IpAddrGroupPrefixesIPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IpAddrGroupPrefixesIPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type IpAddrGroupPrefixesInitParameters struct {
	IPAddr []IpAddrGroupPrefixesIPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type IpAddrGroupPrefixesObservation struct {
	IPAddr []IpAddrGroupPrefixesIPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type IpAddrGroupPrefixesParameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []IpAddrGroupPrefixesIPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type IpAddrGroupRangesBeginInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IpAddrGroupRangesBeginObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IpAddrGroupRangesBeginParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type IpAddrGroupRangesEndInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IpAddrGroupRangesEndObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IpAddrGroupRangesEndParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type IpAddrGroupRangesInitParameters struct {
	Begin []IpAddrGroupRangesBeginInitParameters `json:"begin,omitempty" tf:"begin,omitempty"`

	End []IpAddrGroupRangesEndInitParameters `json:"end,omitempty" tf:"end,omitempty"`
}

type IpAddrGroupRangesObservation struct {
	Begin []IpAddrGroupRangesBeginObservation `json:"begin,omitempty" tf:"begin,omitempty"`

	End []IpAddrGroupRangesEndObservation `json:"end,omitempty" tf:"end,omitempty"`
}

type IpAddrGroupRangesParameters struct {

	// +kubebuilder:validation:Optional
	Begin []IpAddrGroupRangesBeginParameters `json:"begin" tf:"begin,omitempty"`

	// +kubebuilder:validation:Optional
	End []IpAddrGroupRangesEndParameters `json:"end" tf:"end,omitempty"`
}

// IpAddrGroupSpec defines the desired state of IpAddrGroup
type IpAddrGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IpAddrGroupParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IpAddrGroupInitParameters `json:"initProvider,omitempty"`
}

// IpAddrGroupStatus defines the observed state of IpAddrGroup.
type IpAddrGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IpAddrGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IpAddrGroup is the Schema for the IpAddrGroups API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type IpAddrGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	Spec   IpAddrGroupSpec   `json:"spec"`
	Status IpAddrGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IpAddrGroupList contains a list of IpAddrGroups
type IpAddrGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IpAddrGroup `json:"items"`
}

// Repository type metadata.
var (
	IpAddrGroup_Kind             = "IpAddrGroup"
	IpAddrGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IpAddrGroup_Kind}.String()
	IpAddrGroup_KindAPIVersion   = IpAddrGroup_Kind + "." + CRDGroupVersion.String()
	IpAddrGroup_GroupVersionKind = CRDGroupVersion.WithKind(IpAddrGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&IpAddrGroup{}, &IpAddrGroupList{})
}
