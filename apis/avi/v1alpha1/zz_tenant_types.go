/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ConfigSettingsInitParameters struct {
	SeInProviderContext *string `json:"seInProviderContext,omitempty" tf:"se_in_provider_context,omitempty"`

	TenantAccessToProviderSe *string `json:"tenantAccessToProviderSe,omitempty" tf:"tenant_access_to_provider_se,omitempty"`

	TenantVrf *string `json:"tenantVrf,omitempty" tf:"tenant_vrf,omitempty"`
}

type ConfigSettingsObservation struct {
	SeInProviderContext *string `json:"seInProviderContext,omitempty" tf:"se_in_provider_context,omitempty"`

	TenantAccessToProviderSe *string `json:"tenantAccessToProviderSe,omitempty" tf:"tenant_access_to_provider_se,omitempty"`

	TenantVrf *string `json:"tenantVrf,omitempty" tf:"tenant_vrf,omitempty"`
}

type ConfigSettingsParameters struct {

	// +kubebuilder:validation:Optional
	SeInProviderContext *string `json:"seInProviderContext,omitempty" tf:"se_in_provider_context,omitempty"`

	// +kubebuilder:validation:Optional
	TenantAccessToProviderSe *string `json:"tenantAccessToProviderSe,omitempty" tf:"tenant_access_to_provider_se,omitempty"`

	// +kubebuilder:validation:Optional
	TenantVrf *string `json:"tenantVrf,omitempty" tf:"tenant_vrf,omitempty"`
}

type TenantConfigpbAttributesInitParameters struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type TenantConfigpbAttributesObservation struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type TenantConfigpbAttributesParameters struct {

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type TenantInitParameters struct {
	ConfigSettings []ConfigSettingsInitParameters `json:"configSettings,omitempty" tf:"config_settings,omitempty"`

	ConfigpbAttributes []TenantConfigpbAttributesInitParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	EnforceLabelGroup *string `json:"enforceLabelGroup,omitempty" tf:"enforce_label_group,omitempty"`

	LabelGroupRefs []*string `json:"labelGroupRefs,omitempty" tf:"label_group_refs,omitempty"`

	Local *string `json:"local,omitempty" tf:"local,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type TenantObservation struct {
	ConfigSettings []ConfigSettingsObservation `json:"configSettings,omitempty" tf:"config_settings,omitempty"`

	ConfigpbAttributes []TenantConfigpbAttributesObservation `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	EnforceLabelGroup *string `json:"enforceLabelGroup,omitempty" tf:"enforce_label_group,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	LabelGroupRefs []*string `json:"labelGroupRefs,omitempty" tf:"label_group_refs,omitempty"`

	Local *string `json:"local,omitempty" tf:"local,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type TenantParameters struct {

	// +kubebuilder:validation:Optional
	ConfigSettings []ConfigSettingsParameters `json:"configSettings,omitempty" tf:"config_settings,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigpbAttributes []TenantConfigpbAttributesParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	EnforceLabelGroup *string `json:"enforceLabelGroup,omitempty" tf:"enforce_label_group,omitempty"`

	// +kubebuilder:validation:Optional
	LabelGroupRefs []*string `json:"labelGroupRefs,omitempty" tf:"label_group_refs,omitempty"`

	// +kubebuilder:validation:Optional
	Local *string `json:"local,omitempty" tf:"local,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

// TenantSpec defines the desired state of Tenant
type TenantSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     TenantParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider TenantInitParameters `json:"initProvider,omitempty"`
}

// TenantStatus defines the observed state of Tenant.
type TenantStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        TenantObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Tenant is the Schema for the Tenants API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type Tenant struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	Spec   TenantSpec   `json:"spec"`
	Status TenantStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// TenantList contains a list of Tenants
type TenantList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Tenant `json:"items"`
}

// Repository type metadata.
var (
	Tenant_Kind             = "Tenant"
	Tenant_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Tenant_Kind}.String()
	Tenant_KindAPIVersion   = Tenant_Kind + "." + CRDGroupVersion.String()
	Tenant_GroupVersionKind = CRDGroupVersion.WithKind(Tenant_Kind)
)

func init() {
	SchemeBuilder.Register(&Tenant{}, &TenantList{})
}
