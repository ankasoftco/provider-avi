/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ElementsInitParameters struct {
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ElementsObservation struct {
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type ElementsParameters struct {

	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`
}

type FilesInitParameters struct {
	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	FileRef *string `json:"fileRef,omitempty" tf:"file_ref,omitempty"`

	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Vendor *string `json:"vendor,omitempty" tf:"vendor,omitempty"`
}

type FilesObservation struct {
	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	FileRef *string `json:"fileRef,omitempty" tf:"file_ref,omitempty"`

	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Vendor *string `json:"vendor,omitempty" tf:"vendor,omitempty"`
}

type FilesParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	FileRef *string `json:"fileRef" tf:"file_ref,omitempty"`

	// +kubebuilder:validation:Optional
	Index *string `json:"index" tf:"index,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Vendor *string `json:"vendor" tf:"vendor,omitempty"`
}

type GeoDBInitParameters struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Files []FilesInitParameters `json:"files,omitempty" tf:"files,omitempty"`

	IsFederated *string `json:"isFederated,omitempty" tf:"is_federated,omitempty"`

	Mappings []MappingsInitParameters `json:"mappings,omitempty" tf:"mappings,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type GeoDBObservation struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Files []FilesObservation `json:"files,omitempty" tf:"files,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IsFederated *string `json:"isFederated,omitempty" tf:"is_federated,omitempty"`

	Mappings []MappingsObservation `json:"mappings,omitempty" tf:"mappings,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type GeoDBParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Files []FilesParameters `json:"files,omitempty" tf:"files,omitempty"`

	// +kubebuilder:validation:Optional
	IsFederated *string `json:"isFederated,omitempty" tf:"is_federated,omitempty"`

	// +kubebuilder:validation:Optional
	Mappings []MappingsParameters `json:"mappings,omitempty" tf:"mappings,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type MappingsInitParameters struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Elements []ElementsInitParameters `json:"elements,omitempty" tf:"elements,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type MappingsObservation struct {
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Elements []ElementsObservation `json:"elements,omitempty" tf:"elements,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type MappingsParameters struct {

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Elements []ElementsParameters `json:"elements" tf:"elements,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

// GeoDBSpec defines the desired state of GeoDB
type GeoDBSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GeoDBParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GeoDBInitParameters `json:"initProvider,omitempty"`
}

// GeoDBStatus defines the observed state of GeoDB.
type GeoDBStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GeoDBObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GeoDB is the Schema for the GeoDBs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type GeoDB struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	Spec   GeoDBSpec   `json:"spec"`
	Status GeoDBStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GeoDBList contains a list of GeoDBs
type GeoDBList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GeoDB `json:"items"`
}

// Repository type metadata.
var (
	GeoDB_Kind             = "GeoDB"
	GeoDB_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GeoDB_Kind}.String()
	GeoDB_KindAPIVersion   = GeoDB_Kind + "." + CRDGroupVersion.String()
	GeoDB_GroupVersionKind = CRDGroupVersion.WithKind(GeoDB_Kind)
)

func init() {
	SchemeBuilder.Register(&GeoDB{}, &GeoDBList{})
}
