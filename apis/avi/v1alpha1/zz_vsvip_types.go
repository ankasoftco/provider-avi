/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IpamSelectorInitParameters struct {
	Labels []IpamSelectorLabelsInitParameters `json:"labels,omitempty" tf:"labels,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IpamSelectorLabelsInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IpamSelectorLabelsObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IpamSelectorLabelsParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type IpamSelectorObservation struct {
	Labels []IpamSelectorLabelsObservation `json:"labels,omitempty" tf:"labels,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IpamSelectorParameters struct {

	// +kubebuilder:validation:Optional
	Labels []IpamSelectorLabelsParameters `json:"labels" tf:"labels,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VipFloatingIPInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VipFloatingIPObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VipFloatingIPParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VipFloatingIp6InitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VipFloatingIp6Observation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VipFloatingIp6Parameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VipIpamNetworkSubnetInitParameters struct {
	NetworkRef *string `json:"networkRef,omitempty" tf:"network_ref,omitempty"`

	Subnet []VipIpamNetworkSubnetSubnetInitParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	Subnet6 []VipIpamNetworkSubnetSubnet6InitParameters `json:"subnet6,omitempty" tf:"subnet6,omitempty"`

	Subnet6UUID *string `json:"subnet6Uuid,omitempty" tf:"subnet6_uuid,omitempty"`

	SubnetUUID *string `json:"subnetUuid,omitempty" tf:"subnet_uuid,omitempty"`
}

type VipIpamNetworkSubnetObservation struct {
	NetworkRef *string `json:"networkRef,omitempty" tf:"network_ref,omitempty"`

	Subnet []VipIpamNetworkSubnetSubnetObservation `json:"subnet,omitempty" tf:"subnet,omitempty"`

	Subnet6 []VipIpamNetworkSubnetSubnet6Observation `json:"subnet6,omitempty" tf:"subnet6,omitempty"`

	Subnet6UUID *string `json:"subnet6Uuid,omitempty" tf:"subnet6_uuid,omitempty"`

	SubnetUUID *string `json:"subnetUuid,omitempty" tf:"subnet_uuid,omitempty"`
}

type VipIpamNetworkSubnetParameters struct {

	// +kubebuilder:validation:Optional
	NetworkRef *string `json:"networkRef,omitempty" tf:"network_ref,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet []VipIpamNetworkSubnetSubnetParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet6 []VipIpamNetworkSubnetSubnet6Parameters `json:"subnet6,omitempty" tf:"subnet6,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet6UUID *string `json:"subnet6Uuid,omitempty" tf:"subnet6_uuid,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetUUID *string `json:"subnetUuid,omitempty" tf:"subnet_uuid,omitempty"`
}

type VipIpamNetworkSubnetSubnet6IPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VipIpamNetworkSubnetSubnet6IPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VipIpamNetworkSubnetSubnet6IPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VipIpamNetworkSubnetSubnet6InitParameters struct {
	IPAddr []VipIpamNetworkSubnetSubnet6IPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VipIpamNetworkSubnetSubnet6Observation struct {
	IPAddr []VipIpamNetworkSubnetSubnet6IPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VipIpamNetworkSubnetSubnet6Parameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []VipIpamNetworkSubnetSubnet6IPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type VipIpamNetworkSubnetSubnetIPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VipIpamNetworkSubnetSubnetIPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VipIpamNetworkSubnetSubnetIPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VipIpamNetworkSubnetSubnetInitParameters struct {
	IPAddr []VipIpamNetworkSubnetSubnetIPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VipIpamNetworkSubnetSubnetObservation struct {
	IPAddr []VipIpamNetworkSubnetSubnetIPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VipIpamNetworkSubnetSubnetParameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []VipIpamNetworkSubnetSubnetIPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type VipPlacementNetworksSubnet6IPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VipPlacementNetworksSubnet6IPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VipPlacementNetworksSubnet6IPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VipPlacementNetworksSubnet6InitParameters struct {
	IPAddr []VipPlacementNetworksSubnet6IPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VipPlacementNetworksSubnet6Observation struct {
	IPAddr []VipPlacementNetworksSubnet6IPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VipPlacementNetworksSubnet6Parameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []VipPlacementNetworksSubnet6IPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type VsvipConfigpbAttributesInitParameters struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type VsvipConfigpbAttributesObservation struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type VsvipConfigpbAttributesParameters struct {

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type VsvipDNSInfoCnameInitParameters struct {
	Cname *string `json:"cname,omitempty" tf:"cname,omitempty"`
}

type VsvipDNSInfoCnameObservation struct {
	Cname *string `json:"cname,omitempty" tf:"cname,omitempty"`
}

type VsvipDNSInfoCnameParameters struct {

	// +kubebuilder:validation:Optional
	Cname *string `json:"cname" tf:"cname,omitempty"`
}

type VsvipDNSInfoInitParameters struct {
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	Cname []VsvipDNSInfoCnameInitParameters `json:"cname,omitempty" tf:"cname,omitempty"`

	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	NumRecordsInResponse *string `json:"numRecordsInResponse,omitempty" tf:"num_records_in_response,omitempty"`

	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsvipDNSInfoObservation struct {
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	Cname []VsvipDNSInfoCnameObservation `json:"cname,omitempty" tf:"cname,omitempty"`

	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	NumRecordsInResponse *string `json:"numRecordsInResponse,omitempty" tf:"num_records_in_response,omitempty"`

	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsvipDNSInfoParameters struct {

	// +kubebuilder:validation:Optional
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// +kubebuilder:validation:Optional
	Cname []VsvipDNSInfoCnameParameters `json:"cname,omitempty" tf:"cname,omitempty"`

	// +kubebuilder:validation:Optional
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	// +kubebuilder:validation:Optional
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// +kubebuilder:validation:Optional
	NumRecordsInResponse *string `json:"numRecordsInResponse,omitempty" tf:"num_records_in_response,omitempty"`

	// +kubebuilder:validation:Optional
	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsvipInitParameters struct {
	BGPPeerLabels []*string `json:"bgpPeerLabels,omitempty" tf:"bgp_peer_labels,omitempty"`

	CloudRef *string `json:"cloudRef,omitempty" tf:"cloud_ref,omitempty"`

	ConfigpbAttributes []VsvipConfigpbAttributesInitParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	DNSInfo []VsvipDNSInfoInitParameters `json:"dnsInfo,omitempty" tf:"dns_info,omitempty"`

	EastWestPlacement *string `json:"eastWestPlacement,omitempty" tf:"east_west_placement,omitempty"`

	IpamSelector []IpamSelectorInitParameters `json:"ipamSelector,omitempty" tf:"ipam_selector,omitempty"`

	Markers []VsvipMarkersInitParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	Tier1Lr *string `json:"tier1Lr,omitempty" tf:"tier1_lr,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	UseStandardALB *string `json:"useStandardAlb,omitempty" tf:"use_standard_alb,omitempty"`

	Vip []VsvipVipInitParameters `json:"vip,omitempty" tf:"vip,omitempty"`

	VrfContextRef *string `json:"vrfContextRef,omitempty" tf:"vrf_context_ref,omitempty"`

	VsvipCloudConfigCksum *string `json:"vsvipCloudConfigCksum,omitempty" tf:"vsvip_cloud_config_cksum,omitempty"`
}

type VsvipMarkersInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type VsvipMarkersObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type VsvipMarkersParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type VsvipObservation struct {
	BGPPeerLabels []*string `json:"bgpPeerLabels,omitempty" tf:"bgp_peer_labels,omitempty"`

	CloudRef *string `json:"cloudRef,omitempty" tf:"cloud_ref,omitempty"`

	ConfigpbAttributes []VsvipConfigpbAttributesObservation `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	DNSInfo []VsvipDNSInfoObservation `json:"dnsInfo,omitempty" tf:"dns_info,omitempty"`

	EastWestPlacement *string `json:"eastWestPlacement,omitempty" tf:"east_west_placement,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IpamSelector []IpamSelectorObservation `json:"ipamSelector,omitempty" tf:"ipam_selector,omitempty"`

	Markers []VsvipMarkersObservation `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	Tier1Lr *string `json:"tier1Lr,omitempty" tf:"tier1_lr,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	UseStandardALB *string `json:"useStandardAlb,omitempty" tf:"use_standard_alb,omitempty"`

	Vip []VsvipVipObservation `json:"vip,omitempty" tf:"vip,omitempty"`

	VrfContextRef *string `json:"vrfContextRef,omitempty" tf:"vrf_context_ref,omitempty"`

	VsvipCloudConfigCksum *string `json:"vsvipCloudConfigCksum,omitempty" tf:"vsvip_cloud_config_cksum,omitempty"`
}

type VsvipParameters struct {

	// +kubebuilder:validation:Optional
	BGPPeerLabels []*string `json:"bgpPeerLabels,omitempty" tf:"bgp_peer_labels,omitempty"`

	// +kubebuilder:validation:Optional
	CloudRef *string `json:"cloudRef,omitempty" tf:"cloud_ref,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigpbAttributes []VsvipConfigpbAttributesParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	DNSInfo []VsvipDNSInfoParameters `json:"dnsInfo,omitempty" tf:"dns_info,omitempty"`

	// +kubebuilder:validation:Optional
	EastWestPlacement *string `json:"eastWestPlacement,omitempty" tf:"east_west_placement,omitempty"`

	// +kubebuilder:validation:Optional
	IpamSelector []IpamSelectorParameters `json:"ipamSelector,omitempty" tf:"ipam_selector,omitempty"`

	// +kubebuilder:validation:Optional
	Markers []VsvipMarkersParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	Tier1Lr *string `json:"tier1Lr,omitempty" tf:"tier1_lr,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// +kubebuilder:validation:Optional
	UseStandardALB *string `json:"useStandardAlb,omitempty" tf:"use_standard_alb,omitempty"`

	// +kubebuilder:validation:Optional
	Vip []VsvipVipParameters `json:"vip,omitempty" tf:"vip,omitempty"`

	// +kubebuilder:validation:Optional
	VrfContextRef *string `json:"vrfContextRef,omitempty" tf:"vrf_context_ref,omitempty"`

	// +kubebuilder:validation:Optional
	VsvipCloudConfigCksum *string `json:"vsvipCloudConfigCksum,omitempty" tf:"vsvip_cloud_config_cksum,omitempty"`
}

type VsvipVipDiscoveredNetworksInitParameters struct {
	NetworkRef *string `json:"networkRef,omitempty" tf:"network_ref,omitempty"`

	Subnet []VsvipVipDiscoveredNetworksSubnetInitParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	Subnet6 []VsvipVipDiscoveredNetworksSubnet6InitParameters `json:"subnet6,omitempty" tf:"subnet6,omitempty"`
}

type VsvipVipDiscoveredNetworksObservation struct {
	NetworkRef *string `json:"networkRef,omitempty" tf:"network_ref,omitempty"`

	Subnet []VsvipVipDiscoveredNetworksSubnetObservation `json:"subnet,omitempty" tf:"subnet,omitempty"`

	Subnet6 []VsvipVipDiscoveredNetworksSubnet6Observation `json:"subnet6,omitempty" tf:"subnet6,omitempty"`
}

type VsvipVipDiscoveredNetworksParameters struct {

	// +kubebuilder:validation:Optional
	NetworkRef *string `json:"networkRef" tf:"network_ref,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet []VsvipVipDiscoveredNetworksSubnetParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet6 []VsvipVipDiscoveredNetworksSubnet6Parameters `json:"subnet6,omitempty" tf:"subnet6,omitempty"`
}

type VsvipVipDiscoveredNetworksSubnet6IPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsvipVipDiscoveredNetworksSubnet6IPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsvipVipDiscoveredNetworksSubnet6IPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VsvipVipDiscoveredNetworksSubnet6InitParameters struct {
	IPAddr []VsvipVipDiscoveredNetworksSubnet6IPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VsvipVipDiscoveredNetworksSubnet6Observation struct {
	IPAddr []VsvipVipDiscoveredNetworksSubnet6IPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VsvipVipDiscoveredNetworksSubnet6Parameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []VsvipVipDiscoveredNetworksSubnet6IPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type VsvipVipDiscoveredNetworksSubnetIPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsvipVipDiscoveredNetworksSubnetIPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsvipVipDiscoveredNetworksSubnetIPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VsvipVipDiscoveredNetworksSubnetInitParameters struct {
	IPAddr []VsvipVipDiscoveredNetworksSubnetIPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VsvipVipDiscoveredNetworksSubnetObservation struct {
	IPAddr []VsvipVipDiscoveredNetworksSubnetIPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VsvipVipDiscoveredNetworksSubnetParameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []VsvipVipDiscoveredNetworksSubnetIPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type VsvipVipIPAddressInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsvipVipIPAddressObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsvipVipIPAddressParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VsvipVipInitParameters struct {
	AutoAllocateFloatingIP *string `json:"autoAllocateFloatingIp,omitempty" tf:"auto_allocate_floating_ip,omitempty"`

	AutoAllocateIP *string `json:"autoAllocateIp,omitempty" tf:"auto_allocate_ip,omitempty"`

	AutoAllocateIPType *string `json:"autoAllocateIpType,omitempty" tf:"auto_allocate_ip_type,omitempty"`

	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	AviAllocatedFip *string `json:"aviAllocatedFip,omitempty" tf:"avi_allocated_fip,omitempty"`

	AviAllocatedVip *string `json:"aviAllocatedVip,omitempty" tf:"avi_allocated_vip,omitempty"`

	DiscoveredNetworks []VsvipVipDiscoveredNetworksInitParameters `json:"discoveredNetworks,omitempty" tf:"discovered_networks,omitempty"`

	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	FloatingIP []VipFloatingIPInitParameters `json:"floatingIp,omitempty" tf:"floating_ip,omitempty"`

	FloatingIp6 []VipFloatingIp6InitParameters `json:"floatingIp6,omitempty" tf:"floating_ip6,omitempty"`

	FloatingSubnet6UUID *string `json:"floatingSubnet6Uuid,omitempty" tf:"floating_subnet6_uuid,omitempty"`

	FloatingSubnetUUID *string `json:"floatingSubnetUuid,omitempty" tf:"floating_subnet_uuid,omitempty"`

	IPAddress []VsvipVipIPAddressInitParameters `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	Ip6Address []VsvipVipIp6AddressInitParameters `json:"ip6Address,omitempty" tf:"ip6_address,omitempty"`

	IpamNetworkSubnet []VipIpamNetworkSubnetInitParameters `json:"ipamNetworkSubnet,omitempty" tf:"ipam_network_subnet,omitempty"`

	NetworkRef *string `json:"networkRef,omitempty" tf:"network_ref,omitempty"`

	PlacementNetworks []VsvipVipPlacementNetworksInitParameters `json:"placementNetworks,omitempty" tf:"placement_networks,omitempty"`

	PortUUID *string `json:"portUuid,omitempty" tf:"port_uuid,omitempty"`

	PrefixLength *string `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	Subnet []VsvipVipSubnetInitParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	Subnet6 []VsvipVipSubnet6InitParameters `json:"subnet6,omitempty" tf:"subnet6,omitempty"`

	Subnet6UUID *string `json:"subnet6Uuid,omitempty" tf:"subnet6_uuid,omitempty"`

	SubnetUUID *string `json:"subnetUuid,omitempty" tf:"subnet_uuid,omitempty"`

	VipID *string `json:"vipId,omitempty" tf:"vip_id,omitempty"`
}

type VsvipVipIp6AddressInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsvipVipIp6AddressObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsvipVipIp6AddressParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VsvipVipObservation struct {
	AutoAllocateFloatingIP *string `json:"autoAllocateFloatingIp,omitempty" tf:"auto_allocate_floating_ip,omitempty"`

	AutoAllocateIP *string `json:"autoAllocateIp,omitempty" tf:"auto_allocate_ip,omitempty"`

	AutoAllocateIPType *string `json:"autoAllocateIpType,omitempty" tf:"auto_allocate_ip_type,omitempty"`

	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	AviAllocatedFip *string `json:"aviAllocatedFip,omitempty" tf:"avi_allocated_fip,omitempty"`

	AviAllocatedVip *string `json:"aviAllocatedVip,omitempty" tf:"avi_allocated_vip,omitempty"`

	DiscoveredNetworks []VsvipVipDiscoveredNetworksObservation `json:"discoveredNetworks,omitempty" tf:"discovered_networks,omitempty"`

	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	FloatingIP []VipFloatingIPObservation `json:"floatingIp,omitempty" tf:"floating_ip,omitempty"`

	FloatingIp6 []VipFloatingIp6Observation `json:"floatingIp6,omitempty" tf:"floating_ip6,omitempty"`

	FloatingSubnet6UUID *string `json:"floatingSubnet6Uuid,omitempty" tf:"floating_subnet6_uuid,omitempty"`

	FloatingSubnetUUID *string `json:"floatingSubnetUuid,omitempty" tf:"floating_subnet_uuid,omitempty"`

	IPAddress []VsvipVipIPAddressObservation `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	Ip6Address []VsvipVipIp6AddressObservation `json:"ip6Address,omitempty" tf:"ip6_address,omitempty"`

	IpamNetworkSubnet []VipIpamNetworkSubnetObservation `json:"ipamNetworkSubnet,omitempty" tf:"ipam_network_subnet,omitempty"`

	NetworkRef *string `json:"networkRef,omitempty" tf:"network_ref,omitempty"`

	PlacementNetworks []VsvipVipPlacementNetworksObservation `json:"placementNetworks,omitempty" tf:"placement_networks,omitempty"`

	PortUUID *string `json:"portUuid,omitempty" tf:"port_uuid,omitempty"`

	PrefixLength *string `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	Subnet []VsvipVipSubnetObservation `json:"subnet,omitempty" tf:"subnet,omitempty"`

	Subnet6 []VsvipVipSubnet6Observation `json:"subnet6,omitempty" tf:"subnet6,omitempty"`

	Subnet6UUID *string `json:"subnet6Uuid,omitempty" tf:"subnet6_uuid,omitempty"`

	SubnetUUID *string `json:"subnetUuid,omitempty" tf:"subnet_uuid,omitempty"`

	VipID *string `json:"vipId,omitempty" tf:"vip_id,omitempty"`
}

type VsvipVipParameters struct {

	// +kubebuilder:validation:Optional
	AutoAllocateFloatingIP *string `json:"autoAllocateFloatingIp,omitempty" tf:"auto_allocate_floating_ip,omitempty"`

	// +kubebuilder:validation:Optional
	AutoAllocateIP *string `json:"autoAllocateIp,omitempty" tf:"auto_allocate_ip,omitempty"`

	// +kubebuilder:validation:Optional
	AutoAllocateIPType *string `json:"autoAllocateIpType,omitempty" tf:"auto_allocate_ip_type,omitempty"`

	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// +kubebuilder:validation:Optional
	AviAllocatedFip *string `json:"aviAllocatedFip,omitempty" tf:"avi_allocated_fip,omitempty"`

	// +kubebuilder:validation:Optional
	AviAllocatedVip *string `json:"aviAllocatedVip,omitempty" tf:"avi_allocated_vip,omitempty"`

	// +kubebuilder:validation:Optional
	DiscoveredNetworks []VsvipVipDiscoveredNetworksParameters `json:"discoveredNetworks,omitempty" tf:"discovered_networks,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	FloatingIP []VipFloatingIPParameters `json:"floatingIp,omitempty" tf:"floating_ip,omitempty"`

	// +kubebuilder:validation:Optional
	FloatingIp6 []VipFloatingIp6Parameters `json:"floatingIp6,omitempty" tf:"floating_ip6,omitempty"`

	// +kubebuilder:validation:Optional
	FloatingSubnet6UUID *string `json:"floatingSubnet6Uuid,omitempty" tf:"floating_subnet6_uuid,omitempty"`

	// +kubebuilder:validation:Optional
	FloatingSubnetUUID *string `json:"floatingSubnetUuid,omitempty" tf:"floating_subnet_uuid,omitempty"`

	// +kubebuilder:validation:Optional
	IPAddress []VsvipVipIPAddressParameters `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// +kubebuilder:validation:Optional
	Ip6Address []VsvipVipIp6AddressParameters `json:"ip6Address,omitempty" tf:"ip6_address,omitempty"`

	// +kubebuilder:validation:Optional
	IpamNetworkSubnet []VipIpamNetworkSubnetParameters `json:"ipamNetworkSubnet,omitempty" tf:"ipam_network_subnet,omitempty"`

	// +kubebuilder:validation:Optional
	NetworkRef *string `json:"networkRef,omitempty" tf:"network_ref,omitempty"`

	// +kubebuilder:validation:Optional
	PlacementNetworks []VsvipVipPlacementNetworksParameters `json:"placementNetworks,omitempty" tf:"placement_networks,omitempty"`

	// +kubebuilder:validation:Optional
	PortUUID *string `json:"portUuid,omitempty" tf:"port_uuid,omitempty"`

	// +kubebuilder:validation:Optional
	PrefixLength *string `json:"prefixLength,omitempty" tf:"prefix_length,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet []VsvipVipSubnetParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet6 []VsvipVipSubnet6Parameters `json:"subnet6,omitempty" tf:"subnet6,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet6UUID *string `json:"subnet6Uuid,omitempty" tf:"subnet6_uuid,omitempty"`

	// +kubebuilder:validation:Optional
	SubnetUUID *string `json:"subnetUuid,omitempty" tf:"subnet_uuid,omitempty"`

	// +kubebuilder:validation:Optional
	VipID *string `json:"vipId" tf:"vip_id,omitempty"`
}

type VsvipVipPlacementNetworksInitParameters struct {
	NetworkRef *string `json:"networkRef,omitempty" tf:"network_ref,omitempty"`

	Subnet []VsvipVipPlacementNetworksSubnetInitParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	Subnet6 []VipPlacementNetworksSubnet6InitParameters `json:"subnet6,omitempty" tf:"subnet6,omitempty"`
}

type VsvipVipPlacementNetworksObservation struct {
	NetworkRef *string `json:"networkRef,omitempty" tf:"network_ref,omitempty"`

	Subnet []VsvipVipPlacementNetworksSubnetObservation `json:"subnet,omitempty" tf:"subnet,omitempty"`

	Subnet6 []VipPlacementNetworksSubnet6Observation `json:"subnet6,omitempty" tf:"subnet6,omitempty"`
}

type VsvipVipPlacementNetworksParameters struct {

	// +kubebuilder:validation:Optional
	NetworkRef *string `json:"networkRef,omitempty" tf:"network_ref,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet []VsvipVipPlacementNetworksSubnetParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet6 []VipPlacementNetworksSubnet6Parameters `json:"subnet6,omitempty" tf:"subnet6,omitempty"`
}

type VsvipVipPlacementNetworksSubnetIPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsvipVipPlacementNetworksSubnetIPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsvipVipPlacementNetworksSubnetIPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VsvipVipPlacementNetworksSubnetInitParameters struct {
	IPAddr []VsvipVipPlacementNetworksSubnetIPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VsvipVipPlacementNetworksSubnetObservation struct {
	IPAddr []VsvipVipPlacementNetworksSubnetIPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VsvipVipPlacementNetworksSubnetParameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []VsvipVipPlacementNetworksSubnetIPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type VsvipVipSubnet6IPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsvipVipSubnet6IPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsvipVipSubnet6IPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VsvipVipSubnet6InitParameters struct {
	IPAddr []VsvipVipSubnet6IPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VsvipVipSubnet6Observation struct {
	IPAddr []VsvipVipSubnet6IPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VsvipVipSubnet6Parameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []VsvipVipSubnet6IPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type VsvipVipSubnetIPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsvipVipSubnetIPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VsvipVipSubnetIPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type VsvipVipSubnetInitParameters struct {
	IPAddr []VsvipVipSubnetIPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VsvipVipSubnetObservation struct {
	IPAddr []VsvipVipSubnetIPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type VsvipVipSubnetParameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []VsvipVipSubnetIPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

// VsvipSpec defines the desired state of Vsvip
type VsvipSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VsvipParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VsvipInitParameters `json:"initProvider,omitempty"`
}

// VsvipStatus defines the observed state of Vsvip.
type VsvipStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VsvipObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Vsvip is the Schema for the Vsvips API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type Vsvip struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	Spec   VsvipSpec   `json:"spec"`
	Status VsvipStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VsvipList contains a list of Vsvips
type VsvipList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Vsvip `json:"items"`
}

// Repository type metadata.
var (
	Vsvip_Kind             = "Vsvip"
	Vsvip_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Vsvip_Kind}.String()
	Vsvip_KindAPIVersion   = Vsvip_Kind + "." + CRDGroupVersion.String()
	Vsvip_GroupVersionKind = CRDGroupVersion.WithKind(Vsvip_Kind)
)

func init() {
	SchemeBuilder.Register(&Vsvip{}, &VsvipList{})
}
