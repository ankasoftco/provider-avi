/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type Testsedatastorelevel3ConfigpbAttributesInitParameters struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type Testsedatastorelevel3ConfigpbAttributesObservation struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type Testsedatastorelevel3ConfigpbAttributesParameters struct {

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type Testsedatastorelevel3InitParameters struct {
	ConfigpbAttributes []Testsedatastorelevel3ConfigpbAttributesInitParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type Testsedatastorelevel3Observation struct {
	ConfigpbAttributes []Testsedatastorelevel3ConfigpbAttributesObservation `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type Testsedatastorelevel3Parameters struct {

	// +kubebuilder:validation:Optional
	ConfigpbAttributes []Testsedatastorelevel3ConfigpbAttributesParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

// Testsedatastorelevel3Spec defines the desired state of Testsedatastorelevel3
type Testsedatastorelevel3Spec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     Testsedatastorelevel3Parameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider Testsedatastorelevel3InitParameters `json:"initProvider,omitempty"`
}

// Testsedatastorelevel3Status defines the observed state of Testsedatastorelevel3.
type Testsedatastorelevel3Status struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        Testsedatastorelevel3Observation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Testsedatastorelevel3 is the Schema for the Testsedatastorelevel3s API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type Testsedatastorelevel3 struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	Spec   Testsedatastorelevel3Spec   `json:"spec"`
	Status Testsedatastorelevel3Status `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// Testsedatastorelevel3List contains a list of Testsedatastorelevel3s
type Testsedatastorelevel3List struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Testsedatastorelevel3 `json:"items"`
}

// Repository type metadata.
var (
	Testsedatastorelevel3_Kind             = "Testsedatastorelevel3"
	Testsedatastorelevel3_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Testsedatastorelevel3_Kind}.String()
	Testsedatastorelevel3_KindAPIVersion   = Testsedatastorelevel3_Kind + "." + CRDGroupVersion.String()
	Testsedatastorelevel3_GroupVersionKind = CRDGroupVersion.WithKind(Testsedatastorelevel3_Kind)
)

func init() {
	SchemeBuilder.Register(&Testsedatastorelevel3{}, &Testsedatastorelevel3List{})
}
