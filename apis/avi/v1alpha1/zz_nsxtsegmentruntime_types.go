/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type NsxtSegmentRuntimeInitParameters struct {
	CloudRef *string `json:"cloudRef,omitempty" tf:"cloud_ref,omitempty"`

	DHCPEnabled *string `json:"dhcpEnabled,omitempty" tf:"dhcp_enabled,omitempty"`

	DHCPRanges []*string `json:"dhcpRanges,omitempty" tf:"dhcp_ranges,omitempty"`

	Dhcp6Ranges []*string `json:"dhcp6Ranges,omitempty" tf:"dhcp6_ranges,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	NwName *string `json:"nwName,omitempty" tf:"nw_name,omitempty"`

	NwRef *string `json:"nwRef,omitempty" tf:"nw_ref,omitempty"`

	OpaqueNetworkID *string `json:"opaqueNetworkId,omitempty" tf:"opaque_network_id,omitempty"`

	OriginID *string `json:"originId,omitempty" tf:"origin_id,omitempty"`

	SecurityOnlyNsxt *string `json:"securityOnlyNsxt,omitempty" tf:"security_only_nsxt,omitempty"`

	SegmentGw *string `json:"segmentGw,omitempty" tf:"segment_gw,omitempty"`

	SegmentGw6 *string `json:"segmentGw6,omitempty" tf:"segment_gw6,omitempty"`

	SegmentID *string `json:"segmentId,omitempty" tf:"segment_id,omitempty"`

	Segname *string `json:"segname,omitempty" tf:"segname,omitempty"`

	Subnet *string `json:"subnet,omitempty" tf:"subnet,omitempty"`

	Subnet6 *string `json:"subnet6,omitempty" tf:"subnet6,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	Tier1ID *string `json:"tier1Id,omitempty" tf:"tier1_id,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	VlanIds []*string `json:"vlanIds,omitempty" tf:"vlan_ids,omitempty"`

	VrfContextRef *string `json:"vrfContextRef,omitempty" tf:"vrf_context_ref,omitempty"`
}

type NsxtSegmentRuntimeObservation struct {
	CloudRef *string `json:"cloudRef,omitempty" tf:"cloud_ref,omitempty"`

	DHCPEnabled *string `json:"dhcpEnabled,omitempty" tf:"dhcp_enabled,omitempty"`

	DHCPRanges []*string `json:"dhcpRanges,omitempty" tf:"dhcp_ranges,omitempty"`

	Dhcp6Ranges []*string `json:"dhcp6Ranges,omitempty" tf:"dhcp6_ranges,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	NwName *string `json:"nwName,omitempty" tf:"nw_name,omitempty"`

	NwRef *string `json:"nwRef,omitempty" tf:"nw_ref,omitempty"`

	OpaqueNetworkID *string `json:"opaqueNetworkId,omitempty" tf:"opaque_network_id,omitempty"`

	OriginID *string `json:"originId,omitempty" tf:"origin_id,omitempty"`

	SecurityOnlyNsxt *string `json:"securityOnlyNsxt,omitempty" tf:"security_only_nsxt,omitempty"`

	SegmentGw *string `json:"segmentGw,omitempty" tf:"segment_gw,omitempty"`

	SegmentGw6 *string `json:"segmentGw6,omitempty" tf:"segment_gw6,omitempty"`

	SegmentID *string `json:"segmentId,omitempty" tf:"segment_id,omitempty"`

	Segname *string `json:"segname,omitempty" tf:"segname,omitempty"`

	Subnet *string `json:"subnet,omitempty" tf:"subnet,omitempty"`

	Subnet6 *string `json:"subnet6,omitempty" tf:"subnet6,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	Tier1ID *string `json:"tier1Id,omitempty" tf:"tier1_id,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	VlanIds []*string `json:"vlanIds,omitempty" tf:"vlan_ids,omitempty"`

	VrfContextRef *string `json:"vrfContextRef,omitempty" tf:"vrf_context_ref,omitempty"`
}

type NsxtSegmentRuntimeParameters struct {

	// +kubebuilder:validation:Optional
	CloudRef *string `json:"cloudRef,omitempty" tf:"cloud_ref,omitempty"`

	// +kubebuilder:validation:Optional
	DHCPEnabled *string `json:"dhcpEnabled,omitempty" tf:"dhcp_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	DHCPRanges []*string `json:"dhcpRanges,omitempty" tf:"dhcp_ranges,omitempty"`

	// +kubebuilder:validation:Optional
	Dhcp6Ranges []*string `json:"dhcp6Ranges,omitempty" tf:"dhcp6_ranges,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NwName *string `json:"nwName,omitempty" tf:"nw_name,omitempty"`

	// +kubebuilder:validation:Optional
	NwRef *string `json:"nwRef,omitempty" tf:"nw_ref,omitempty"`

	// +kubebuilder:validation:Optional
	OpaqueNetworkID *string `json:"opaqueNetworkId,omitempty" tf:"opaque_network_id,omitempty"`

	// +kubebuilder:validation:Optional
	OriginID *string `json:"originId,omitempty" tf:"origin_id,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityOnlyNsxt *string `json:"securityOnlyNsxt,omitempty" tf:"security_only_nsxt,omitempty"`

	// +kubebuilder:validation:Optional
	SegmentGw *string `json:"segmentGw,omitempty" tf:"segment_gw,omitempty"`

	// +kubebuilder:validation:Optional
	SegmentGw6 *string `json:"segmentGw6,omitempty" tf:"segment_gw6,omitempty"`

	// +kubebuilder:validation:Optional
	SegmentID *string `json:"segmentId,omitempty" tf:"segment_id,omitempty"`

	// +kubebuilder:validation:Optional
	Segname *string `json:"segname,omitempty" tf:"segname,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet *string `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet6 *string `json:"subnet6,omitempty" tf:"subnet6,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	Tier1ID *string `json:"tier1Id,omitempty" tf:"tier1_id,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// +kubebuilder:validation:Optional
	VlanIds []*string `json:"vlanIds,omitempty" tf:"vlan_ids,omitempty"`

	// +kubebuilder:validation:Optional
	VrfContextRef *string `json:"vrfContextRef,omitempty" tf:"vrf_context_ref,omitempty"`
}

// NsxtSegmentRuntimeSpec defines the desired state of NsxtSegmentRuntime
type NsxtSegmentRuntimeSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NsxtSegmentRuntimeParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NsxtSegmentRuntimeInitParameters `json:"initProvider,omitempty"`
}

// NsxtSegmentRuntimeStatus defines the observed state of NsxtSegmentRuntime.
type NsxtSegmentRuntimeStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NsxtSegmentRuntimeObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtSegmentRuntime is the Schema for the NsxtSegmentRuntimes API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type NsxtSegmentRuntime struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NsxtSegmentRuntimeSpec   `json:"spec"`
	Status            NsxtSegmentRuntimeStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NsxtSegmentRuntimeList contains a list of NsxtSegmentRuntimes
type NsxtSegmentRuntimeList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NsxtSegmentRuntime `json:"items"`
}

// Repository type metadata.
var (
	NsxtSegmentRuntime_Kind             = "NsxtSegmentRuntime"
	NsxtSegmentRuntime_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NsxtSegmentRuntime_Kind}.String()
	NsxtSegmentRuntime_KindAPIVersion   = NsxtSegmentRuntime_Kind + "." + CRDGroupVersion.String()
	NsxtSegmentRuntime_GroupVersionKind = CRDGroupVersion.WithKind(NsxtSegmentRuntime_Kind)
)

func init() {
	SchemeBuilder.Register(&NsxtSegmentRuntime{}, &NsxtSegmentRuntimeList{})
}
