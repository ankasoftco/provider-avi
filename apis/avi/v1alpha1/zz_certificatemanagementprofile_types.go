/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CertificateManagementProfileConfigpbAttributesInitParameters struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type CertificateManagementProfileConfigpbAttributesObservation struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type CertificateManagementProfileConfigpbAttributesParameters struct {

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type CertificateManagementProfileInitParameters struct {
	ConfigpbAttributes []CertificateManagementProfileConfigpbAttributesInitParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	Markers []CertificateManagementProfileMarkersInitParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	RunScriptRef *string `json:"runScriptRef,omitempty" tf:"run_script_ref,omitempty"`

	ScriptParams []ScriptParamsInitParameters `json:"scriptParams,omitempty" tf:"script_params,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type CertificateManagementProfileMarkersInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type CertificateManagementProfileMarkersObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type CertificateManagementProfileMarkersParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type CertificateManagementProfileObservation struct {
	ConfigpbAttributes []CertificateManagementProfileConfigpbAttributesObservation `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Markers []CertificateManagementProfileMarkersObservation `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	RunScriptRef *string `json:"runScriptRef,omitempty" tf:"run_script_ref,omitempty"`

	ScriptParams []ScriptParamsObservation `json:"scriptParams,omitempty" tf:"script_params,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type CertificateManagementProfileParameters struct {

	// +kubebuilder:validation:Optional
	ConfigpbAttributes []CertificateManagementProfileConfigpbAttributesParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	Markers []CertificateManagementProfileMarkersParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	RunScriptRef *string `json:"runScriptRef,omitempty" tf:"run_script_ref,omitempty"`

	// +kubebuilder:validation:Optional
	ScriptParams []ScriptParamsParameters `json:"scriptParams,omitempty" tf:"script_params,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type ScriptParamsInitParameters struct {
	IsDynamic *string `json:"isDynamic,omitempty" tf:"is_dynamic,omitempty"`

	IsSensitive *string `json:"isSensitive,omitempty" tf:"is_sensitive,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ScriptParamsObservation struct {
	IsDynamic *string `json:"isDynamic,omitempty" tf:"is_dynamic,omitempty"`

	IsSensitive *string `json:"isSensitive,omitempty" tf:"is_sensitive,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ScriptParamsParameters struct {

	// +kubebuilder:validation:Optional
	IsDynamic *string `json:"isDynamic,omitempty" tf:"is_dynamic,omitempty"`

	// +kubebuilder:validation:Optional
	IsSensitive *string `json:"isSensitive,omitempty" tf:"is_sensitive,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

// CertificateManagementProfileSpec defines the desired state of CertificateManagementProfile
type CertificateManagementProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     CertificateManagementProfileParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider CertificateManagementProfileInitParameters `json:"initProvider,omitempty"`
}

// CertificateManagementProfileStatus defines the observed state of CertificateManagementProfile.
type CertificateManagementProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        CertificateManagementProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// CertificateManagementProfile is the Schema for the CertificateManagementProfiles API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type CertificateManagementProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.runScriptRef) || has(self.initProvider.runScriptRef)",message="runScriptRef is a required parameter"
	Spec   CertificateManagementProfileSpec   `json:"spec"`
	Status CertificateManagementProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// CertificateManagementProfileList contains a list of CertificateManagementProfiles
type CertificateManagementProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []CertificateManagementProfile `json:"items"`
}

// Repository type metadata.
var (
	CertificateManagementProfile_Kind             = "CertificateManagementProfile"
	CertificateManagementProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: CertificateManagementProfile_Kind}.String()
	CertificateManagementProfile_KindAPIVersion   = CertificateManagementProfile_Kind + "." + CRDGroupVersion.String()
	CertificateManagementProfile_GroupVersionKind = CRDGroupVersion.WithKind(CertificateManagementProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&CertificateManagementProfile{}, &CertificateManagementProfileList{})
}
