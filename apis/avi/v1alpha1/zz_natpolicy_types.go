/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DestinationIPAddrsInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DestinationIPAddrsObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DestinationIPAddrsParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type DestinationIPInitParameters struct {
	Addrs []DestinationIPAddrsInitParameters `json:"addrs,omitempty" tf:"addrs,omitempty"`

	GroupRefs []*string `json:"groupRefs,omitempty" tf:"group_refs,omitempty"`

	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Prefixes []DestinationIPPrefixesInitParameters `json:"prefixes,omitempty" tf:"prefixes,omitempty"`

	Ranges []DestinationIPRangesInitParameters `json:"ranges,omitempty" tf:"ranges,omitempty"`
}

type DestinationIPObservation struct {
	Addrs []DestinationIPAddrsObservation `json:"addrs,omitempty" tf:"addrs,omitempty"`

	GroupRefs []*string `json:"groupRefs,omitempty" tf:"group_refs,omitempty"`

	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Prefixes []DestinationIPPrefixesObservation `json:"prefixes,omitempty" tf:"prefixes,omitempty"`

	Ranges []DestinationIPRangesObservation `json:"ranges,omitempty" tf:"ranges,omitempty"`
}

type DestinationIPParameters struct {

	// +kubebuilder:validation:Optional
	Addrs []DestinationIPAddrsParameters `json:"addrs,omitempty" tf:"addrs,omitempty"`

	// +kubebuilder:validation:Optional
	GroupRefs []*string `json:"groupRefs,omitempty" tf:"group_refs,omitempty"`

	// +kubebuilder:validation:Optional
	MatchCriteria *string `json:"matchCriteria" tf:"match_criteria,omitempty"`

	// +kubebuilder:validation:Optional
	Prefixes []DestinationIPPrefixesParameters `json:"prefixes,omitempty" tf:"prefixes,omitempty"`

	// +kubebuilder:validation:Optional
	Ranges []DestinationIPRangesParameters `json:"ranges,omitempty" tf:"ranges,omitempty"`
}

type DestinationIPPrefixesIPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DestinationIPPrefixesIPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DestinationIPPrefixesIPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type DestinationIPPrefixesInitParameters struct {
	IPAddr []DestinationIPPrefixesIPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type DestinationIPPrefixesObservation struct {
	IPAddr []DestinationIPPrefixesIPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type DestinationIPPrefixesParameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []DestinationIPPrefixesIPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type DestinationIPRangesBeginInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DestinationIPRangesBeginObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DestinationIPRangesBeginParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type DestinationIPRangesEndInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DestinationIPRangesEndObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type DestinationIPRangesEndParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type DestinationIPRangesInitParameters struct {
	Begin []DestinationIPRangesBeginInitParameters `json:"begin,omitempty" tf:"begin,omitempty"`

	End []DestinationIPRangesEndInitParameters `json:"end,omitempty" tf:"end,omitempty"`
}

type DestinationIPRangesObservation struct {
	Begin []DestinationIPRangesBeginObservation `json:"begin,omitempty" tf:"begin,omitempty"`

	End []DestinationIPRangesEndObservation `json:"end,omitempty" tf:"end,omitempty"`
}

type DestinationIPRangesParameters struct {

	// +kubebuilder:validation:Optional
	Begin []DestinationIPRangesBeginParameters `json:"begin" tf:"begin,omitempty"`

	// +kubebuilder:validation:Optional
	End []DestinationIPRangesEndParameters `json:"end" tf:"end,omitempty"`
}

type DestinationPortInitParameters struct {
	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`
}

type DestinationPortObservation struct {
	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`
}

type DestinationPortParameters struct {

	// +kubebuilder:validation:Optional
	MatchCriteria *string `json:"matchCriteria" tf:"match_criteria,omitempty"`

	// +kubebuilder:validation:Optional
	Ports []*float64 `json:"ports" tf:"ports,omitempty"`
}

type NATIPInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NATIPObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NATIPParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type NATIPRangeBeginInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NATIPRangeBeginObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NATIPRangeBeginParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type NATIPRangeEndInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NATIPRangeEndObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NATIPRangeEndParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type NATIPRangeInitParameters struct {
	Begin []NATIPRangeBeginInitParameters `json:"begin,omitempty" tf:"begin,omitempty"`

	End []NATIPRangeEndInitParameters `json:"end,omitempty" tf:"end,omitempty"`
}

type NATIPRangeObservation struct {
	Begin []NATIPRangeBeginObservation `json:"begin,omitempty" tf:"begin,omitempty"`

	End []NATIPRangeEndObservation `json:"end,omitempty" tf:"end,omitempty"`
}

type NATIPRangeParameters struct {

	// +kubebuilder:validation:Optional
	Begin []NATIPRangeBeginParameters `json:"begin" tf:"begin,omitempty"`

	// +kubebuilder:validation:Optional
	End []NATIPRangeEndParameters `json:"end" tf:"end,omitempty"`
}

type NATInfoInitParameters struct {
	NATIP []NATIPInitParameters `json:"natIp,omitempty" tf:"nat_ip,omitempty"`

	NATIPRange []NATIPRangeInitParameters `json:"natIpRange,omitempty" tf:"nat_ip_range,omitempty"`
}

type NATInfoObservation struct {
	NATIP []NATIPObservation `json:"natIp,omitempty" tf:"nat_ip,omitempty"`

	NATIPRange []NATIPRangeObservation `json:"natIpRange,omitempty" tf:"nat_ip_range,omitempty"`
}

type NATInfoParameters struct {

	// +kubebuilder:validation:Optional
	NATIP []NATIPParameters `json:"natIp,omitempty" tf:"nat_ip,omitempty"`

	// +kubebuilder:validation:Optional
	NATIPRange []NATIPRangeParameters `json:"natIpRange,omitempty" tf:"nat_ip_range,omitempty"`
}

type NatPolicyConfigpbAttributesInitParameters struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type NatPolicyConfigpbAttributesObservation struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type NatPolicyConfigpbAttributesParameters struct {

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type NatPolicyInitParameters struct {
	ConfigpbAttributes []NatPolicyConfigpbAttributesInitParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Markers []NatPolicyMarkersInitParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Rules []NatPolicyRulesInitParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type NatPolicyMarkersInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type NatPolicyMarkersObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type NatPolicyMarkersParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type NatPolicyObservation struct {
	ConfigpbAttributes []NatPolicyConfigpbAttributesObservation `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Markers []NatPolicyMarkersObservation `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Rules []NatPolicyRulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type NatPolicyParameters struct {

	// +kubebuilder:validation:Optional
	ConfigpbAttributes []NatPolicyConfigpbAttributesParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Markers []NatPolicyMarkersParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Rules []NatPolicyRulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type NatPolicyRulesActionInitParameters struct {
	NATInfo []NATInfoInitParameters `json:"natInfo,omitempty" tf:"nat_info,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NatPolicyRulesActionObservation struct {
	NATInfo []NATInfoObservation `json:"natInfo,omitempty" tf:"nat_info,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NatPolicyRulesActionParameters struct {

	// +kubebuilder:validation:Optional
	NATInfo []NATInfoParameters `json:"natInfo,omitempty" tf:"nat_info,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type NatPolicyRulesInitParameters struct {
	Action []NatPolicyRulesActionInitParameters `json:"action,omitempty" tf:"action,omitempty"`

	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	Enable *string `json:"enable,omitempty" tf:"enable,omitempty"`

	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	Match []NatPolicyRulesMatchInitParameters `json:"match,omitempty" tf:"match,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type NatPolicyRulesMatchInitParameters struct {
	DestinationIP []DestinationIPInitParameters `json:"destinationIp,omitempty" tf:"destination_ip,omitempty"`

	Services []ServicesInitParameters `json:"services,omitempty" tf:"services,omitempty"`

	SourceIP []NatPolicyRulesMatchSourceIPInitParameters `json:"sourceIp,omitempty" tf:"source_ip,omitempty"`
}

type NatPolicyRulesMatchObservation struct {
	DestinationIP []DestinationIPObservation `json:"destinationIp,omitempty" tf:"destination_ip,omitempty"`

	Services []ServicesObservation `json:"services,omitempty" tf:"services,omitempty"`

	SourceIP []NatPolicyRulesMatchSourceIPObservation `json:"sourceIp,omitempty" tf:"source_ip,omitempty"`
}

type NatPolicyRulesMatchParameters struct {

	// +kubebuilder:validation:Optional
	DestinationIP []DestinationIPParameters `json:"destinationIp,omitempty" tf:"destination_ip,omitempty"`

	// +kubebuilder:validation:Optional
	Services []ServicesParameters `json:"services,omitempty" tf:"services,omitempty"`

	// +kubebuilder:validation:Optional
	SourceIP []NatPolicyRulesMatchSourceIPParameters `json:"sourceIp,omitempty" tf:"source_ip,omitempty"`
}

type NatPolicyRulesMatchSourceIPAddrsInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NatPolicyRulesMatchSourceIPAddrsObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NatPolicyRulesMatchSourceIPAddrsParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type NatPolicyRulesMatchSourceIPInitParameters struct {
	Addrs []NatPolicyRulesMatchSourceIPAddrsInitParameters `json:"addrs,omitempty" tf:"addrs,omitempty"`

	GroupRefs []*string `json:"groupRefs,omitempty" tf:"group_refs,omitempty"`

	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Prefixes []NatPolicyRulesMatchSourceIPPrefixesInitParameters `json:"prefixes,omitempty" tf:"prefixes,omitempty"`

	Ranges []NatPolicyRulesMatchSourceIPRangesInitParameters `json:"ranges,omitempty" tf:"ranges,omitempty"`
}

type NatPolicyRulesMatchSourceIPObservation struct {
	Addrs []NatPolicyRulesMatchSourceIPAddrsObservation `json:"addrs,omitempty" tf:"addrs,omitempty"`

	GroupRefs []*string `json:"groupRefs,omitempty" tf:"group_refs,omitempty"`

	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Prefixes []NatPolicyRulesMatchSourceIPPrefixesObservation `json:"prefixes,omitempty" tf:"prefixes,omitempty"`

	Ranges []NatPolicyRulesMatchSourceIPRangesObservation `json:"ranges,omitempty" tf:"ranges,omitempty"`
}

type NatPolicyRulesMatchSourceIPParameters struct {

	// +kubebuilder:validation:Optional
	Addrs []NatPolicyRulesMatchSourceIPAddrsParameters `json:"addrs,omitempty" tf:"addrs,omitempty"`

	// +kubebuilder:validation:Optional
	GroupRefs []*string `json:"groupRefs,omitempty" tf:"group_refs,omitempty"`

	// +kubebuilder:validation:Optional
	MatchCriteria *string `json:"matchCriteria" tf:"match_criteria,omitempty"`

	// +kubebuilder:validation:Optional
	Prefixes []NatPolicyRulesMatchSourceIPPrefixesParameters `json:"prefixes,omitempty" tf:"prefixes,omitempty"`

	// +kubebuilder:validation:Optional
	Ranges []NatPolicyRulesMatchSourceIPRangesParameters `json:"ranges,omitempty" tf:"ranges,omitempty"`
}

type NatPolicyRulesMatchSourceIPPrefixesIPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NatPolicyRulesMatchSourceIPPrefixesIPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NatPolicyRulesMatchSourceIPPrefixesIPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type NatPolicyRulesMatchSourceIPPrefixesInitParameters struct {
	IPAddr []NatPolicyRulesMatchSourceIPPrefixesIPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type NatPolicyRulesMatchSourceIPPrefixesObservation struct {
	IPAddr []NatPolicyRulesMatchSourceIPPrefixesIPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type NatPolicyRulesMatchSourceIPPrefixesParameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []NatPolicyRulesMatchSourceIPPrefixesIPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type NatPolicyRulesMatchSourceIPRangesBeginInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NatPolicyRulesMatchSourceIPRangesBeginObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NatPolicyRulesMatchSourceIPRangesBeginParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type NatPolicyRulesMatchSourceIPRangesEndInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NatPolicyRulesMatchSourceIPRangesEndObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NatPolicyRulesMatchSourceIPRangesEndParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type NatPolicyRulesMatchSourceIPRangesInitParameters struct {
	Begin []NatPolicyRulesMatchSourceIPRangesBeginInitParameters `json:"begin,omitempty" tf:"begin,omitempty"`

	End []NatPolicyRulesMatchSourceIPRangesEndInitParameters `json:"end,omitempty" tf:"end,omitempty"`
}

type NatPolicyRulesMatchSourceIPRangesObservation struct {
	Begin []NatPolicyRulesMatchSourceIPRangesBeginObservation `json:"begin,omitempty" tf:"begin,omitempty"`

	End []NatPolicyRulesMatchSourceIPRangesEndObservation `json:"end,omitempty" tf:"end,omitempty"`
}

type NatPolicyRulesMatchSourceIPRangesParameters struct {

	// +kubebuilder:validation:Optional
	Begin []NatPolicyRulesMatchSourceIPRangesBeginParameters `json:"begin" tf:"begin,omitempty"`

	// +kubebuilder:validation:Optional
	End []NatPolicyRulesMatchSourceIPRangesEndParameters `json:"end" tf:"end,omitempty"`
}

type NatPolicyRulesObservation struct {
	Action []NatPolicyRulesActionObservation `json:"action,omitempty" tf:"action,omitempty"`

	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	Enable *string `json:"enable,omitempty" tf:"enable,omitempty"`

	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	Match []NatPolicyRulesMatchObservation `json:"match,omitempty" tf:"match,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type NatPolicyRulesParameters struct {

	// +kubebuilder:validation:Optional
	Action []NatPolicyRulesActionParameters `json:"action" tf:"action,omitempty"`

	// +kubebuilder:validation:Optional
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	// +kubebuilder:validation:Optional
	Enable *string `json:"enable" tf:"enable,omitempty"`

	// +kubebuilder:validation:Optional
	Index *string `json:"index" tf:"index,omitempty"`

	// +kubebuilder:validation:Optional
	Match []NatPolicyRulesMatchParameters `json:"match" tf:"match,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`
}

type ServicesInitParameters struct {
	DestinationPort []DestinationPortInitParameters `json:"destinationPort,omitempty" tf:"destination_port,omitempty"`

	Protocol []ServicesProtocolInitParameters `json:"protocol,omitempty" tf:"protocol,omitempty"`

	SourcePort []SourcePortInitParameters `json:"sourcePort,omitempty" tf:"source_port,omitempty"`
}

type ServicesObservation struct {
	DestinationPort []DestinationPortObservation `json:"destinationPort,omitempty" tf:"destination_port,omitempty"`

	Protocol []ServicesProtocolObservation `json:"protocol,omitempty" tf:"protocol,omitempty"`

	SourcePort []SourcePortObservation `json:"sourcePort,omitempty" tf:"source_port,omitempty"`
}

type ServicesParameters struct {

	// +kubebuilder:validation:Optional
	DestinationPort []DestinationPortParameters `json:"destinationPort,omitempty" tf:"destination_port,omitempty"`

	// +kubebuilder:validation:Optional
	Protocol []ServicesProtocolParameters `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Optional
	SourcePort []SourcePortParameters `json:"sourcePort,omitempty" tf:"source_port,omitempty"`
}

type ServicesProtocolInitParameters struct {
	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type ServicesProtocolObservation struct {
	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Protocol *string `json:"protocol,omitempty" tf:"protocol,omitempty"`
}

type ServicesProtocolParameters struct {

	// +kubebuilder:validation:Optional
	MatchCriteria *string `json:"matchCriteria" tf:"match_criteria,omitempty"`

	// +kubebuilder:validation:Optional
	Protocol *string `json:"protocol" tf:"protocol,omitempty"`
}

type SourcePortInitParameters struct {
	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`
}

type SourcePortObservation struct {
	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`
}

type SourcePortParameters struct {

	// +kubebuilder:validation:Optional
	MatchCriteria *string `json:"matchCriteria" tf:"match_criteria,omitempty"`

	// +kubebuilder:validation:Optional
	Ports []*float64 `json:"ports" tf:"ports,omitempty"`
}

// NatPolicySpec defines the desired state of NatPolicy
type NatPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NatPolicyParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NatPolicyInitParameters `json:"initProvider,omitempty"`
}

// NatPolicyStatus defines the observed state of NatPolicy.
type NatPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NatPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NatPolicy is the Schema for the NatPolicys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type NatPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              NatPolicySpec   `json:"spec"`
	Status            NatPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NatPolicyList contains a list of NatPolicys
type NatPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NatPolicy `json:"items"`
}

// Repository type metadata.
var (
	NatPolicy_Kind             = "NatPolicy"
	NatPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NatPolicy_Kind}.String()
	NatPolicy_KindAPIVersion   = NatPolicy_Kind + "." + CRDGroupVersion.String()
	NatPolicy_GroupVersionKind = CRDGroupVersion.WithKind(NatPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&NatPolicy{}, &NatPolicyList{})
}
