/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CertificateInitParameters struct {
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	CertificateSigningRequest *string `json:"certificateSigningRequest,omitempty" tf:"certificate_signing_request,omitempty"`

	ChainVerified *string `json:"chainVerified,omitempty" tf:"chain_verified,omitempty"`

	DaysUntilExpire *string `json:"daysUntilExpire,omitempty" tf:"days_until_expire,omitempty"`

	ExpiryStatus *string `json:"expiryStatus,omitempty" tf:"expiry_status,omitempty"`

	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	Issuer []CertificateIssuerInitParameters `json:"issuer,omitempty" tf:"issuer,omitempty"`

	KeyParams []CertificateKeyParamsInitParameters `json:"keyParams,omitempty" tf:"key_params,omitempty"`

	NotAfter *string `json:"notAfter,omitempty" tf:"not_after,omitempty"`

	NotBefore *string `json:"notBefore,omitempty" tf:"not_before,omitempty"`

	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	SelfSigned *string `json:"selfSigned,omitempty" tf:"self_signed,omitempty"`

	SerialNumber *string `json:"serialNumber,omitempty" tf:"serial_number,omitempty"`

	Signature *string `json:"signature,omitempty" tf:"signature,omitempty"`

	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" tf:"signature_algorithm,omitempty"`

	Subject []CertificateSubjectInitParameters `json:"subject,omitempty" tf:"subject,omitempty"`

	SubjectAltNames []*string `json:"subjectAltNames,omitempty" tf:"subject_alt_names,omitempty"`

	Text *string `json:"text,omitempty" tf:"text,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type CertificateIssuerInitParameters struct {
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	DistinguishedName *string `json:"distinguishedName,omitempty" tf:"distinguished_name,omitempty"`

	EmailAddress *string `json:"emailAddress,omitempty" tf:"email_address,omitempty"`

	Locality *string `json:"locality,omitempty" tf:"locality,omitempty"`

	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	OrganizationUnit *string `json:"organizationUnit,omitempty" tf:"organization_unit,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type CertificateIssuerObservation struct {
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	DistinguishedName *string `json:"distinguishedName,omitempty" tf:"distinguished_name,omitempty"`

	EmailAddress *string `json:"emailAddress,omitempty" tf:"email_address,omitempty"`

	Locality *string `json:"locality,omitempty" tf:"locality,omitempty"`

	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	OrganizationUnit *string `json:"organizationUnit,omitempty" tf:"organization_unit,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type CertificateIssuerParameters struct {

	// +kubebuilder:validation:Optional
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	// +kubebuilder:validation:Optional
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// +kubebuilder:validation:Optional
	DistinguishedName *string `json:"distinguishedName,omitempty" tf:"distinguished_name,omitempty"`

	// +kubebuilder:validation:Optional
	EmailAddress *string `json:"emailAddress,omitempty" tf:"email_address,omitempty"`

	// +kubebuilder:validation:Optional
	Locality *string `json:"locality,omitempty" tf:"locality,omitempty"`

	// +kubebuilder:validation:Optional
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// +kubebuilder:validation:Optional
	OrganizationUnit *string `json:"organizationUnit,omitempty" tf:"organization_unit,omitempty"`

	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type CertificateKeyParamsInitParameters struct {
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	EcParams []KeyParamsEcParamsInitParameters `json:"ecParams,omitempty" tf:"ec_params,omitempty"`

	RsaParams []KeyParamsRsaParamsInitParameters `json:"rsaParams,omitempty" tf:"rsa_params,omitempty"`
}

type CertificateKeyParamsObservation struct {
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	EcParams []KeyParamsEcParamsObservation `json:"ecParams,omitempty" tf:"ec_params,omitempty"`

	RsaParams []KeyParamsRsaParamsObservation `json:"rsaParams,omitempty" tf:"rsa_params,omitempty"`
}

type CertificateKeyParamsParameters struct {

	// +kubebuilder:validation:Optional
	Algorithm *string `json:"algorithm" tf:"algorithm,omitempty"`

	// +kubebuilder:validation:Optional
	EcParams []KeyParamsEcParamsParameters `json:"ecParams,omitempty" tf:"ec_params,omitempty"`

	// +kubebuilder:validation:Optional
	RsaParams []KeyParamsRsaParamsParameters `json:"rsaParams,omitempty" tf:"rsa_params,omitempty"`
}

type CertificateObservation struct {
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	CertificateSigningRequest *string `json:"certificateSigningRequest,omitempty" tf:"certificate_signing_request,omitempty"`

	ChainVerified *string `json:"chainVerified,omitempty" tf:"chain_verified,omitempty"`

	DaysUntilExpire *string `json:"daysUntilExpire,omitempty" tf:"days_until_expire,omitempty"`

	ExpiryStatus *string `json:"expiryStatus,omitempty" tf:"expiry_status,omitempty"`

	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	Issuer []CertificateIssuerObservation `json:"issuer,omitempty" tf:"issuer,omitempty"`

	KeyParams []CertificateKeyParamsObservation `json:"keyParams,omitempty" tf:"key_params,omitempty"`

	NotAfter *string `json:"notAfter,omitempty" tf:"not_after,omitempty"`

	NotBefore *string `json:"notBefore,omitempty" tf:"not_before,omitempty"`

	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	SelfSigned *string `json:"selfSigned,omitempty" tf:"self_signed,omitempty"`

	SerialNumber *string `json:"serialNumber,omitempty" tf:"serial_number,omitempty"`

	Signature *string `json:"signature,omitempty" tf:"signature,omitempty"`

	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" tf:"signature_algorithm,omitempty"`

	Subject []CertificateSubjectObservation `json:"subject,omitempty" tf:"subject,omitempty"`

	SubjectAltNames []*string `json:"subjectAltNames,omitempty" tf:"subject_alt_names,omitempty"`

	Text *string `json:"text,omitempty" tf:"text,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type CertificateParameters struct {

	// +kubebuilder:validation:Optional
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// +kubebuilder:validation:Optional
	CertificateSigningRequest *string `json:"certificateSigningRequest,omitempty" tf:"certificate_signing_request,omitempty"`

	// +kubebuilder:validation:Optional
	ChainVerified *string `json:"chainVerified,omitempty" tf:"chain_verified,omitempty"`

	// +kubebuilder:validation:Optional
	DaysUntilExpire *string `json:"daysUntilExpire,omitempty" tf:"days_until_expire,omitempty"`

	// +kubebuilder:validation:Optional
	ExpiryStatus *string `json:"expiryStatus,omitempty" tf:"expiry_status,omitempty"`

	// +kubebuilder:validation:Optional
	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	// +kubebuilder:validation:Optional
	Issuer []CertificateIssuerParameters `json:"issuer,omitempty" tf:"issuer,omitempty"`

	// +kubebuilder:validation:Optional
	KeyParams []CertificateKeyParamsParameters `json:"keyParams,omitempty" tf:"key_params,omitempty"`

	// +kubebuilder:validation:Optional
	NotAfter *string `json:"notAfter,omitempty" tf:"not_after,omitempty"`

	// +kubebuilder:validation:Optional
	NotBefore *string `json:"notBefore,omitempty" tf:"not_before,omitempty"`

	// +kubebuilder:validation:Optional
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	// +kubebuilder:validation:Optional
	SelfSigned *string `json:"selfSigned,omitempty" tf:"self_signed,omitempty"`

	// +kubebuilder:validation:Optional
	SerialNumber *string `json:"serialNumber,omitempty" tf:"serial_number,omitempty"`

	// +kubebuilder:validation:Optional
	Signature *string `json:"signature,omitempty" tf:"signature,omitempty"`

	// +kubebuilder:validation:Optional
	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" tf:"signature_algorithm,omitempty"`

	// +kubebuilder:validation:Optional
	Subject []CertificateSubjectParameters `json:"subject,omitempty" tf:"subject,omitempty"`

	// +kubebuilder:validation:Optional
	SubjectAltNames []*string `json:"subjectAltNames,omitempty" tf:"subject_alt_names,omitempty"`

	// +kubebuilder:validation:Optional
	Text *string `json:"text,omitempty" tf:"text,omitempty"`

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type CertificateSubjectInitParameters struct {
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	DistinguishedName *string `json:"distinguishedName,omitempty" tf:"distinguished_name,omitempty"`

	EmailAddress *string `json:"emailAddress,omitempty" tf:"email_address,omitempty"`

	Locality *string `json:"locality,omitempty" tf:"locality,omitempty"`

	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	OrganizationUnit *string `json:"organizationUnit,omitempty" tf:"organization_unit,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type CertificateSubjectObservation struct {
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	DistinguishedName *string `json:"distinguishedName,omitempty" tf:"distinguished_name,omitempty"`

	EmailAddress *string `json:"emailAddress,omitempty" tf:"email_address,omitempty"`

	Locality *string `json:"locality,omitempty" tf:"locality,omitempty"`

	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	OrganizationUnit *string `json:"organizationUnit,omitempty" tf:"organization_unit,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type CertificateSubjectParameters struct {

	// +kubebuilder:validation:Optional
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	// +kubebuilder:validation:Optional
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// +kubebuilder:validation:Optional
	DistinguishedName *string `json:"distinguishedName,omitempty" tf:"distinguished_name,omitempty"`

	// +kubebuilder:validation:Optional
	EmailAddress *string `json:"emailAddress,omitempty" tf:"email_address,omitempty"`

	// +kubebuilder:validation:Optional
	Locality *string `json:"locality,omitempty" tf:"locality,omitempty"`

	// +kubebuilder:validation:Optional
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// +kubebuilder:validation:Optional
	OrganizationUnit *string `json:"organizationUnit,omitempty" tf:"organization_unit,omitempty"`

	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type KeyParamsEcParamsInitParameters struct {
	Curve *string `json:"curve,omitempty" tf:"curve,omitempty"`
}

type KeyParamsEcParamsObservation struct {
	Curve *string `json:"curve,omitempty" tf:"curve,omitempty"`
}

type KeyParamsEcParamsParameters struct {

	// +kubebuilder:validation:Optional
	Curve *string `json:"curve,omitempty" tf:"curve,omitempty"`
}

type KeyParamsRsaParamsInitParameters struct {
	Exponent *string `json:"exponent,omitempty" tf:"exponent,omitempty"`

	KeySize *string `json:"keySize,omitempty" tf:"key_size,omitempty"`
}

type KeyParamsRsaParamsObservation struct {
	Exponent *string `json:"exponent,omitempty" tf:"exponent,omitempty"`

	KeySize *string `json:"keySize,omitempty" tf:"key_size,omitempty"`
}

type KeyParamsRsaParamsParameters struct {

	// +kubebuilder:validation:Optional
	Exponent *string `json:"exponent,omitempty" tf:"exponent,omitempty"`

	// +kubebuilder:validation:Optional
	KeySize *string `json:"keySize,omitempty" tf:"key_size,omitempty"`
}

type OcspConfigInitParameters struct {
	FailedOcspJobsRetryInterval *string `json:"failedOcspJobsRetryInterval,omitempty" tf:"failed_ocsp_jobs_retry_interval,omitempty"`

	MaxTries *string `json:"maxTries,omitempty" tf:"max_tries,omitempty"`

	OcspReqInterval *string `json:"ocspReqInterval,omitempty" tf:"ocsp_req_interval,omitempty"`

	OcspRespTimeout *string `json:"ocspRespTimeout,omitempty" tf:"ocsp_resp_timeout,omitempty"`

	ResponderURLLists []*string `json:"responderUrlLists,omitempty" tf:"responder_url_lists,omitempty"`

	URLAction *string `json:"urlAction,omitempty" tf:"url_action,omitempty"`
}

type OcspConfigObservation struct {
	FailedOcspJobsRetryInterval *string `json:"failedOcspJobsRetryInterval,omitempty" tf:"failed_ocsp_jobs_retry_interval,omitempty"`

	MaxTries *string `json:"maxTries,omitempty" tf:"max_tries,omitempty"`

	OcspReqInterval *string `json:"ocspReqInterval,omitempty" tf:"ocsp_req_interval,omitempty"`

	OcspRespTimeout *string `json:"ocspRespTimeout,omitempty" tf:"ocsp_resp_timeout,omitempty"`

	ResponderURLLists []*string `json:"responderUrlLists,omitempty" tf:"responder_url_lists,omitempty"`

	URLAction *string `json:"urlAction,omitempty" tf:"url_action,omitempty"`
}

type OcspConfigParameters struct {

	// +kubebuilder:validation:Optional
	FailedOcspJobsRetryInterval *string `json:"failedOcspJobsRetryInterval,omitempty" tf:"failed_ocsp_jobs_retry_interval,omitempty"`

	// +kubebuilder:validation:Optional
	MaxTries *string `json:"maxTries,omitempty" tf:"max_tries,omitempty"`

	// +kubebuilder:validation:Optional
	OcspReqInterval *string `json:"ocspReqInterval,omitempty" tf:"ocsp_req_interval,omitempty"`

	// +kubebuilder:validation:Optional
	OcspRespTimeout *string `json:"ocspRespTimeout,omitempty" tf:"ocsp_resp_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	ResponderURLLists []*string `json:"responderUrlLists,omitempty" tf:"responder_url_lists,omitempty"`

	// +kubebuilder:validation:Optional
	URLAction *string `json:"urlAction,omitempty" tf:"url_action,omitempty"`
}

type OcspResponseInfoInitParameters struct {
	CertStatus *string `json:"certStatus,omitempty" tf:"cert_status,omitempty"`

	NextUpdate *string `json:"nextUpdate,omitempty" tf:"next_update,omitempty"`

	OcspRespFromResponderURL *string `json:"ocspRespFromResponderUrl,omitempty" tf:"ocsp_resp_from_responder_url,omitempty"`

	OcspResponse *string `json:"ocspResponse,omitempty" tf:"ocsp_response,omitempty"`

	RevocationReason *string `json:"revocationReason,omitempty" tf:"revocation_reason,omitempty"`

	RevocationTime *string `json:"revocationTime,omitempty" tf:"revocation_time,omitempty"`

	ThisUpdate *string `json:"thisUpdate,omitempty" tf:"this_update,omitempty"`
}

type OcspResponseInfoObservation struct {
	CertStatus *string `json:"certStatus,omitempty" tf:"cert_status,omitempty"`

	NextUpdate *string `json:"nextUpdate,omitempty" tf:"next_update,omitempty"`

	OcspRespFromResponderURL *string `json:"ocspRespFromResponderUrl,omitempty" tf:"ocsp_resp_from_responder_url,omitempty"`

	OcspResponse *string `json:"ocspResponse,omitempty" tf:"ocsp_response,omitempty"`

	RevocationReason *string `json:"revocationReason,omitempty" tf:"revocation_reason,omitempty"`

	RevocationTime *string `json:"revocationTime,omitempty" tf:"revocation_time,omitempty"`

	ThisUpdate *string `json:"thisUpdate,omitempty" tf:"this_update,omitempty"`
}

type OcspResponseInfoParameters struct {

	// +kubebuilder:validation:Optional
	CertStatus *string `json:"certStatus" tf:"cert_status,omitempty"`

	// +kubebuilder:validation:Optional
	NextUpdate *string `json:"nextUpdate,omitempty" tf:"next_update,omitempty"`

	// +kubebuilder:validation:Optional
	OcspRespFromResponderURL *string `json:"ocspRespFromResponderUrl" tf:"ocsp_resp_from_responder_url,omitempty"`

	// +kubebuilder:validation:Optional
	OcspResponse *string `json:"ocspResponse" tf:"ocsp_response,omitempty"`

	// +kubebuilder:validation:Optional
	RevocationReason *string `json:"revocationReason,omitempty" tf:"revocation_reason,omitempty"`

	// +kubebuilder:validation:Optional
	RevocationTime *string `json:"revocationTime,omitempty" tf:"revocation_time,omitempty"`

	// +kubebuilder:validation:Optional
	ThisUpdate *string `json:"thisUpdate,omitempty" tf:"this_update,omitempty"`
}

type SslKeyAndCertificateCACertsInitParameters struct {
	CARef *string `json:"caRef,omitempty" tf:"ca_ref,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type SslKeyAndCertificateCACertsObservation struct {
	CARef *string `json:"caRef,omitempty" tf:"ca_ref,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type SslKeyAndCertificateCACertsParameters struct {

	// +kubebuilder:validation:Optional
	CARef *string `json:"caRef,omitempty" tf:"ca_ref,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type SslKeyAndCertificateConfigpbAttributesInitParameters struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type SslKeyAndCertificateConfigpbAttributesObservation struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type SslKeyAndCertificateConfigpbAttributesParameters struct {

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type SslKeyAndCertificateDynamicParamsInitParameters struct {
	IsDynamic *string `json:"isDynamic,omitempty" tf:"is_dynamic,omitempty"`

	IsSensitive *string `json:"isSensitive,omitempty" tf:"is_sensitive,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SslKeyAndCertificateDynamicParamsObservation struct {
	IsDynamic *string `json:"isDynamic,omitempty" tf:"is_dynamic,omitempty"`

	IsSensitive *string `json:"isSensitive,omitempty" tf:"is_sensitive,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SslKeyAndCertificateDynamicParamsParameters struct {

	// +kubebuilder:validation:Optional
	IsDynamic *string `json:"isDynamic,omitempty" tf:"is_dynamic,omitempty"`

	// +kubebuilder:validation:Optional
	IsSensitive *string `json:"isSensitive,omitempty" tf:"is_sensitive,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type SslKeyAndCertificateInitParameters struct {
	CACerts []SslKeyAndCertificateCACertsInitParameters `json:"caCerts,omitempty" tf:"ca_certs,omitempty"`

	Certificate []CertificateInitParameters `json:"certificate,omitempty" tf:"certificate,omitempty"`

	CertificateBase64 *string `json:"certificateBase64,omitempty" tf:"certificate_base64,omitempty"`

	CertificateManagementProfileRef *string `json:"certificateManagementProfileRef,omitempty" tf:"certificate_management_profile_ref,omitempty"`

	ConfigpbAttributes []SslKeyAndCertificateConfigpbAttributesInitParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	DynamicParams []SslKeyAndCertificateDynamicParamsInitParameters `json:"dynamicParams,omitempty" tf:"dynamic_params,omitempty"`

	EnableOcspStapling *string `json:"enableOcspStapling,omitempty" tf:"enable_ocsp_stapling,omitempty"`

	EnckeyBase64 *string `json:"enckeyBase64,omitempty" tf:"enckey_base64,omitempty"`

	EnckeyName *string `json:"enckeyName,omitempty" tf:"enckey_name,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	HardwaresecuritymodulegroupRef *string `json:"hardwaresecuritymodulegroupRef,omitempty" tf:"hardwaresecuritymodulegroup_ref,omitempty"`

	ImportKeyToHSM *string `json:"importKeyToHsm,omitempty" tf:"import_key_to_hsm,omitempty"`

	IsFederated *string `json:"isFederated,omitempty" tf:"is_federated,omitempty"`

	KeyBase64 *string `json:"keyBase64,omitempty" tf:"key_base64,omitempty"`

	KeyParams []SslKeyAndCertificateKeyParamsInitParameters `json:"keyParams,omitempty" tf:"key_params,omitempty"`

	Markers []SslKeyAndCertificateMarkersInitParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	OcspConfig []OcspConfigInitParameters `json:"ocspConfig,omitempty" tf:"ocsp_config,omitempty"`

	OcspErrorStatus *string `json:"ocspErrorStatus,omitempty" tf:"ocsp_error_status,omitempty"`

	OcspResponderURLListFromCerts []*string `json:"ocspResponderUrlListFromCerts,omitempty" tf:"ocsp_responder_url_list_from_certs,omitempty"`

	OcspResponseInfo []OcspResponseInfoInitParameters `json:"ocspResponseInfo,omitempty" tf:"ocsp_response_info,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type SslKeyAndCertificateKeyParamsEcParamsInitParameters struct {
	Curve *string `json:"curve,omitempty" tf:"curve,omitempty"`
}

type SslKeyAndCertificateKeyParamsEcParamsObservation struct {
	Curve *string `json:"curve,omitempty" tf:"curve,omitempty"`
}

type SslKeyAndCertificateKeyParamsEcParamsParameters struct {

	// +kubebuilder:validation:Optional
	Curve *string `json:"curve,omitempty" tf:"curve,omitempty"`
}

type SslKeyAndCertificateKeyParamsInitParameters struct {
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	EcParams []SslKeyAndCertificateKeyParamsEcParamsInitParameters `json:"ecParams,omitempty" tf:"ec_params,omitempty"`

	RsaParams []SslKeyAndCertificateKeyParamsRsaParamsInitParameters `json:"rsaParams,omitempty" tf:"rsa_params,omitempty"`
}

type SslKeyAndCertificateKeyParamsObservation struct {
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	EcParams []SslKeyAndCertificateKeyParamsEcParamsObservation `json:"ecParams,omitempty" tf:"ec_params,omitempty"`

	RsaParams []SslKeyAndCertificateKeyParamsRsaParamsObservation `json:"rsaParams,omitempty" tf:"rsa_params,omitempty"`
}

type SslKeyAndCertificateKeyParamsParameters struct {

	// +kubebuilder:validation:Optional
	Algorithm *string `json:"algorithm" tf:"algorithm,omitempty"`

	// +kubebuilder:validation:Optional
	EcParams []SslKeyAndCertificateKeyParamsEcParamsParameters `json:"ecParams,omitempty" tf:"ec_params,omitempty"`

	// +kubebuilder:validation:Optional
	RsaParams []SslKeyAndCertificateKeyParamsRsaParamsParameters `json:"rsaParams,omitempty" tf:"rsa_params,omitempty"`
}

type SslKeyAndCertificateKeyParamsRsaParamsInitParameters struct {
	Exponent *string `json:"exponent,omitempty" tf:"exponent,omitempty"`

	KeySize *string `json:"keySize,omitempty" tf:"key_size,omitempty"`
}

type SslKeyAndCertificateKeyParamsRsaParamsObservation struct {
	Exponent *string `json:"exponent,omitempty" tf:"exponent,omitempty"`

	KeySize *string `json:"keySize,omitempty" tf:"key_size,omitempty"`
}

type SslKeyAndCertificateKeyParamsRsaParamsParameters struct {

	// +kubebuilder:validation:Optional
	Exponent *string `json:"exponent,omitempty" tf:"exponent,omitempty"`

	// +kubebuilder:validation:Optional
	KeySize *string `json:"keySize,omitempty" tf:"key_size,omitempty"`
}

type SslKeyAndCertificateMarkersInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type SslKeyAndCertificateMarkersObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type SslKeyAndCertificateMarkersParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type SslKeyAndCertificateObservation struct {
	CACerts []SslKeyAndCertificateCACertsObservation `json:"caCerts,omitempty" tf:"ca_certs,omitempty"`

	Certificate []CertificateObservation `json:"certificate,omitempty" tf:"certificate,omitempty"`

	CertificateBase64 *string `json:"certificateBase64,omitempty" tf:"certificate_base64,omitempty"`

	CertificateManagementProfileRef *string `json:"certificateManagementProfileRef,omitempty" tf:"certificate_management_profile_ref,omitempty"`

	ConfigpbAttributes []SslKeyAndCertificateConfigpbAttributesObservation `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	DynamicParams []SslKeyAndCertificateDynamicParamsObservation `json:"dynamicParams,omitempty" tf:"dynamic_params,omitempty"`

	EnableOcspStapling *string `json:"enableOcspStapling,omitempty" tf:"enable_ocsp_stapling,omitempty"`

	EnckeyBase64 *string `json:"enckeyBase64,omitempty" tf:"enckey_base64,omitempty"`

	EnckeyName *string `json:"enckeyName,omitempty" tf:"enckey_name,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	HardwaresecuritymodulegroupRef *string `json:"hardwaresecuritymodulegroupRef,omitempty" tf:"hardwaresecuritymodulegroup_ref,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ImportKeyToHSM *string `json:"importKeyToHsm,omitempty" tf:"import_key_to_hsm,omitempty"`

	IsFederated *string `json:"isFederated,omitempty" tf:"is_federated,omitempty"`

	KeyBase64 *string `json:"keyBase64,omitempty" tf:"key_base64,omitempty"`

	KeyParams []SslKeyAndCertificateKeyParamsObservation `json:"keyParams,omitempty" tf:"key_params,omitempty"`

	Markers []SslKeyAndCertificateMarkersObservation `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	OcspConfig []OcspConfigObservation `json:"ocspConfig,omitempty" tf:"ocsp_config,omitempty"`

	OcspErrorStatus *string `json:"ocspErrorStatus,omitempty" tf:"ocsp_error_status,omitempty"`

	OcspResponderURLListFromCerts []*string `json:"ocspResponderUrlListFromCerts,omitempty" tf:"ocsp_responder_url_list_from_certs,omitempty"`

	OcspResponseInfo []OcspResponseInfoObservation `json:"ocspResponseInfo,omitempty" tf:"ocsp_response_info,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type SslKeyAndCertificateParameters struct {

	// +kubebuilder:validation:Optional
	CACerts []SslKeyAndCertificateCACertsParameters `json:"caCerts,omitempty" tf:"ca_certs,omitempty"`

	// +kubebuilder:validation:Optional
	Certificate []CertificateParameters `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// +kubebuilder:validation:Optional
	CertificateBase64 *string `json:"certificateBase64,omitempty" tf:"certificate_base64,omitempty"`

	// +kubebuilder:validation:Optional
	CertificateManagementProfileRef *string `json:"certificateManagementProfileRef,omitempty" tf:"certificate_management_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigpbAttributes []SslKeyAndCertificateConfigpbAttributesParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	// +kubebuilder:validation:Optional
	DynamicParams []SslKeyAndCertificateDynamicParamsParameters `json:"dynamicParams,omitempty" tf:"dynamic_params,omitempty"`

	// +kubebuilder:validation:Optional
	EnableOcspStapling *string `json:"enableOcspStapling,omitempty" tf:"enable_ocsp_stapling,omitempty"`

	// +kubebuilder:validation:Optional
	EnckeyBase64 *string `json:"enckeyBase64,omitempty" tf:"enckey_base64,omitempty"`

	// +kubebuilder:validation:Optional
	EnckeyName *string `json:"enckeyName,omitempty" tf:"enckey_name,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	HardwaresecuritymodulegroupRef *string `json:"hardwaresecuritymodulegroupRef,omitempty" tf:"hardwaresecuritymodulegroup_ref,omitempty"`

	// +kubebuilder:validation:Optional
	ImportKeyToHSM *string `json:"importKeyToHsm,omitempty" tf:"import_key_to_hsm,omitempty"`

	// +kubebuilder:validation:Optional
	IsFederated *string `json:"isFederated,omitempty" tf:"is_federated,omitempty"`

	// +kubebuilder:validation:Optional
	KeyBase64 *string `json:"keyBase64,omitempty" tf:"key_base64,omitempty"`

	// +kubebuilder:validation:Optional
	KeyParams []SslKeyAndCertificateKeyParamsParameters `json:"keyParams,omitempty" tf:"key_params,omitempty"`

	// +kubebuilder:validation:Optional
	KeyPassphraseSecretRef *v1.SecretKeySelector `json:"keyPassphraseSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	KeySecretRef *v1.SecretKeySelector `json:"keySecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Markers []SslKeyAndCertificateMarkersParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	OcspConfig []OcspConfigParameters `json:"ocspConfig,omitempty" tf:"ocsp_config,omitempty"`

	// +kubebuilder:validation:Optional
	OcspErrorStatus *string `json:"ocspErrorStatus,omitempty" tf:"ocsp_error_status,omitempty"`

	// +kubebuilder:validation:Optional
	OcspResponderURLListFromCerts []*string `json:"ocspResponderUrlListFromCerts,omitempty" tf:"ocsp_responder_url_list_from_certs,omitempty"`

	// +kubebuilder:validation:Optional
	OcspResponseInfo []OcspResponseInfoParameters `json:"ocspResponseInfo,omitempty" tf:"ocsp_response_info,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

// SslKeyAndCertificateSpec defines the desired state of SslKeyAndCertificate
type SslKeyAndCertificateSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SslKeyAndCertificateParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SslKeyAndCertificateInitParameters `json:"initProvider,omitempty"`
}

// SslKeyAndCertificateStatus defines the observed state of SslKeyAndCertificate.
type SslKeyAndCertificateStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SslKeyAndCertificateObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SslKeyAndCertificate is the Schema for the SslKeyAndCertificates API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type SslKeyAndCertificate struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.certificate) || has(self.initProvider.certificate)",message="certificate is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	Spec   SslKeyAndCertificateSpec   `json:"spec"`
	Status SslKeyAndCertificateStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SslKeyAndCertificateList contains a list of SslKeyAndCertificates
type SslKeyAndCertificateList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SslKeyAndCertificate `json:"items"`
}

// Repository type metadata.
var (
	SslKeyAndCertificate_Kind             = "SslKeyAndCertificate"
	SslKeyAndCertificate_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SslKeyAndCertificate_Kind}.String()
	SslKeyAndCertificate_KindAPIVersion   = SslKeyAndCertificate_Kind + "." + CRDGroupVersion.String()
	SslKeyAndCertificate_GroupVersionKind = CRDGroupVersion.WithKind(SslKeyAndCertificate_Kind)
)

func init() {
	SchemeBuilder.Register(&SslKeyAndCertificate{}, &SslKeyAndCertificateList{})
}
