/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AssetInitParameters struct {
	AssetID *string `json:"assetId,omitempty" tf:"asset_id,omitempty"`
}

type AssetObservation struct {
	AssetID *string `json:"assetId,omitempty" tf:"asset_id,omitempty"`
}

type AssetParameters struct {

	// +kubebuilder:validation:Optional
	AssetID *string `json:"assetId,omitempty" tf:"asset_id,omitempty"`
}

type ControllerPortalRegistrationInitParameters struct {
	Asset []AssetInitParameters `json:"asset,omitempty" tf:"asset,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	PortalAuth []PortalAuthInitParameters `json:"portalAuth,omitempty" tf:"portal_auth,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type ControllerPortalRegistrationObservation struct {
	Asset []AssetObservation `json:"asset,omitempty" tf:"asset,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	PortalAuth []PortalAuthObservation `json:"portalAuth,omitempty" tf:"portal_auth,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type ControllerPortalRegistrationParameters struct {

	// +kubebuilder:validation:Optional
	Asset []AssetParameters `json:"asset,omitempty" tf:"asset,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PortalAuth []PortalAuthParameters `json:"portalAuth,omitempty" tf:"portal_auth,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type PortalAuthInitParameters struct {
	InstanceURL *string `json:"instanceUrl,omitempty" tf:"instance_url,omitempty"`
}

type PortalAuthObservation struct {
	InstanceURL *string `json:"instanceUrl,omitempty" tf:"instance_url,omitempty"`
}

type PortalAuthParameters struct {

	// +kubebuilder:validation:Optional
	AccessTokenSecretRef *v1.SecretKeySelector `json:"accessTokenSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	InstanceURL *string `json:"instanceUrl,omitempty" tf:"instance_url,omitempty"`

	// +kubebuilder:validation:Optional
	JwtTokenSecretRef *v1.SecretKeySelector `json:"jwtTokenSecretRef,omitempty" tf:"-"`
}

// ControllerPortalRegistrationSpec defines the desired state of ControllerPortalRegistration
type ControllerPortalRegistrationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ControllerPortalRegistrationParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ControllerPortalRegistrationInitParameters `json:"initProvider,omitempty"`
}

// ControllerPortalRegistrationStatus defines the observed state of ControllerPortalRegistration.
type ControllerPortalRegistrationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ControllerPortalRegistrationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ControllerPortalRegistration is the Schema for the ControllerPortalRegistrations API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type ControllerPortalRegistration struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	Spec   ControllerPortalRegistrationSpec   `json:"spec"`
	Status ControllerPortalRegistrationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ControllerPortalRegistrationList contains a list of ControllerPortalRegistrations
type ControllerPortalRegistrationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ControllerPortalRegistration `json:"items"`
}

// Repository type metadata.
var (
	ControllerPortalRegistration_Kind             = "ControllerPortalRegistration"
	ControllerPortalRegistration_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ControllerPortalRegistration_Kind}.String()
	ControllerPortalRegistration_KindAPIVersion   = ControllerPortalRegistration_Kind + "." + CRDGroupVersion.String()
	ControllerPortalRegistration_GroupVersionKind = CRDGroupVersion.WithKind(ControllerPortalRegistration_Kind)
)

func init() {
	SchemeBuilder.Register(&ControllerPortalRegistration{}, &ControllerPortalRegistrationList{})
}
