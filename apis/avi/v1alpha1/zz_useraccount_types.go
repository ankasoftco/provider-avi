/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type UserAccountInitParameters struct {
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	FullName *string `json:"fullName,omitempty" tf:"full_name,omitempty"`

	Local *bool `json:"local,omitempty" tf:"local,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	OldPassword *string `json:"oldPassword,omitempty" tf:"old_password,omitempty"`

	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type UserAccountObservation struct {
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	FullName *string `json:"fullName,omitempty" tf:"full_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Local *bool `json:"local,omitempty" tf:"local,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	OldPassword *string `json:"oldPassword,omitempty" tf:"old_password,omitempty"`

	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type UserAccountParameters struct {

	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// +kubebuilder:validation:Optional
	FullName *string `json:"fullName,omitempty" tf:"full_name,omitempty"`

	// +kubebuilder:validation:Optional
	Local *bool `json:"local,omitempty" tf:"local,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	OldPassword *string `json:"oldPassword,omitempty" tf:"old_password,omitempty"`

	// +kubebuilder:validation:Optional
	Password *string `json:"password,omitempty" tf:"password,omitempty"`

	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// UserAccountSpec defines the desired state of UserAccount
type UserAccountSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserAccountParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserAccountInitParameters `json:"initProvider,omitempty"`
}

// UserAccountStatus defines the observed state of UserAccount.
type UserAccountStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserAccountObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// UserAccount is the Schema for the UserAccounts API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type UserAccount struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              UserAccountSpec   `json:"spec"`
	Status            UserAccountStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserAccountList contains a list of UserAccounts
type UserAccountList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []UserAccount `json:"items"`
}

// Repository type metadata.
var (
	UserAccount_Kind             = "UserAccount"
	UserAccount_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: UserAccount_Kind}.String()
	UserAccount_KindAPIVersion   = UserAccount_Kind + "." + CRDGroupVersion.String()
	UserAccount_GroupVersionKind = CRDGroupVersion.WithKind(UserAccount_Kind)
)

func init() {
	SchemeBuilder.Register(&UserAccount{}, &UserAccountList{})
}
