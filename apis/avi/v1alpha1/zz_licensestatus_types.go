/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LicenseStatusConfigpbAttributesInitParameters struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type LicenseStatusConfigpbAttributesObservation struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type LicenseStatusConfigpbAttributesParameters struct {

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type LicenseStatusInitParameters struct {
	ConfigpbAttributes []LicenseStatusConfigpbAttributesInitParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	SaasStatus []SaasStatusInitParameters `json:"saasStatus,omitempty" tf:"saas_status,omitempty"`

	ServiceUpdate []ServiceUpdateInitParameters `json:"serviceUpdate,omitempty" tf:"service_update,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type LicenseStatusObservation struct {
	ConfigpbAttributes []LicenseStatusConfigpbAttributesObservation `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	SaasStatus []SaasStatusObservation `json:"saasStatus,omitempty" tf:"saas_status,omitempty"`

	ServiceUpdate []ServiceUpdateObservation `json:"serviceUpdate,omitempty" tf:"service_update,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type LicenseStatusParameters struct {

	// +kubebuilder:validation:Optional
	ConfigpbAttributes []LicenseStatusConfigpbAttributesParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	SaasStatus []SaasStatusParameters `json:"saasStatus,omitempty" tf:"saas_status,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceUpdate []ServiceUpdateParameters `json:"serviceUpdate,omitempty" tf:"service_update,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type SaasStatusInitParameters struct {
	Connected *string `json:"connected,omitempty" tf:"connected,omitempty"`

	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	Expired *string `json:"expired,omitempty" tf:"expired,omitempty"`

	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	ReserveServiceUnits *string `json:"reserveServiceUnits,omitempty" tf:"reserve_service_units,omitempty"`
}

type SaasStatusObservation struct {
	Connected *string `json:"connected,omitempty" tf:"connected,omitempty"`

	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	Expired *string `json:"expired,omitempty" tf:"expired,omitempty"`

	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	ReserveServiceUnits *string `json:"reserveServiceUnits,omitempty" tf:"reserve_service_units,omitempty"`
}

type SaasStatusParameters struct {

	// +kubebuilder:validation:Optional
	Connected *string `json:"connected,omitempty" tf:"connected,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Expired *string `json:"expired,omitempty" tf:"expired,omitempty"`

	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	// +kubebuilder:validation:Optional
	ReserveServiceUnits *string `json:"reserveServiceUnits,omitempty" tf:"reserve_service_units,omitempty"`
}

type ServiceUnitsInitParameters struct {
	AvailableServiceUnits *string `json:"availableServiceUnits,omitempty" tf:"available_service_units,omitempty"`

	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	UsedServiceUnits *string `json:"usedServiceUnits,omitempty" tf:"used_service_units,omitempty"`
}

type ServiceUnitsObservation struct {
	AvailableServiceUnits *string `json:"availableServiceUnits,omitempty" tf:"available_service_units,omitempty"`

	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	UsedServiceUnits *string `json:"usedServiceUnits,omitempty" tf:"used_service_units,omitempty"`
}

type ServiceUnitsParameters struct {

	// +kubebuilder:validation:Optional
	AvailableServiceUnits *string `json:"availableServiceUnits,omitempty" tf:"available_service_units,omitempty"`

	// +kubebuilder:validation:Optional
	OrgID *string `json:"orgId,omitempty" tf:"org_id,omitempty"`

	// +kubebuilder:validation:Optional
	UsedServiceUnits *string `json:"usedServiceUnits,omitempty" tf:"used_service_units,omitempty"`
}

type ServiceUpdateInitParameters struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	ServiceUnits []ServiceUnitsInitParameters `json:"serviceUnits,omitempty" tf:"service_units,omitempty"`
}

type ServiceUpdateObservation struct {
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	ServiceUnits []ServiceUnitsObservation `json:"serviceUnits,omitempty" tf:"service_units,omitempty"`
}

type ServiceUpdateParameters struct {

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceUnits []ServiceUnitsParameters `json:"serviceUnits,omitempty" tf:"service_units,omitempty"`
}

// LicenseStatusSpec defines the desired state of LicenseStatus
type LicenseStatusSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LicenseStatusParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LicenseStatusInitParameters `json:"initProvider,omitempty"`
}

// LicenseStatusStatus defines the observed state of LicenseStatus.
type LicenseStatusStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LicenseStatusObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LicenseStatus is the Schema for the LicenseStatuss API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type LicenseStatus struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              LicenseStatusSpec   `json:"spec"`
	Status            LicenseStatusStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LicenseStatusList contains a list of LicenseStatuss
type LicenseStatusList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LicenseStatus `json:"items"`
}

// Repository type metadata.
var (
	LicenseStatus_Kind             = "LicenseStatus"
	LicenseStatus_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LicenseStatus_Kind}.String()
	LicenseStatus_KindAPIVersion   = LicenseStatus_Kind + "." + CRDGroupVersion.String()
	LicenseStatus_GroupVersionKind = CRDGroupVersion.WithKind(LicenseStatus_Kind)
)

func init() {
	SchemeBuilder.Register(&LicenseStatus{}, &LicenseStatusList{})
}
