/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FloatingIntfIPInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type FloatingIntfIPObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type FloatingIntfIPParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type FloatingIntfIPSe2InitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type FloatingIntfIPSe2Observation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type FloatingIntfIPSe2Parameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type FlowtableProfileInitParameters struct {
	IcmpIdleTimeout *string `json:"icmpIdleTimeout,omitempty" tf:"icmp_idle_timeout,omitempty"`

	TCPClosedTimeout *string `json:"tcpClosedTimeout,omitempty" tf:"tcp_closed_timeout,omitempty"`

	TCPConnectionSetupTimeout *string `json:"tcpConnectionSetupTimeout,omitempty" tf:"tcp_connection_setup_timeout,omitempty"`

	TCPHalfClosedTimeout *string `json:"tcpHalfClosedTimeout,omitempty" tf:"tcp_half_closed_timeout,omitempty"`

	TCPIdleTimeout *string `json:"tcpIdleTimeout,omitempty" tf:"tcp_idle_timeout,omitempty"`

	TCPResetTimeout *string `json:"tcpResetTimeout,omitempty" tf:"tcp_reset_timeout,omitempty"`

	UDPIdleTimeout *string `json:"udpIdleTimeout,omitempty" tf:"udp_idle_timeout,omitempty"`
}

type FlowtableProfileObservation struct {
	IcmpIdleTimeout *string `json:"icmpIdleTimeout,omitempty" tf:"icmp_idle_timeout,omitempty"`

	TCPClosedTimeout *string `json:"tcpClosedTimeout,omitempty" tf:"tcp_closed_timeout,omitempty"`

	TCPConnectionSetupTimeout *string `json:"tcpConnectionSetupTimeout,omitempty" tf:"tcp_connection_setup_timeout,omitempty"`

	TCPHalfClosedTimeout *string `json:"tcpHalfClosedTimeout,omitempty" tf:"tcp_half_closed_timeout,omitempty"`

	TCPIdleTimeout *string `json:"tcpIdleTimeout,omitempty" tf:"tcp_idle_timeout,omitempty"`

	TCPResetTimeout *string `json:"tcpResetTimeout,omitempty" tf:"tcp_reset_timeout,omitempty"`

	UDPIdleTimeout *string `json:"udpIdleTimeout,omitempty" tf:"udp_idle_timeout,omitempty"`
}

type FlowtableProfileParameters struct {

	// +kubebuilder:validation:Optional
	IcmpIdleTimeout *string `json:"icmpIdleTimeout,omitempty" tf:"icmp_idle_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	TCPClosedTimeout *string `json:"tcpClosedTimeout,omitempty" tf:"tcp_closed_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	TCPConnectionSetupTimeout *string `json:"tcpConnectionSetupTimeout,omitempty" tf:"tcp_connection_setup_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	TCPHalfClosedTimeout *string `json:"tcpHalfClosedTimeout,omitempty" tf:"tcp_half_closed_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	TCPIdleTimeout *string `json:"tcpIdleTimeout,omitempty" tf:"tcp_idle_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	TCPResetTimeout *string `json:"tcpResetTimeout,omitempty" tf:"tcp_reset_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	UDPIdleTimeout *string `json:"udpIdleTimeout,omitempty" tf:"udp_idle_timeout,omitempty"`
}

type NetworkServiceConfigpbAttributesInitParameters struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type NetworkServiceConfigpbAttributesObservation struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type NetworkServiceConfigpbAttributesParameters struct {

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type NetworkServiceInitParameters struct {
	CloudRef *string `json:"cloudRef,omitempty" tf:"cloud_ref,omitempty"`

	ConfigpbAttributes []NetworkServiceConfigpbAttributesInitParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	Markers []NetworkServiceMarkersInitParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	RoutingService []RoutingServiceInitParameters `json:"routingService,omitempty" tf:"routing_service,omitempty"`

	SeGroupRef *string `json:"seGroupRef,omitempty" tf:"se_group_ref,omitempty"`

	ServiceType *string `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	VrfRef *string `json:"vrfRef,omitempty" tf:"vrf_ref,omitempty"`
}

type NetworkServiceMarkersInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type NetworkServiceMarkersObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type NetworkServiceMarkersParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type NetworkServiceObservation struct {
	CloudRef *string `json:"cloudRef,omitempty" tf:"cloud_ref,omitempty"`

	ConfigpbAttributes []NetworkServiceConfigpbAttributesObservation `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Markers []NetworkServiceMarkersObservation `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	RoutingService []RoutingServiceObservation `json:"routingService,omitempty" tf:"routing_service,omitempty"`

	SeGroupRef *string `json:"seGroupRef,omitempty" tf:"se_group_ref,omitempty"`

	ServiceType *string `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	VrfRef *string `json:"vrfRef,omitempty" tf:"vrf_ref,omitempty"`
}

type NetworkServiceParameters struct {

	// +kubebuilder:validation:Optional
	CloudRef *string `json:"cloudRef,omitempty" tf:"cloud_ref,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigpbAttributes []NetworkServiceConfigpbAttributesParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	Markers []NetworkServiceMarkersParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	RoutingService []RoutingServiceParameters `json:"routingService,omitempty" tf:"routing_service,omitempty"`

	// +kubebuilder:validation:Optional
	SeGroupRef *string `json:"seGroupRef,omitempty" tf:"se_group_ref,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceType *string `json:"serviceType,omitempty" tf:"service_type,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// +kubebuilder:validation:Optional
	VrfRef *string `json:"vrfRef,omitempty" tf:"vrf_ref,omitempty"`
}

type RoutingServiceInitParameters struct {
	AdvertiseBackendNetworks *string `json:"advertiseBackendNetworks,omitempty" tf:"advertise_backend_networks,omitempty"`

	EnableAutoGateway *string `json:"enableAutoGateway,omitempty" tf:"enable_auto_gateway,omitempty"`

	EnableRouting *string `json:"enableRouting,omitempty" tf:"enable_routing,omitempty"`

	EnableVipOnAllInterfaces *string `json:"enableVipOnAllInterfaces,omitempty" tf:"enable_vip_on_all_interfaces,omitempty"`

	EnableVmac *string `json:"enableVmac,omitempty" tf:"enable_vmac,omitempty"`

	FloatingIntfIP []FloatingIntfIPInitParameters `json:"floatingIntfIp,omitempty" tf:"floating_intf_ip,omitempty"`

	FloatingIntfIPSe2 []FloatingIntfIPSe2InitParameters `json:"floatingIntfIpSe2,omitempty" tf:"floating_intf_ip_se_2,omitempty"`

	FlowtableProfile []FlowtableProfileInitParameters `json:"flowtableProfile,omitempty" tf:"flowtable_profile,omitempty"`

	GracefulRestart *string `json:"gracefulRestart,omitempty" tf:"graceful_restart,omitempty"`

	NATPolicyRef *string `json:"natPolicyRef,omitempty" tf:"nat_policy_ref,omitempty"`

	RoutingByLinuxIpstack *string `json:"routingByLinuxIpstack,omitempty" tf:"routing_by_linux_ipstack,omitempty"`
}

type RoutingServiceObservation struct {
	AdvertiseBackendNetworks *string `json:"advertiseBackendNetworks,omitempty" tf:"advertise_backend_networks,omitempty"`

	EnableAutoGateway *string `json:"enableAutoGateway,omitempty" tf:"enable_auto_gateway,omitempty"`

	EnableRouting *string `json:"enableRouting,omitempty" tf:"enable_routing,omitempty"`

	EnableVipOnAllInterfaces *string `json:"enableVipOnAllInterfaces,omitempty" tf:"enable_vip_on_all_interfaces,omitempty"`

	EnableVmac *string `json:"enableVmac,omitempty" tf:"enable_vmac,omitempty"`

	FloatingIntfIP []FloatingIntfIPObservation `json:"floatingIntfIp,omitempty" tf:"floating_intf_ip,omitempty"`

	FloatingIntfIPSe2 []FloatingIntfIPSe2Observation `json:"floatingIntfIpSe2,omitempty" tf:"floating_intf_ip_se_2,omitempty"`

	FlowtableProfile []FlowtableProfileObservation `json:"flowtableProfile,omitempty" tf:"flowtable_profile,omitempty"`

	GracefulRestart *string `json:"gracefulRestart,omitempty" tf:"graceful_restart,omitempty"`

	NATPolicyRef *string `json:"natPolicyRef,omitempty" tf:"nat_policy_ref,omitempty"`

	RoutingByLinuxIpstack *string `json:"routingByLinuxIpstack,omitempty" tf:"routing_by_linux_ipstack,omitempty"`
}

type RoutingServiceParameters struct {

	// +kubebuilder:validation:Optional
	AdvertiseBackendNetworks *string `json:"advertiseBackendNetworks,omitempty" tf:"advertise_backend_networks,omitempty"`

	// +kubebuilder:validation:Optional
	EnableAutoGateway *string `json:"enableAutoGateway,omitempty" tf:"enable_auto_gateway,omitempty"`

	// +kubebuilder:validation:Optional
	EnableRouting *string `json:"enableRouting,omitempty" tf:"enable_routing,omitempty"`

	// +kubebuilder:validation:Optional
	EnableVipOnAllInterfaces *string `json:"enableVipOnAllInterfaces,omitempty" tf:"enable_vip_on_all_interfaces,omitempty"`

	// +kubebuilder:validation:Optional
	EnableVmac *string `json:"enableVmac,omitempty" tf:"enable_vmac,omitempty"`

	// +kubebuilder:validation:Optional
	FloatingIntfIP []FloatingIntfIPParameters `json:"floatingIntfIp,omitempty" tf:"floating_intf_ip,omitempty"`

	// +kubebuilder:validation:Optional
	FloatingIntfIPSe2 []FloatingIntfIPSe2Parameters `json:"floatingIntfIpSe2,omitempty" tf:"floating_intf_ip_se_2,omitempty"`

	// +kubebuilder:validation:Optional
	FlowtableProfile []FlowtableProfileParameters `json:"flowtableProfile,omitempty" tf:"flowtable_profile,omitempty"`

	// +kubebuilder:validation:Optional
	GracefulRestart *string `json:"gracefulRestart,omitempty" tf:"graceful_restart,omitempty"`

	// +kubebuilder:validation:Optional
	NATPolicyRef *string `json:"natPolicyRef,omitempty" tf:"nat_policy_ref,omitempty"`

	// +kubebuilder:validation:Optional
	RoutingByLinuxIpstack *string `json:"routingByLinuxIpstack,omitempty" tf:"routing_by_linux_ipstack,omitempty"`
}

// NetworkServiceSpec defines the desired state of NetworkService
type NetworkServiceSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkServiceParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NetworkServiceInitParameters `json:"initProvider,omitempty"`
}

// NetworkServiceStatus defines the observed state of NetworkService.
type NetworkServiceStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkServiceObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkService is the Schema for the NetworkServices API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type NetworkService struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.seGroupRef) || has(self.initProvider.seGroupRef)",message="seGroupRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.serviceType) || has(self.initProvider.serviceType)",message="serviceType is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vrfRef) || has(self.initProvider.vrfRef)",message="vrfRef is a required parameter"
	Spec   NetworkServiceSpec   `json:"spec"`
	Status NetworkServiceStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkServiceList contains a list of NetworkServices
type NetworkServiceList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []NetworkService `json:"items"`
}

// Repository type metadata.
var (
	NetworkService_Kind             = "NetworkService"
	NetworkService_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: NetworkService_Kind}.String()
	NetworkService_KindAPIVersion   = NetworkService_Kind + "." + CRDGroupVersion.String()
	NetworkService_GroupVersionKind = CRDGroupVersion.WithKind(NetworkService_Kind)
)

func init() {
	SchemeBuilder.Register(&NetworkService{}, &NetworkServiceList{})
}
