/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EntriesFileInitParameters struct {
	Checksum *string `json:"checksum,omitempty" tf:"checksum,omitempty"`

	FileID *string `json:"fileId,omitempty" tf:"file_id,omitempty"`

	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	Timestamp *string `json:"timestamp,omitempty" tf:"timestamp,omitempty"`
}

type EntriesFileObservation struct {
	Checksum *string `json:"checksum,omitempty" tf:"checksum,omitempty"`

	FileID *string `json:"fileId,omitempty" tf:"file_id,omitempty"`

	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`

	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	Timestamp *string `json:"timestamp,omitempty" tf:"timestamp,omitempty"`
}

type EntriesFileParameters struct {

	// +kubebuilder:validation:Optional
	Checksum *string `json:"checksum,omitempty" tf:"checksum,omitempty"`

	// +kubebuilder:validation:Optional
	FileID *string `json:"fileId,omitempty" tf:"file_id,omitempty"`

	// +kubebuilder:validation:Optional
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`

	// +kubebuilder:validation:Optional
	Format *string `json:"format,omitempty" tf:"format,omitempty"`

	// +kubebuilder:validation:Optional
	Timestamp *string `json:"timestamp,omitempty" tf:"timestamp,omitempty"`
}

type EntriesInitParameters struct {
	File []EntriesFileInitParameters `json:"file,omitempty" tf:"file,omitempty"`

	Priority *string `json:"priority,omitempty" tf:"priority,omitempty"`
}

type EntriesObservation struct {
	File []EntriesFileObservation `json:"file,omitempty" tf:"file,omitempty"`

	Priority *string `json:"priority,omitempty" tf:"priority,omitempty"`
}

type EntriesParameters struct {

	// +kubebuilder:validation:Optional
	File []EntriesFileParameters `json:"file" tf:"file,omitempty"`

	// +kubebuilder:validation:Optional
	Priority *string `json:"priority,omitempty" tf:"priority,omitempty"`
}

type GslbGeoDbProfileConfigpbAttributesInitParameters struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type GslbGeoDbProfileConfigpbAttributesObservation struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type GslbGeoDbProfileConfigpbAttributesParameters struct {

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type GslbGeoDbProfileInitParameters struct {
	ConfigpbAttributes []GslbGeoDbProfileConfigpbAttributesInitParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Entries []EntriesInitParameters `json:"entries,omitempty" tf:"entries,omitempty"`

	IsFederated *string `json:"isFederated,omitempty" tf:"is_federated,omitempty"`

	Markers []GslbGeoDbProfileMarkersInitParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type GslbGeoDbProfileMarkersInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type GslbGeoDbProfileMarkersObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type GslbGeoDbProfileMarkersParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type GslbGeoDbProfileObservation struct {
	ConfigpbAttributes []GslbGeoDbProfileConfigpbAttributesObservation `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Entries []EntriesObservation `json:"entries,omitempty" tf:"entries,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IsFederated *string `json:"isFederated,omitempty" tf:"is_federated,omitempty"`

	Markers []GslbGeoDbProfileMarkersObservation `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type GslbGeoDbProfileParameters struct {

	// +kubebuilder:validation:Optional
	ConfigpbAttributes []GslbGeoDbProfileConfigpbAttributesParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Entries []EntriesParameters `json:"entries,omitempty" tf:"entries,omitempty"`

	// +kubebuilder:validation:Optional
	IsFederated *string `json:"isFederated,omitempty" tf:"is_federated,omitempty"`

	// +kubebuilder:validation:Optional
	Markers []GslbGeoDbProfileMarkersParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

// GslbGeoDbProfileSpec defines the desired state of GslbGeoDbProfile
type GslbGeoDbProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     GslbGeoDbProfileParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider GslbGeoDbProfileInitParameters `json:"initProvider,omitempty"`
}

// GslbGeoDbProfileStatus defines the observed state of GslbGeoDbProfile.
type GslbGeoDbProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        GslbGeoDbProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// GslbGeoDbProfile is the Schema for the GslbGeoDbProfiles API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type GslbGeoDbProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.entries) || has(self.initProvider.entries)",message="entries is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	Spec   GslbGeoDbProfileSpec   `json:"spec"`
	Status GslbGeoDbProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// GslbGeoDbProfileList contains a list of GslbGeoDbProfiles
type GslbGeoDbProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []GslbGeoDbProfile `json:"items"`
}

// Repository type metadata.
var (
	GslbGeoDbProfile_Kind             = "GslbGeoDbProfile"
	GslbGeoDbProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: GslbGeoDbProfile_Kind}.String()
	GslbGeoDbProfile_KindAPIVersion   = GslbGeoDbProfile_Kind + "." + CRDGroupVersion.String()
	GslbGeoDbProfile_GroupVersionKind = CRDGroupVersion.WithKind(GslbGeoDbProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&GslbGeoDbProfile{}, &GslbGeoDbProfileList{})
}
