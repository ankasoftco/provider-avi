/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AddrsInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AddrsObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AddrsParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type AllowListInitParameters struct {
	Rules []RulesInitParameters `json:"rules,omitempty" tf:"rules,omitempty"`
}

type AllowListObservation struct {
	Rules []RulesObservation `json:"rules,omitempty" tf:"rules,omitempty"`
}

type AllowListParameters struct {

	// +kubebuilder:validation:Optional
	Rules []RulesParameters `json:"rules,omitempty" tf:"rules,omitempty"`
}

type BotDetectionPolicyInitParameters struct {
	AllowList []AllowListInitParameters `json:"allowList,omitempty" tf:"allow_list,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	IPLocationDetector []IPLocationDetectorInitParameters `json:"ipLocationDetector,omitempty" tf:"ip_location_detector,omitempty"`

	IPReputationDetector []IPReputationDetectorInitParameters `json:"ipReputationDetector,omitempty" tf:"ip_reputation_detector,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	SystemBotMappingRef *string `json:"systemBotMappingRef,omitempty" tf:"system_bot_mapping_ref,omitempty"`

	SystemConsolidatorRef *string `json:"systemConsolidatorRef,omitempty" tf:"system_consolidator_ref,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	UserAgentDetector []UserAgentDetectorInitParameters `json:"userAgentDetector,omitempty" tf:"user_agent_detector,omitempty"`

	UserBotMappingRef *string `json:"userBotMappingRef,omitempty" tf:"user_bot_mapping_ref,omitempty"`

	UserConsolidatorRef *string `json:"userConsolidatorRef,omitempty" tf:"user_consolidator_ref,omitempty"`
}

type BotDetectionPolicyObservation struct {
	AllowList []AllowListObservation `json:"allowList,omitempty" tf:"allow_list,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IPLocationDetector []IPLocationDetectorObservation `json:"ipLocationDetector,omitempty" tf:"ip_location_detector,omitempty"`

	IPReputationDetector []IPReputationDetectorObservation `json:"ipReputationDetector,omitempty" tf:"ip_reputation_detector,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	SystemBotMappingRef *string `json:"systemBotMappingRef,omitempty" tf:"system_bot_mapping_ref,omitempty"`

	SystemConsolidatorRef *string `json:"systemConsolidatorRef,omitempty" tf:"system_consolidator_ref,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	UserAgentDetector []UserAgentDetectorObservation `json:"userAgentDetector,omitempty" tf:"user_agent_detector,omitempty"`

	UserBotMappingRef *string `json:"userBotMappingRef,omitempty" tf:"user_bot_mapping_ref,omitempty"`

	UserConsolidatorRef *string `json:"userConsolidatorRef,omitempty" tf:"user_consolidator_ref,omitempty"`
}

type BotDetectionPolicyParameters struct {

	// +kubebuilder:validation:Optional
	AllowList []AllowListParameters `json:"allowList,omitempty" tf:"allow_list,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	IPLocationDetector []IPLocationDetectorParameters `json:"ipLocationDetector,omitempty" tf:"ip_location_detector,omitempty"`

	// +kubebuilder:validation:Optional
	IPReputationDetector []IPReputationDetectorParameters `json:"ipReputationDetector,omitempty" tf:"ip_reputation_detector,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	SystemBotMappingRef *string `json:"systemBotMappingRef,omitempty" tf:"system_bot_mapping_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SystemConsolidatorRef *string `json:"systemConsolidatorRef,omitempty" tf:"system_consolidator_ref,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// +kubebuilder:validation:Optional
	UserAgentDetector []UserAgentDetectorParameters `json:"userAgentDetector,omitempty" tf:"user_agent_detector,omitempty"`

	// +kubebuilder:validation:Optional
	UserBotMappingRef *string `json:"userBotMappingRef,omitempty" tf:"user_bot_mapping_ref,omitempty"`

	// +kubebuilder:validation:Optional
	UserConsolidatorRef *string `json:"userConsolidatorRef,omitempty" tf:"user_consolidator_ref,omitempty"`
}

type BotDetectionResultInitParameters struct {
	Classifications []ClassificationsInitParameters `json:"classifications,omitempty" tf:"classifications,omitempty"`

	MatchOperation *string `json:"matchOperation,omitempty" tf:"match_operation,omitempty"`
}

type BotDetectionResultObservation struct {
	Classifications []ClassificationsObservation `json:"classifications,omitempty" tf:"classifications,omitempty"`

	MatchOperation *string `json:"matchOperation,omitempty" tf:"match_operation,omitempty"`
}

type BotDetectionResultParameters struct {

	// +kubebuilder:validation:Optional
	Classifications []ClassificationsParameters `json:"classifications,omitempty" tf:"classifications,omitempty"`

	// +kubebuilder:validation:Optional
	MatchOperation *string `json:"matchOperation" tf:"match_operation,omitempty"`
}

type ClassificationsInitParameters struct {
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UserDefinedType *string `json:"userDefinedType,omitempty" tf:"user_defined_type,omitempty"`
}

type ClassificationsObservation struct {
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UserDefinedType *string `json:"userDefinedType,omitempty" tf:"user_defined_type,omitempty"`
}

type ClassificationsParameters struct {

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	UserDefinedType *string `json:"userDefinedType,omitempty" tf:"user_defined_type,omitempty"`
}

type ClientIPInitParameters struct {
	Addrs []AddrsInitParameters `json:"addrs,omitempty" tf:"addrs,omitempty"`

	GroupRefs []*string `json:"groupRefs,omitempty" tf:"group_refs,omitempty"`

	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Prefixes []PrefixesInitParameters `json:"prefixes,omitempty" tf:"prefixes,omitempty"`

	Ranges []ClientIPRangesInitParameters `json:"ranges,omitempty" tf:"ranges,omitempty"`
}

type ClientIPObservation struct {
	Addrs []AddrsObservation `json:"addrs,omitempty" tf:"addrs,omitempty"`

	GroupRefs []*string `json:"groupRefs,omitempty" tf:"group_refs,omitempty"`

	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Prefixes []PrefixesObservation `json:"prefixes,omitempty" tf:"prefixes,omitempty"`

	Ranges []ClientIPRangesObservation `json:"ranges,omitempty" tf:"ranges,omitempty"`
}

type ClientIPParameters struct {

	// +kubebuilder:validation:Optional
	Addrs []AddrsParameters `json:"addrs,omitempty" tf:"addrs,omitempty"`

	// +kubebuilder:validation:Optional
	GroupRefs []*string `json:"groupRefs,omitempty" tf:"group_refs,omitempty"`

	// +kubebuilder:validation:Optional
	MatchCriteria *string `json:"matchCriteria" tf:"match_criteria,omitempty"`

	// +kubebuilder:validation:Optional
	Prefixes []PrefixesParameters `json:"prefixes,omitempty" tf:"prefixes,omitempty"`

	// +kubebuilder:validation:Optional
	Ranges []ClientIPRangesParameters `json:"ranges,omitempty" tf:"ranges,omitempty"`
}

type ClientIPRangesInitParameters struct {
	Begin []RangesBeginInitParameters `json:"begin,omitempty" tf:"begin,omitempty"`

	End []RangesEndInitParameters `json:"end,omitempty" tf:"end,omitempty"`
}

type ClientIPRangesObservation struct {
	Begin []RangesBeginObservation `json:"begin,omitempty" tf:"begin,omitempty"`

	End []RangesEndObservation `json:"end,omitempty" tf:"end,omitempty"`
}

type ClientIPRangesParameters struct {

	// +kubebuilder:validation:Optional
	Begin []RangesBeginParameters `json:"begin" tf:"begin,omitempty"`

	// +kubebuilder:validation:Optional
	End []RangesEndParameters `json:"end" tf:"end,omitempty"`
}

type ConditionInitParameters struct {
	BotDetectionResult []BotDetectionResultInitParameters `json:"botDetectionResult,omitempty" tf:"bot_detection_result,omitempty"`

	ClientIP []ClientIPInitParameters `json:"clientIp,omitempty" tf:"client_ip,omitempty"`

	Cookie []CookieInitParameters `json:"cookie,omitempty" tf:"cookie,omitempty"`

	GeoMatches []GeoMatchesInitParameters `json:"geoMatches,omitempty" tf:"geo_matches,omitempty"`

	Hdrs []HdrsInitParameters `json:"hdrs,omitempty" tf:"hdrs,omitempty"`

	HostHdr []HostHdrInitParameters `json:"hostHdr,omitempty" tf:"host_hdr,omitempty"`

	IPReputationType []IPReputationTypeInitParameters `json:"ipReputationType,omitempty" tf:"ip_reputation_type,omitempty"`

	Method []MethodInitParameters `json:"method,omitempty" tf:"method,omitempty"`

	Path []ConditionPathInitParameters `json:"path,omitempty" tf:"path,omitempty"`

	Protocol []ProtocolInitParameters `json:"protocol,omitempty" tf:"protocol,omitempty"`

	Query []QueryInitParameters `json:"query,omitempty" tf:"query,omitempty"`

	SourceIP []SourceIPInitParameters `json:"sourceIp,omitempty" tf:"source_ip,omitempty"`

	TLSFingerprintMatch []TLSFingerprintMatchInitParameters `json:"tlsFingerprintMatch,omitempty" tf:"tls_fingerprint_match,omitempty"`

	Version []VersionInitParameters `json:"version,omitempty" tf:"version,omitempty"`

	VsPort []VsPortInitParameters `json:"vsPort,omitempty" tf:"vs_port,omitempty"`
}

type ConditionObservation struct {
	BotDetectionResult []BotDetectionResultObservation `json:"botDetectionResult,omitempty" tf:"bot_detection_result,omitempty"`

	ClientIP []ClientIPObservation `json:"clientIp,omitempty" tf:"client_ip,omitempty"`

	Cookie []CookieObservation `json:"cookie,omitempty" tf:"cookie,omitempty"`

	GeoMatches []GeoMatchesObservation `json:"geoMatches,omitempty" tf:"geo_matches,omitempty"`

	Hdrs []HdrsObservation `json:"hdrs,omitempty" tf:"hdrs,omitempty"`

	HostHdr []HostHdrObservation `json:"hostHdr,omitempty" tf:"host_hdr,omitempty"`

	IPReputationType []IPReputationTypeObservation `json:"ipReputationType,omitempty" tf:"ip_reputation_type,omitempty"`

	Method []MethodObservation `json:"method,omitempty" tf:"method,omitempty"`

	Path []ConditionPathObservation `json:"path,omitempty" tf:"path,omitempty"`

	Protocol []ProtocolObservation `json:"protocol,omitempty" tf:"protocol,omitempty"`

	Query []QueryObservation `json:"query,omitempty" tf:"query,omitempty"`

	SourceIP []SourceIPObservation `json:"sourceIp,omitempty" tf:"source_ip,omitempty"`

	TLSFingerprintMatch []TLSFingerprintMatchObservation `json:"tlsFingerprintMatch,omitempty" tf:"tls_fingerprint_match,omitempty"`

	Version []VersionObservation `json:"version,omitempty" tf:"version,omitempty"`

	VsPort []VsPortObservation `json:"vsPort,omitempty" tf:"vs_port,omitempty"`
}

type ConditionParameters struct {

	// +kubebuilder:validation:Optional
	BotDetectionResult []BotDetectionResultParameters `json:"botDetectionResult,omitempty" tf:"bot_detection_result,omitempty"`

	// +kubebuilder:validation:Optional
	ClientIP []ClientIPParameters `json:"clientIp,omitempty" tf:"client_ip,omitempty"`

	// +kubebuilder:validation:Optional
	Cookie []CookieParameters `json:"cookie,omitempty" tf:"cookie,omitempty"`

	// +kubebuilder:validation:Optional
	GeoMatches []GeoMatchesParameters `json:"geoMatches,omitempty" tf:"geo_matches,omitempty"`

	// +kubebuilder:validation:Optional
	Hdrs []HdrsParameters `json:"hdrs,omitempty" tf:"hdrs,omitempty"`

	// +kubebuilder:validation:Optional
	HostHdr []HostHdrParameters `json:"hostHdr,omitempty" tf:"host_hdr,omitempty"`

	// +kubebuilder:validation:Optional
	IPReputationType []IPReputationTypeParameters `json:"ipReputationType,omitempty" tf:"ip_reputation_type,omitempty"`

	// +kubebuilder:validation:Optional
	Method []MethodParameters `json:"method,omitempty" tf:"method,omitempty"`

	// +kubebuilder:validation:Optional
	Path []ConditionPathParameters `json:"path,omitempty" tf:"path,omitempty"`

	// +kubebuilder:validation:Optional
	Protocol []ProtocolParameters `json:"protocol,omitempty" tf:"protocol,omitempty"`

	// +kubebuilder:validation:Optional
	Query []QueryParameters `json:"query,omitempty" tf:"query,omitempty"`

	// +kubebuilder:validation:Optional
	SourceIP []SourceIPParameters `json:"sourceIp,omitempty" tf:"source_ip,omitempty"`

	// +kubebuilder:validation:Optional
	TLSFingerprintMatch []TLSFingerprintMatchParameters `json:"tlsFingerprintMatch,omitempty" tf:"tls_fingerprint_match,omitempty"`

	// +kubebuilder:validation:Optional
	Version []VersionParameters `json:"version,omitempty" tf:"version,omitempty"`

	// +kubebuilder:validation:Optional
	VsPort []VsPortParameters `json:"vsPort,omitempty" tf:"vs_port,omitempty"`
}

type ConditionPathInitParameters struct {
	MatchCase *string `json:"matchCase,omitempty" tf:"match_case,omitempty"`

	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	MatchDecodedString *string `json:"matchDecodedString,omitempty" tf:"match_decoded_string,omitempty"`

	MatchStr []*string `json:"matchStr,omitempty" tf:"match_str,omitempty"`

	StringGroupRefs []*string `json:"stringGroupRefs,omitempty" tf:"string_group_refs,omitempty"`
}

type ConditionPathObservation struct {
	MatchCase *string `json:"matchCase,omitempty" tf:"match_case,omitempty"`

	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	MatchDecodedString *string `json:"matchDecodedString,omitempty" tf:"match_decoded_string,omitempty"`

	MatchStr []*string `json:"matchStr,omitempty" tf:"match_str,omitempty"`

	StringGroupRefs []*string `json:"stringGroupRefs,omitempty" tf:"string_group_refs,omitempty"`
}

type ConditionPathParameters struct {

	// +kubebuilder:validation:Optional
	MatchCase *string `json:"matchCase,omitempty" tf:"match_case,omitempty"`

	// +kubebuilder:validation:Optional
	MatchCriteria *string `json:"matchCriteria" tf:"match_criteria,omitempty"`

	// +kubebuilder:validation:Optional
	MatchDecodedString *string `json:"matchDecodedString,omitempty" tf:"match_decoded_string,omitempty"`

	// +kubebuilder:validation:Optional
	MatchStr []*string `json:"matchStr,omitempty" tf:"match_str,omitempty"`

	// +kubebuilder:validation:Optional
	StringGroupRefs []*string `json:"stringGroupRefs,omitempty" tf:"string_group_refs,omitempty"`
}

type CookieInitParameters struct {
	MatchCase *string `json:"matchCase,omitempty" tf:"match_case,omitempty"`

	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CookieObservation struct {
	MatchCase *string `json:"matchCase,omitempty" tf:"match_case,omitempty"`

	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type CookieParameters struct {

	// +kubebuilder:validation:Optional
	MatchCase *string `json:"matchCase,omitempty" tf:"match_case,omitempty"`

	// +kubebuilder:validation:Optional
	MatchCriteria *string `json:"matchCriteria" tf:"match_criteria,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type GeoMatchesInitParameters struct {
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	MatchOperation *string `json:"matchOperation,omitempty" tf:"match_operation,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type GeoMatchesObservation struct {
	Attribute *string `json:"attribute,omitempty" tf:"attribute,omitempty"`

	MatchOperation *string `json:"matchOperation,omitempty" tf:"match_operation,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type GeoMatchesParameters struct {

	// +kubebuilder:validation:Optional
	Attribute *string `json:"attribute" tf:"attribute,omitempty"`

	// +kubebuilder:validation:Optional
	MatchOperation *string `json:"matchOperation" tf:"match_operation,omitempty"`

	// +kubebuilder:validation:Optional
	Values []*string `json:"values" tf:"values,omitempty"`
}

type HdrsInitParameters struct {
	Hdr *string `json:"hdr,omitempty" tf:"hdr,omitempty"`

	MatchCase *string `json:"matchCase,omitempty" tf:"match_case,omitempty"`

	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Value []*string `json:"value,omitempty" tf:"value,omitempty"`
}

type HdrsObservation struct {
	Hdr *string `json:"hdr,omitempty" tf:"hdr,omitempty"`

	MatchCase *string `json:"matchCase,omitempty" tf:"match_case,omitempty"`

	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Value []*string `json:"value,omitempty" tf:"value,omitempty"`
}

type HdrsParameters struct {

	// +kubebuilder:validation:Optional
	Hdr *string `json:"hdr" tf:"hdr,omitempty"`

	// +kubebuilder:validation:Optional
	MatchCase *string `json:"matchCase,omitempty" tf:"match_case,omitempty"`

	// +kubebuilder:validation:Optional
	MatchCriteria *string `json:"matchCriteria" tf:"match_criteria,omitempty"`

	// +kubebuilder:validation:Optional
	Value []*string `json:"value,omitempty" tf:"value,omitempty"`
}

type HostHdrInitParameters struct {
	MatchCase *string `json:"matchCase,omitempty" tf:"match_case,omitempty"`

	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Value []*string `json:"value,omitempty" tf:"value,omitempty"`
}

type HostHdrObservation struct {
	MatchCase *string `json:"matchCase,omitempty" tf:"match_case,omitempty"`

	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Value []*string `json:"value,omitempty" tf:"value,omitempty"`
}

type HostHdrParameters struct {

	// +kubebuilder:validation:Optional
	MatchCase *string `json:"matchCase,omitempty" tf:"match_case,omitempty"`

	// +kubebuilder:validation:Optional
	MatchCriteria *string `json:"matchCriteria" tf:"match_criteria,omitempty"`

	// +kubebuilder:validation:Optional
	Value []*string `json:"value,omitempty" tf:"value,omitempty"`
}

type IPLocationDetectorInitParameters struct {
	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	IPLocationDBRef *string `json:"ipLocationDbRef,omitempty" tf:"ip_location_db_ref,omitempty"`

	SystemCloudProvidersRef *string `json:"systemCloudProvidersRef,omitempty" tf:"system_cloud_providers_ref,omitempty"`

	SystemSearchEnginesRef *string `json:"systemSearchEnginesRef,omitempty" tf:"system_search_engines_ref,omitempty"`
}

type IPLocationDetectorObservation struct {
	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	IPLocationDBRef *string `json:"ipLocationDbRef,omitempty" tf:"ip_location_db_ref,omitempty"`

	SystemCloudProvidersRef *string `json:"systemCloudProvidersRef,omitempty" tf:"system_cloud_providers_ref,omitempty"`

	SystemSearchEnginesRef *string `json:"systemSearchEnginesRef,omitempty" tf:"system_search_engines_ref,omitempty"`
}

type IPLocationDetectorParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	IPLocationDBRef *string `json:"ipLocationDbRef,omitempty" tf:"ip_location_db_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SystemCloudProvidersRef *string `json:"systemCloudProvidersRef,omitempty" tf:"system_cloud_providers_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SystemSearchEnginesRef *string `json:"systemSearchEnginesRef,omitempty" tf:"system_search_engines_ref,omitempty"`
}

type IPReputationDetectorInitParameters struct {
	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	IPReputationDBRef *string `json:"ipReputationDbRef,omitempty" tf:"ip_reputation_db_ref,omitempty"`

	SystemIPReputationMappingRef *string `json:"systemIpReputationMappingRef,omitempty" tf:"system_ip_reputation_mapping_ref,omitempty"`
}

type IPReputationDetectorObservation struct {
	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	IPReputationDBRef *string `json:"ipReputationDbRef,omitempty" tf:"ip_reputation_db_ref,omitempty"`

	SystemIPReputationMappingRef *string `json:"systemIpReputationMappingRef,omitempty" tf:"system_ip_reputation_mapping_ref,omitempty"`
}

type IPReputationDetectorParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	IPReputationDBRef *string `json:"ipReputationDbRef,omitempty" tf:"ip_reputation_db_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SystemIPReputationMappingRef *string `json:"systemIpReputationMappingRef,omitempty" tf:"system_ip_reputation_mapping_ref,omitempty"`
}

type IPReputationTypeInitParameters struct {
	MatchOperation *string `json:"matchOperation,omitempty" tf:"match_operation,omitempty"`

	ReputationTypes []*string `json:"reputationTypes,omitempty" tf:"reputation_types,omitempty"`
}

type IPReputationTypeObservation struct {
	MatchOperation *string `json:"matchOperation,omitempty" tf:"match_operation,omitempty"`

	ReputationTypes []*string `json:"reputationTypes,omitempty" tf:"reputation_types,omitempty"`
}

type IPReputationTypeParameters struct {

	// +kubebuilder:validation:Optional
	MatchOperation *string `json:"matchOperation" tf:"match_operation,omitempty"`

	// +kubebuilder:validation:Optional
	ReputationTypes []*string `json:"reputationTypes" tf:"reputation_types,omitempty"`
}

type MethodInitParameters struct {
	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Methods []*string `json:"methods,omitempty" tf:"methods,omitempty"`
}

type MethodObservation struct {
	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Methods []*string `json:"methods,omitempty" tf:"methods,omitempty"`
}

type MethodParameters struct {

	// +kubebuilder:validation:Optional
	MatchCriteria *string `json:"matchCriteria" tf:"match_criteria,omitempty"`

	// +kubebuilder:validation:Optional
	Methods []*string `json:"methods" tf:"methods,omitempty"`
}

type PrefixesIPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PrefixesIPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PrefixesIPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type PrefixesInitParameters struct {
	IPAddr []PrefixesIPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type PrefixesObservation struct {
	IPAddr []PrefixesIPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type PrefixesParameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []PrefixesIPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type ProtocolInitParameters struct {
	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Protocols *string `json:"protocols,omitempty" tf:"protocols,omitempty"`
}

type ProtocolObservation struct {
	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Protocols *string `json:"protocols,omitempty" tf:"protocols,omitempty"`
}

type ProtocolParameters struct {

	// +kubebuilder:validation:Optional
	MatchCriteria *string `json:"matchCriteria" tf:"match_criteria,omitempty"`

	// +kubebuilder:validation:Optional
	Protocols *string `json:"protocols" tf:"protocols,omitempty"`
}

type QueryInitParameters struct {
	MatchCase *string `json:"matchCase,omitempty" tf:"match_case,omitempty"`

	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	MatchDecodedString *string `json:"matchDecodedString,omitempty" tf:"match_decoded_string,omitempty"`

	MatchStr []*string `json:"matchStr,omitempty" tf:"match_str,omitempty"`

	StringGroupRefs []*string `json:"stringGroupRefs,omitempty" tf:"string_group_refs,omitempty"`
}

type QueryObservation struct {
	MatchCase *string `json:"matchCase,omitempty" tf:"match_case,omitempty"`

	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	MatchDecodedString *string `json:"matchDecodedString,omitempty" tf:"match_decoded_string,omitempty"`

	MatchStr []*string `json:"matchStr,omitempty" tf:"match_str,omitempty"`

	StringGroupRefs []*string `json:"stringGroupRefs,omitempty" tf:"string_group_refs,omitempty"`
}

type QueryParameters struct {

	// +kubebuilder:validation:Optional
	MatchCase *string `json:"matchCase,omitempty" tf:"match_case,omitempty"`

	// +kubebuilder:validation:Optional
	MatchCriteria *string `json:"matchCriteria" tf:"match_criteria,omitempty"`

	// +kubebuilder:validation:Optional
	MatchDecodedString *string `json:"matchDecodedString,omitempty" tf:"match_decoded_string,omitempty"`

	// +kubebuilder:validation:Optional
	MatchStr []*string `json:"matchStr,omitempty" tf:"match_str,omitempty"`

	// +kubebuilder:validation:Optional
	StringGroupRefs []*string `json:"stringGroupRefs,omitempty" tf:"string_group_refs,omitempty"`
}

type RangesBeginInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RangesBeginObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RangesBeginParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type RangesEndInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RangesEndObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RangesEndParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type RulesInitParameters struct {
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	Condition []ConditionInitParameters `json:"condition,omitempty" tf:"condition,omitempty"`

	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type RulesObservation struct {
	Action *string `json:"action,omitempty" tf:"action,omitempty"`

	Condition []ConditionObservation `json:"condition,omitempty" tf:"condition,omitempty"`

	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type RulesParameters struct {

	// +kubebuilder:validation:Optional
	Action *string `json:"action" tf:"action,omitempty"`

	// +kubebuilder:validation:Optional
	Condition []ConditionParameters `json:"condition" tf:"condition,omitempty"`

	// +kubebuilder:validation:Optional
	Index *string `json:"index" tf:"index,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type SourceIPAddrsInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SourceIPAddrsObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SourceIPAddrsParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type SourceIPInitParameters struct {
	Addrs []SourceIPAddrsInitParameters `json:"addrs,omitempty" tf:"addrs,omitempty"`

	GroupRefs []*string `json:"groupRefs,omitempty" tf:"group_refs,omitempty"`

	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Prefixes []SourceIPPrefixesInitParameters `json:"prefixes,omitempty" tf:"prefixes,omitempty"`

	Ranges []SourceIPRangesInitParameters `json:"ranges,omitempty" tf:"ranges,omitempty"`
}

type SourceIPObservation struct {
	Addrs []SourceIPAddrsObservation `json:"addrs,omitempty" tf:"addrs,omitempty"`

	GroupRefs []*string `json:"groupRefs,omitempty" tf:"group_refs,omitempty"`

	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Prefixes []SourceIPPrefixesObservation `json:"prefixes,omitempty" tf:"prefixes,omitempty"`

	Ranges []SourceIPRangesObservation `json:"ranges,omitempty" tf:"ranges,omitempty"`
}

type SourceIPParameters struct {

	// +kubebuilder:validation:Optional
	Addrs []SourceIPAddrsParameters `json:"addrs,omitempty" tf:"addrs,omitempty"`

	// +kubebuilder:validation:Optional
	GroupRefs []*string `json:"groupRefs,omitempty" tf:"group_refs,omitempty"`

	// +kubebuilder:validation:Optional
	MatchCriteria *string `json:"matchCriteria" tf:"match_criteria,omitempty"`

	// +kubebuilder:validation:Optional
	Prefixes []SourceIPPrefixesParameters `json:"prefixes,omitempty" tf:"prefixes,omitempty"`

	// +kubebuilder:validation:Optional
	Ranges []SourceIPRangesParameters `json:"ranges,omitempty" tf:"ranges,omitempty"`
}

type SourceIPPrefixesIPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SourceIPPrefixesIPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SourceIPPrefixesIPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type SourceIPPrefixesInitParameters struct {
	IPAddr []SourceIPPrefixesIPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type SourceIPPrefixesObservation struct {
	IPAddr []SourceIPPrefixesIPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type SourceIPPrefixesParameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []SourceIPPrefixesIPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type SourceIPRangesBeginInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SourceIPRangesBeginObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SourceIPRangesBeginParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type SourceIPRangesEndInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SourceIPRangesEndObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SourceIPRangesEndParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type SourceIPRangesInitParameters struct {
	Begin []SourceIPRangesBeginInitParameters `json:"begin,omitempty" tf:"begin,omitempty"`

	End []SourceIPRangesEndInitParameters `json:"end,omitempty" tf:"end,omitempty"`
}

type SourceIPRangesObservation struct {
	Begin []SourceIPRangesBeginObservation `json:"begin,omitempty" tf:"begin,omitempty"`

	End []SourceIPRangesEndObservation `json:"end,omitempty" tf:"end,omitempty"`
}

type SourceIPRangesParameters struct {

	// +kubebuilder:validation:Optional
	Begin []SourceIPRangesBeginParameters `json:"begin" tf:"begin,omitempty"`

	// +kubebuilder:validation:Optional
	End []SourceIPRangesEndParameters `json:"end" tf:"end,omitempty"`
}

type TLSFingerprintMatchInitParameters struct {
	Fingerprints []*string `json:"fingerprints,omitempty" tf:"fingerprints,omitempty"`

	MatchOperation *string `json:"matchOperation,omitempty" tf:"match_operation,omitempty"`

	StringGroupRefs []*string `json:"stringGroupRefs,omitempty" tf:"string_group_refs,omitempty"`
}

type TLSFingerprintMatchObservation struct {
	Fingerprints []*string `json:"fingerprints,omitempty" tf:"fingerprints,omitempty"`

	MatchOperation *string `json:"matchOperation,omitempty" tf:"match_operation,omitempty"`

	StringGroupRefs []*string `json:"stringGroupRefs,omitempty" tf:"string_group_refs,omitempty"`
}

type TLSFingerprintMatchParameters struct {

	// +kubebuilder:validation:Optional
	Fingerprints []*string `json:"fingerprints,omitempty" tf:"fingerprints,omitempty"`

	// +kubebuilder:validation:Optional
	MatchOperation *string `json:"matchOperation" tf:"match_operation,omitempty"`

	// +kubebuilder:validation:Optional
	StringGroupRefs []*string `json:"stringGroupRefs,omitempty" tf:"string_group_refs,omitempty"`
}

type UserAgentDetectorInitParameters struct {
	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	UseTLSFingerprint *string `json:"useTlsFingerprint,omitempty" tf:"use_tls_fingerprint,omitempty"`
}

type UserAgentDetectorObservation struct {
	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	UseTLSFingerprint *string `json:"useTlsFingerprint,omitempty" tf:"use_tls_fingerprint,omitempty"`
}

type UserAgentDetectorParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	UseTLSFingerprint *string `json:"useTlsFingerprint,omitempty" tf:"use_tls_fingerprint,omitempty"`
}

type VersionInitParameters struct {
	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Versions []*string `json:"versions,omitempty" tf:"versions,omitempty"`
}

type VersionObservation struct {
	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Versions []*string `json:"versions,omitempty" tf:"versions,omitempty"`
}

type VersionParameters struct {

	// +kubebuilder:validation:Optional
	MatchCriteria *string `json:"matchCriteria" tf:"match_criteria,omitempty"`

	// +kubebuilder:validation:Optional
	Versions []*string `json:"versions" tf:"versions,omitempty"`
}

type VsPortInitParameters struct {
	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`
}

type VsPortObservation struct {
	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`
}

type VsPortParameters struct {

	// +kubebuilder:validation:Optional
	MatchCriteria *string `json:"matchCriteria" tf:"match_criteria,omitempty"`

	// +kubebuilder:validation:Optional
	Ports []*float64 `json:"ports" tf:"ports,omitempty"`
}

// BotDetectionPolicySpec defines the desired state of BotDetectionPolicy
type BotDetectionPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     BotDetectionPolicyParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider BotDetectionPolicyInitParameters `json:"initProvider,omitempty"`
}

// BotDetectionPolicyStatus defines the observed state of BotDetectionPolicy.
type BotDetectionPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        BotDetectionPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// BotDetectionPolicy is the Schema for the BotDetectionPolicys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type BotDetectionPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ipLocationDetector) || has(self.initProvider.ipLocationDetector)",message="ipLocationDetector is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ipReputationDetector) || has(self.initProvider.ipReputationDetector)",message="ipReputationDetector is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.userAgentDetector) || has(self.initProvider.userAgentDetector)",message="userAgentDetector is a required parameter"
	Spec   BotDetectionPolicySpec   `json:"spec"`
	Status BotDetectionPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// BotDetectionPolicyList contains a list of BotDetectionPolicys
type BotDetectionPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []BotDetectionPolicy `json:"items"`
}

// Repository type metadata.
var (
	BotDetectionPolicy_Kind             = "BotDetectionPolicy"
	BotDetectionPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: BotDetectionPolicy_Kind}.String()
	BotDetectionPolicy_KindAPIVersion   = BotDetectionPolicy_Kind + "." + CRDGroupVersion.String()
	BotDetectionPolicy_GroupVersionKind = CRDGroupVersion.WithKind(BotDetectionPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&BotDetectionPolicy{}, &BotDetectionPolicyList{})
}
