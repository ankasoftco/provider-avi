/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type BuildInitParameters struct {
	BuildNo *string `json:"buildNo,omitempty" tf:"build_no,omitempty"`

	Date *string `json:"date,omitempty" tf:"date,omitempty"`

	MinVersion *string `json:"minVersion,omitempty" tf:"min_version,omitempty"`

	PatchVersion *string `json:"patchVersion,omitempty" tf:"patch_version,omitempty"`

	Product *string `json:"product,omitempty" tf:"product,omitempty"`

	ProductName *string `json:"productName,omitempty" tf:"product_name,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type BuildObservation struct {
	BuildNo *string `json:"buildNo,omitempty" tf:"build_no,omitempty"`

	Date *string `json:"date,omitempty" tf:"date,omitempty"`

	MinVersion *string `json:"minVersion,omitempty" tf:"min_version,omitempty"`

	PatchVersion *string `json:"patchVersion,omitempty" tf:"patch_version,omitempty"`

	Product *string `json:"product,omitempty" tf:"product,omitempty"`

	ProductName *string `json:"productName,omitempty" tf:"product_name,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type BuildParameters struct {

	// +kubebuilder:validation:Optional
	BuildNo *string `json:"buildNo,omitempty" tf:"build_no,omitempty"`

	// +kubebuilder:validation:Optional
	Date *string `json:"date,omitempty" tf:"date,omitempty"`

	// +kubebuilder:validation:Optional
	MinVersion *string `json:"minVersion,omitempty" tf:"min_version,omitempty"`

	// +kubebuilder:validation:Optional
	PatchVersion *string `json:"patchVersion,omitempty" tf:"patch_version,omitempty"`

	// +kubebuilder:validation:Optional
	Product *string `json:"product,omitempty" tf:"product,omitempty"`

	// +kubebuilder:validation:Optional
	ProductName *string `json:"productName,omitempty" tf:"product_name,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type CloudDataValuesInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type CloudDataValuesObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type CloudDataValuesParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type CloudInfoValuesInitParameters struct {
	CloudDataValues []CloudDataValuesInitParameters `json:"cloudDataValues,omitempty" tf:"cloud_data_values,omitempty"`

	CloudName *string `json:"cloudName,omitempty" tf:"cloud_name,omitempty"`
}

type CloudInfoValuesObservation struct {
	CloudDataValues []CloudDataValuesObservation `json:"cloudDataValues,omitempty" tf:"cloud_data_values,omitempty"`

	CloudName *string `json:"cloudName,omitempty" tf:"cloud_name,omitempty"`
}

type CloudInfoValuesParameters struct {

	// +kubebuilder:validation:Optional
	CloudDataValues []CloudDataValuesParameters `json:"cloudDataValues,omitempty" tf:"cloud_data_values,omitempty"`

	// +kubebuilder:validation:Optional
	CloudName *string `json:"cloudName,omitempty" tf:"cloud_name,omitempty"`
}

type ControllerInfoInitParameters struct {
	Build []BuildInitParameters `json:"build,omitempty" tf:"build,omitempty"`

	Hash *string `json:"hash,omitempty" tf:"hash,omitempty"`

	Patch []PatchInitParameters `json:"patch,omitempty" tf:"patch,omitempty"`

	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type ControllerInfoObservation struct {
	Build []BuildObservation `json:"build,omitempty" tf:"build,omitempty"`

	Hash *string `json:"hash,omitempty" tf:"hash,omitempty"`

	Patch []PatchObservation `json:"patch,omitempty" tf:"patch,omitempty"`

	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type ControllerInfoParameters struct {

	// +kubebuilder:validation:Optional
	Build []BuildParameters `json:"build,omitempty" tf:"build,omitempty"`

	// +kubebuilder:validation:Optional
	Hash *string `json:"hash,omitempty" tf:"hash,omitempty"`

	// +kubebuilder:validation:Optional
	Patch []PatchParameters `json:"patch,omitempty" tf:"patch,omitempty"`

	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type EventsInitParameters struct {
	NodesEvents []NodesEventsInitParameters `json:"nodesEvents,omitempty" tf:"nodes_events,omitempty"`

	SubEvents []SubEventsInitParameters `json:"subEvents,omitempty" tf:"sub_events,omitempty"`

	TaskName *string `json:"taskName,omitempty" tf:"task_name,omitempty"`
}

type EventsObservation struct {
	NodesEvents []NodesEventsObservation `json:"nodesEvents,omitempty" tf:"nodes_events,omitempty"`

	SubEvents []SubEventsObservation `json:"subEvents,omitempty" tf:"sub_events,omitempty"`

	TaskName *string `json:"taskName,omitempty" tf:"task_name,omitempty"`
}

type EventsParameters struct {

	// +kubebuilder:validation:Optional
	NodesEvents []NodesEventsParameters `json:"nodesEvents,omitempty" tf:"nodes_events,omitempty"`

	// +kubebuilder:validation:Optional
	SubEvents []SubEventsParameters `json:"subEvents,omitempty" tf:"sub_events,omitempty"`

	// +kubebuilder:validation:Optional
	TaskName *string `json:"taskName,omitempty" tf:"task_name,omitempty"`
}

type ImageInitParameters struct {
	CloudInfoValues []CloudInfoValuesInitParameters `json:"cloudInfoValues,omitempty" tf:"cloud_info_values,omitempty"`

	ControllerInfo []ControllerInfoInitParameters `json:"controllerInfo,omitempty" tf:"controller_info,omitempty"`

	ControllerPatchName *string `json:"controllerPatchName,omitempty" tf:"controller_patch_name,omitempty"`

	ControllerPatchRef *string `json:"controllerPatchRef,omitempty" tf:"controller_patch_ref,omitempty"`

	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	Events []EventsInitParameters `json:"events,omitempty" tf:"events,omitempty"`

	ImgState []ImgStateInitParameters `json:"imgState,omitempty" tf:"img_state,omitempty"`

	Migrations []MigrationsInitParameters `json:"migrations,omitempty" tf:"migrations,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Progress *string `json:"progress,omitempty" tf:"progress,omitempty"`

	SeInfo []SeInfoInitParameters `json:"seInfo,omitempty" tf:"se_info,omitempty"`

	SePatchName *string `json:"sePatchName,omitempty" tf:"se_patch_name,omitempty"`

	SePatchRef *string `json:"sePatchRef,omitempty" tf:"se_patch_ref,omitempty"`

	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	TasksCompleted *string `json:"tasksCompleted,omitempty" tf:"tasks_completed,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	TotalTasks *string `json:"totalTasks,omitempty" tf:"total_tasks,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	UberBundle *string `json:"uberBundle,omitempty" tf:"uber_bundle,omitempty"`
}

type ImageObservation struct {
	CloudInfoValues []CloudInfoValuesObservation `json:"cloudInfoValues,omitempty" tf:"cloud_info_values,omitempty"`

	ControllerInfo []ControllerInfoObservation `json:"controllerInfo,omitempty" tf:"controller_info,omitempty"`

	ControllerPatchName *string `json:"controllerPatchName,omitempty" tf:"controller_patch_name,omitempty"`

	ControllerPatchRef *string `json:"controllerPatchRef,omitempty" tf:"controller_patch_ref,omitempty"`

	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	Events []EventsObservation `json:"events,omitempty" tf:"events,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ImgState []ImgStateObservation `json:"imgState,omitempty" tf:"img_state,omitempty"`

	Migrations []MigrationsObservation `json:"migrations,omitempty" tf:"migrations,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Progress *string `json:"progress,omitempty" tf:"progress,omitempty"`

	SeInfo []SeInfoObservation `json:"seInfo,omitempty" tf:"se_info,omitempty"`

	SePatchName *string `json:"sePatchName,omitempty" tf:"se_patch_name,omitempty"`

	SePatchRef *string `json:"sePatchRef,omitempty" tf:"se_patch_ref,omitempty"`

	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	TasksCompleted *string `json:"tasksCompleted,omitempty" tf:"tasks_completed,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	TotalTasks *string `json:"totalTasks,omitempty" tf:"total_tasks,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	UberBundle *string `json:"uberBundle,omitempty" tf:"uber_bundle,omitempty"`
}

type ImageParameters struct {

	// +kubebuilder:validation:Optional
	CloudInfoValues []CloudInfoValuesParameters `json:"cloudInfoValues,omitempty" tf:"cloud_info_values,omitempty"`

	// +kubebuilder:validation:Optional
	ControllerInfo []ControllerInfoParameters `json:"controllerInfo,omitempty" tf:"controller_info,omitempty"`

	// +kubebuilder:validation:Optional
	ControllerPatchName *string `json:"controllerPatchName,omitempty" tf:"controller_patch_name,omitempty"`

	// +kubebuilder:validation:Optional
	ControllerPatchRef *string `json:"controllerPatchRef,omitempty" tf:"controller_patch_ref,omitempty"`

	// +kubebuilder:validation:Optional
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	// +kubebuilder:validation:Optional
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// +kubebuilder:validation:Optional
	Events []EventsParameters `json:"events,omitempty" tf:"events,omitempty"`

	// +kubebuilder:validation:Optional
	ImgState []ImgStateParameters `json:"imgState,omitempty" tf:"img_state,omitempty"`

	// +kubebuilder:validation:Optional
	Migrations []MigrationsParameters `json:"migrations,omitempty" tf:"migrations,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Progress *string `json:"progress,omitempty" tf:"progress,omitempty"`

	// +kubebuilder:validation:Optional
	SeInfo []SeInfoParameters `json:"seInfo,omitempty" tf:"se_info,omitempty"`

	// +kubebuilder:validation:Optional
	SePatchName *string `json:"sePatchName,omitempty" tf:"se_patch_name,omitempty"`

	// +kubebuilder:validation:Optional
	SePatchRef *string `json:"sePatchRef,omitempty" tf:"se_patch_ref,omitempty"`

	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// +kubebuilder:validation:Optional
	TasksCompleted *string `json:"tasksCompleted,omitempty" tf:"tasks_completed,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	TotalTasks *string `json:"totalTasks,omitempty" tf:"total_tasks,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// +kubebuilder:validation:Optional
	UberBundle *string `json:"uberBundle,omitempty" tf:"uber_bundle,omitempty"`
}

type ImgStateInitParameters struct {
	LastChangedTime []LastChangedTimeInitParameters `json:"lastChangedTime,omitempty" tf:"last_changed_time,omitempty"`

	Reason *string `json:"reason,omitempty" tf:"reason,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type ImgStateObservation struct {
	LastChangedTime []LastChangedTimeObservation `json:"lastChangedTime,omitempty" tf:"last_changed_time,omitempty"`

	Reason *string `json:"reason,omitempty" tf:"reason,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type ImgStateParameters struct {

	// +kubebuilder:validation:Optional
	LastChangedTime []LastChangedTimeParameters `json:"lastChangedTime,omitempty" tf:"last_changed_time,omitempty"`

	// +kubebuilder:validation:Optional
	Reason *string `json:"reason,omitempty" tf:"reason,omitempty"`

	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type LastChangedTimeInitParameters struct {
	Secs *string `json:"secs,omitempty" tf:"secs,omitempty"`

	Usecs *string `json:"usecs,omitempty" tf:"usecs,omitempty"`
}

type LastChangedTimeObservation struct {
	Secs *string `json:"secs,omitempty" tf:"secs,omitempty"`

	Usecs *string `json:"usecs,omitempty" tf:"usecs,omitempty"`
}

type LastChangedTimeParameters struct {

	// +kubebuilder:validation:Optional
	Secs *string `json:"secs" tf:"secs,omitempty"`

	// +kubebuilder:validation:Optional
	Usecs *string `json:"usecs" tf:"usecs,omitempty"`
}

type MigrationsInitParameters struct {
	APIVersion *string `json:"apiVersion,omitempty" tf:"api_version,omitempty"`

	ControllerHostMinFreeDiskSize *string `json:"controllerHostMinFreeDiskSize,omitempty" tf:"controller_host_min_free_disk_size,omitempty"`

	ControllerMinCores *string `json:"controllerMinCores,omitempty" tf:"controller_min_cores,omitempty"`

	ControllerMinDockerVersion *string `json:"controllerMinDockerVersion,omitempty" tf:"controller_min_docker_version,omitempty"`

	ControllerMinFreeDiskSize *string `json:"controllerMinFreeDiskSize,omitempty" tf:"controller_min_free_disk_size,omitempty"`

	ControllerMinMemory *string `json:"controllerMinMemory,omitempty" tf:"controller_min_memory,omitempty"`

	ControllerMinTotalDisk *string `json:"controllerMinTotalDisk,omitempty" tf:"controller_min_total_disk,omitempty"`

	MaxActiveVersions *string `json:"maxActiveVersions,omitempty" tf:"max_active_versions,omitempty"`

	MinSupportedAPIVersion *string `json:"minSupportedApiVersion,omitempty" tf:"min_supported_api_version,omitempty"`

	PodmanControllerHostMinFreeDiskSize *string `json:"podmanControllerHostMinFreeDiskSize,omitempty" tf:"podman_controller_host_min_free_disk_size,omitempty"`

	PodmanSeHostMinFreeDiskSize *string `json:"podmanSeHostMinFreeDiskSize,omitempty" tf:"podman_se_host_min_free_disk_size,omitempty"`

	RollbackControllerDiskSpace *string `json:"rollbackControllerDiskSpace,omitempty" tf:"rollback_controller_disk_space,omitempty"`

	RollbackSeDiskSpace *string `json:"rollbackSeDiskSpace,omitempty" tf:"rollback_se_disk_space,omitempty"`

	SeHostMinFreeDiskSize *string `json:"seHostMinFreeDiskSize,omitempty" tf:"se_host_min_free_disk_size,omitempty"`

	SeMinCores *string `json:"seMinCores,omitempty" tf:"se_min_cores,omitempty"`

	SeMinFreeDiskSize *string `json:"seMinFreeDiskSize,omitempty" tf:"se_min_free_disk_size,omitempty"`

	SeMinMemory *string `json:"seMinMemory,omitempty" tf:"se_min_memory,omitempty"`

	SeMinTotalDisk *string `json:"seMinTotalDisk,omitempty" tf:"se_min_total_disk,omitempty"`

	Versions []*string `json:"versions,omitempty" tf:"versions,omitempty"`
}

type MigrationsObservation struct {
	APIVersion *string `json:"apiVersion,omitempty" tf:"api_version,omitempty"`

	ControllerHostMinFreeDiskSize *string `json:"controllerHostMinFreeDiskSize,omitempty" tf:"controller_host_min_free_disk_size,omitempty"`

	ControllerMinCores *string `json:"controllerMinCores,omitempty" tf:"controller_min_cores,omitempty"`

	ControllerMinDockerVersion *string `json:"controllerMinDockerVersion,omitempty" tf:"controller_min_docker_version,omitempty"`

	ControllerMinFreeDiskSize *string `json:"controllerMinFreeDiskSize,omitempty" tf:"controller_min_free_disk_size,omitempty"`

	ControllerMinMemory *string `json:"controllerMinMemory,omitempty" tf:"controller_min_memory,omitempty"`

	ControllerMinTotalDisk *string `json:"controllerMinTotalDisk,omitempty" tf:"controller_min_total_disk,omitempty"`

	MaxActiveVersions *string `json:"maxActiveVersions,omitempty" tf:"max_active_versions,omitempty"`

	MinSupportedAPIVersion *string `json:"minSupportedApiVersion,omitempty" tf:"min_supported_api_version,omitempty"`

	PodmanControllerHostMinFreeDiskSize *string `json:"podmanControllerHostMinFreeDiskSize,omitempty" tf:"podman_controller_host_min_free_disk_size,omitempty"`

	PodmanSeHostMinFreeDiskSize *string `json:"podmanSeHostMinFreeDiskSize,omitempty" tf:"podman_se_host_min_free_disk_size,omitempty"`

	RollbackControllerDiskSpace *string `json:"rollbackControllerDiskSpace,omitempty" tf:"rollback_controller_disk_space,omitempty"`

	RollbackSeDiskSpace *string `json:"rollbackSeDiskSpace,omitempty" tf:"rollback_se_disk_space,omitempty"`

	SeHostMinFreeDiskSize *string `json:"seHostMinFreeDiskSize,omitempty" tf:"se_host_min_free_disk_size,omitempty"`

	SeMinCores *string `json:"seMinCores,omitempty" tf:"se_min_cores,omitempty"`

	SeMinFreeDiskSize *string `json:"seMinFreeDiskSize,omitempty" tf:"se_min_free_disk_size,omitempty"`

	SeMinMemory *string `json:"seMinMemory,omitempty" tf:"se_min_memory,omitempty"`

	SeMinTotalDisk *string `json:"seMinTotalDisk,omitempty" tf:"se_min_total_disk,omitempty"`

	Versions []*string `json:"versions,omitempty" tf:"versions,omitempty"`
}

type MigrationsParameters struct {

	// +kubebuilder:validation:Optional
	APIVersion *string `json:"apiVersion,omitempty" tf:"api_version,omitempty"`

	// +kubebuilder:validation:Optional
	ControllerHostMinFreeDiskSize *string `json:"controllerHostMinFreeDiskSize,omitempty" tf:"controller_host_min_free_disk_size,omitempty"`

	// +kubebuilder:validation:Optional
	ControllerMinCores *string `json:"controllerMinCores,omitempty" tf:"controller_min_cores,omitempty"`

	// +kubebuilder:validation:Optional
	ControllerMinDockerVersion *string `json:"controllerMinDockerVersion,omitempty" tf:"controller_min_docker_version,omitempty"`

	// +kubebuilder:validation:Optional
	ControllerMinFreeDiskSize *string `json:"controllerMinFreeDiskSize,omitempty" tf:"controller_min_free_disk_size,omitempty"`

	// +kubebuilder:validation:Optional
	ControllerMinMemory *string `json:"controllerMinMemory,omitempty" tf:"controller_min_memory,omitempty"`

	// +kubebuilder:validation:Optional
	ControllerMinTotalDisk *string `json:"controllerMinTotalDisk,omitempty" tf:"controller_min_total_disk,omitempty"`

	// +kubebuilder:validation:Optional
	MaxActiveVersions *string `json:"maxActiveVersions,omitempty" tf:"max_active_versions,omitempty"`

	// +kubebuilder:validation:Optional
	MinSupportedAPIVersion *string `json:"minSupportedApiVersion,omitempty" tf:"min_supported_api_version,omitempty"`

	// +kubebuilder:validation:Optional
	PodmanControllerHostMinFreeDiskSize *string `json:"podmanControllerHostMinFreeDiskSize,omitempty" tf:"podman_controller_host_min_free_disk_size,omitempty"`

	// +kubebuilder:validation:Optional
	PodmanSeHostMinFreeDiskSize *string `json:"podmanSeHostMinFreeDiskSize,omitempty" tf:"podman_se_host_min_free_disk_size,omitempty"`

	// +kubebuilder:validation:Optional
	RollbackControllerDiskSpace *string `json:"rollbackControllerDiskSpace,omitempty" tf:"rollback_controller_disk_space,omitempty"`

	// +kubebuilder:validation:Optional
	RollbackSeDiskSpace *string `json:"rollbackSeDiskSpace,omitempty" tf:"rollback_se_disk_space,omitempty"`

	// +kubebuilder:validation:Optional
	SeHostMinFreeDiskSize *string `json:"seHostMinFreeDiskSize,omitempty" tf:"se_host_min_free_disk_size,omitempty"`

	// +kubebuilder:validation:Optional
	SeMinCores *string `json:"seMinCores,omitempty" tf:"se_min_cores,omitempty"`

	// +kubebuilder:validation:Optional
	SeMinFreeDiskSize *string `json:"seMinFreeDiskSize,omitempty" tf:"se_min_free_disk_size,omitempty"`

	// +kubebuilder:validation:Optional
	SeMinMemory *string `json:"seMinMemory,omitempty" tf:"se_min_memory,omitempty"`

	// +kubebuilder:validation:Optional
	SeMinTotalDisk *string `json:"seMinTotalDisk,omitempty" tf:"se_min_total_disk,omitempty"`

	// +kubebuilder:validation:Optional
	Versions []*string `json:"versions,omitempty" tf:"versions,omitempty"`
}

type NodesEventsIPInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NodesEventsIPObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NodesEventsIPParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type NodesEventsInitParameters struct {
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	IP []NodesEventsIPInitParameters `json:"ip,omitempty" tf:"ip,omitempty"`

	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	SubTasks []*string `json:"subTasks,omitempty" tf:"sub_tasks,omitempty"`
}

type NodesEventsObservation struct {
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	IP []NodesEventsIPObservation `json:"ip,omitempty" tf:"ip,omitempty"`

	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	SubTasks []*string `json:"subTasks,omitempty" tf:"sub_tasks,omitempty"`
}

type NodesEventsParameters struct {

	// +kubebuilder:validation:Optional
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	// +kubebuilder:validation:Optional
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// +kubebuilder:validation:Optional
	IP []NodesEventsIPParameters `json:"ip,omitempty" tf:"ip,omitempty"`

	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	SubTasks []*string `json:"subTasks,omitempty" tf:"sub_tasks,omitempty"`
}

type PatchInitParameters struct {
	PatchType *string `json:"patchType,omitempty" tf:"patch_type,omitempty"`

	Reboot *string `json:"reboot,omitempty" tf:"reboot,omitempty"`

	RebootList []RebootListInitParameters `json:"rebootList,omitempty" tf:"reboot_list,omitempty"`
}

type PatchObservation struct {
	PatchType *string `json:"patchType,omitempty" tf:"patch_type,omitempty"`

	Reboot *string `json:"reboot,omitempty" tf:"reboot,omitempty"`

	RebootList []RebootListObservation `json:"rebootList,omitempty" tf:"reboot_list,omitempty"`
}

type PatchParameters struct {

	// +kubebuilder:validation:Optional
	PatchType *string `json:"patchType,omitempty" tf:"patch_type,omitempty"`

	// +kubebuilder:validation:Optional
	Reboot *string `json:"reboot,omitempty" tf:"reboot,omitempty"`

	// +kubebuilder:validation:Optional
	RebootList []RebootListParameters `json:"rebootList,omitempty" tf:"reboot_list,omitempty"`
}

type PatchRebootListInitParameters struct {
	PatchVersion *string `json:"patchVersion,omitempty" tf:"patch_version,omitempty"`

	Reboot *string `json:"reboot,omitempty" tf:"reboot,omitempty"`
}

type PatchRebootListObservation struct {
	PatchVersion *string `json:"patchVersion,omitempty" tf:"patch_version,omitempty"`

	Reboot *string `json:"reboot,omitempty" tf:"reboot,omitempty"`
}

type PatchRebootListParameters struct {

	// +kubebuilder:validation:Optional
	PatchVersion *string `json:"patchVersion,omitempty" tf:"patch_version,omitempty"`

	// +kubebuilder:validation:Optional
	Reboot *string `json:"reboot,omitempty" tf:"reboot,omitempty"`
}

type RebootListInitParameters struct {
	PatchVersion *string `json:"patchVersion,omitempty" tf:"patch_version,omitempty"`

	Reboot *string `json:"reboot,omitempty" tf:"reboot,omitempty"`
}

type RebootListObservation struct {
	PatchVersion *string `json:"patchVersion,omitempty" tf:"patch_version,omitempty"`

	Reboot *string `json:"reboot,omitempty" tf:"reboot,omitempty"`
}

type RebootListParameters struct {

	// +kubebuilder:validation:Optional
	PatchVersion *string `json:"patchVersion,omitempty" tf:"patch_version,omitempty"`

	// +kubebuilder:validation:Optional
	Reboot *string `json:"reboot,omitempty" tf:"reboot,omitempty"`
}

type SeInfoBuildInitParameters struct {
	BuildNo *string `json:"buildNo,omitempty" tf:"build_no,omitempty"`

	Date *string `json:"date,omitempty" tf:"date,omitempty"`

	MinVersion *string `json:"minVersion,omitempty" tf:"min_version,omitempty"`

	PatchVersion *string `json:"patchVersion,omitempty" tf:"patch_version,omitempty"`

	Product *string `json:"product,omitempty" tf:"product,omitempty"`

	ProductName *string `json:"productName,omitempty" tf:"product_name,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type SeInfoBuildObservation struct {
	BuildNo *string `json:"buildNo,omitempty" tf:"build_no,omitempty"`

	Date *string `json:"date,omitempty" tf:"date,omitempty"`

	MinVersion *string `json:"minVersion,omitempty" tf:"min_version,omitempty"`

	PatchVersion *string `json:"patchVersion,omitempty" tf:"patch_version,omitempty"`

	Product *string `json:"product,omitempty" tf:"product,omitempty"`

	ProductName *string `json:"productName,omitempty" tf:"product_name,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type SeInfoBuildParameters struct {

	// +kubebuilder:validation:Optional
	BuildNo *string `json:"buildNo,omitempty" tf:"build_no,omitempty"`

	// +kubebuilder:validation:Optional
	Date *string `json:"date,omitempty" tf:"date,omitempty"`

	// +kubebuilder:validation:Optional
	MinVersion *string `json:"minVersion,omitempty" tf:"min_version,omitempty"`

	// +kubebuilder:validation:Optional
	PatchVersion *string `json:"patchVersion,omitempty" tf:"patch_version,omitempty"`

	// +kubebuilder:validation:Optional
	Product *string `json:"product,omitempty" tf:"product,omitempty"`

	// +kubebuilder:validation:Optional
	ProductName *string `json:"productName,omitempty" tf:"product_name,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type SeInfoInitParameters struct {
	Build []SeInfoBuildInitParameters `json:"build,omitempty" tf:"build,omitempty"`

	Hash *string `json:"hash,omitempty" tf:"hash,omitempty"`

	Patch []SeInfoPatchInitParameters `json:"patch,omitempty" tf:"patch,omitempty"`

	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type SeInfoObservation struct {
	Build []SeInfoBuildObservation `json:"build,omitempty" tf:"build,omitempty"`

	Hash *string `json:"hash,omitempty" tf:"hash,omitempty"`

	Patch []SeInfoPatchObservation `json:"patch,omitempty" tf:"patch,omitempty"`

	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type SeInfoParameters struct {

	// +kubebuilder:validation:Optional
	Build []SeInfoBuildParameters `json:"build,omitempty" tf:"build,omitempty"`

	// +kubebuilder:validation:Optional
	Hash *string `json:"hash,omitempty" tf:"hash,omitempty"`

	// +kubebuilder:validation:Optional
	Patch []SeInfoPatchParameters `json:"patch,omitempty" tf:"patch,omitempty"`

	// +kubebuilder:validation:Optional
	Path *string `json:"path,omitempty" tf:"path,omitempty"`
}

type SeInfoPatchInitParameters struct {
	PatchType *string `json:"patchType,omitempty" tf:"patch_type,omitempty"`

	Reboot *string `json:"reboot,omitempty" tf:"reboot,omitempty"`

	RebootList []PatchRebootListInitParameters `json:"rebootList,omitempty" tf:"reboot_list,omitempty"`
}

type SeInfoPatchObservation struct {
	PatchType *string `json:"patchType,omitempty" tf:"patch_type,omitempty"`

	Reboot *string `json:"reboot,omitempty" tf:"reboot,omitempty"`

	RebootList []PatchRebootListObservation `json:"rebootList,omitempty" tf:"reboot_list,omitempty"`
}

type SeInfoPatchParameters struct {

	// +kubebuilder:validation:Optional
	PatchType *string `json:"patchType,omitempty" tf:"patch_type,omitempty"`

	// +kubebuilder:validation:Optional
	Reboot *string `json:"reboot,omitempty" tf:"reboot,omitempty"`

	// +kubebuilder:validation:Optional
	RebootList []PatchRebootListParameters `json:"rebootList,omitempty" tf:"reboot_list,omitempty"`
}

type SubEventsIPInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SubEventsIPObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SubEventsIPParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type SubEventsInitParameters struct {
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	IP []SubEventsIPInitParameters `json:"ip,omitempty" tf:"ip,omitempty"`

	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	SubTasks []*string `json:"subTasks,omitempty" tf:"sub_tasks,omitempty"`
}

type SubEventsObservation struct {
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	IP []SubEventsIPObservation `json:"ip,omitempty" tf:"ip,omitempty"`

	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	SubTasks []*string `json:"subTasks,omitempty" tf:"sub_tasks,omitempty"`
}

type SubEventsParameters struct {

	// +kubebuilder:validation:Optional
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	// +kubebuilder:validation:Optional
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// +kubebuilder:validation:Optional
	IP []SubEventsIPParameters `json:"ip,omitempty" tf:"ip,omitempty"`

	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	SubTasks []*string `json:"subTasks,omitempty" tf:"sub_tasks,omitempty"`
}

// ImageSpec defines the desired state of Image
type ImageSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ImageParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ImageInitParameters `json:"initProvider,omitempty"`
}

// ImageStatus defines the observed state of Image.
type ImageStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ImageObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Image is the Schema for the Images API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type Image struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	Spec   ImageSpec   `json:"spec"`
	Status ImageStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ImageList contains a list of Images
type ImageList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Image `json:"items"`
}

// Repository type metadata.
var (
	Image_Kind             = "Image"
	Image_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Image_Kind}.String()
	Image_KindAPIVersion   = Image_Kind + "." + CRDGroupVersion.String()
	Image_GroupVersionKind = CRDGroupVersion.WithKind(Image_Kind)
)

func init() {
	SchemeBuilder.Register(&Image{}, &ImageList{})
}
