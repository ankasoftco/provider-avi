/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AttributeMatchInitParameters struct {
	Criteria *string `json:"criteria,omitempty" tf:"criteria,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type AttributeMatchObservation struct {
	Criteria *string `json:"criteria,omitempty" tf:"criteria,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type AttributeMatchParameters struct {

	// +kubebuilder:validation:Optional
	Criteria *string `json:"criteria" tf:"criteria,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type AuthMappingProfileConfigpbAttributesInitParameters struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type AuthMappingProfileConfigpbAttributesObservation struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type AuthMappingProfileConfigpbAttributesParameters struct {

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type AuthMappingProfileInitParameters struct {
	ConfigpbAttributes []AuthMappingProfileConfigpbAttributesInitParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	MappingRules []MappingRulesInitParameters `json:"mappingRules,omitempty" tf:"mapping_rules,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type AuthMappingProfileObservation struct {
	ConfigpbAttributes []AuthMappingProfileConfigpbAttributesObservation `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	MappingRules []MappingRulesObservation `json:"mappingRules,omitempty" tf:"mapping_rules,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type AuthMappingProfileParameters struct {

	// +kubebuilder:validation:Optional
	ConfigpbAttributes []AuthMappingProfileConfigpbAttributesParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	MappingRules []MappingRulesParameters `json:"mappingRules,omitempty" tf:"mapping_rules,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type GroupMatchInitParameters struct {
	Criteria *string `json:"criteria,omitempty" tf:"criteria,omitempty"`

	Groups []*string `json:"groups,omitempty" tf:"groups,omitempty"`
}

type GroupMatchObservation struct {
	Criteria *string `json:"criteria,omitempty" tf:"criteria,omitempty"`

	Groups []*string `json:"groups,omitempty" tf:"groups,omitempty"`
}

type GroupMatchParameters struct {

	// +kubebuilder:validation:Optional
	Criteria *string `json:"criteria" tf:"criteria,omitempty"`

	// +kubebuilder:validation:Optional
	Groups []*string `json:"groups,omitempty" tf:"groups,omitempty"`
}

type MappingRulesInitParameters struct {
	AssignPolicy *string `json:"assignPolicy,omitempty" tf:"assign_policy,omitempty"`

	AssignRole *string `json:"assignRole,omitempty" tf:"assign_role,omitempty"`

	AssignTenant *string `json:"assignTenant,omitempty" tf:"assign_tenant,omitempty"`

	AssignUserprofile *string `json:"assignUserprofile,omitempty" tf:"assign_userprofile,omitempty"`

	AttributeMatch []AttributeMatchInitParameters `json:"attributeMatch,omitempty" tf:"attribute_match,omitempty"`

	DefaultTenantRef *string `json:"defaultTenantRef,omitempty" tf:"default_tenant_ref,omitempty"`

	GroupMatch []GroupMatchInitParameters `json:"groupMatch,omitempty" tf:"group_match,omitempty"`

	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	IsSuperuser *string `json:"isSuperuser,omitempty" tf:"is_superuser,omitempty"`

	PolicyAttributeName *string `json:"policyAttributeName,omitempty" tf:"policy_attribute_name,omitempty"`

	RoleAttributeName *string `json:"roleAttributeName,omitempty" tf:"role_attribute_name,omitempty"`

	RoleRefs []*string `json:"roleRefs,omitempty" tf:"role_refs,omitempty"`

	TenantAttributeName *string `json:"tenantAttributeName,omitempty" tf:"tenant_attribute_name,omitempty"`

	TenantRefs []*string `json:"tenantRefs,omitempty" tf:"tenant_refs,omitempty"`

	UserprofileAttributeName *string `json:"userprofileAttributeName,omitempty" tf:"userprofile_attribute_name,omitempty"`

	UserprofileRef *string `json:"userprofileRef,omitempty" tf:"userprofile_ref,omitempty"`
}

type MappingRulesObservation struct {
	AssignPolicy *string `json:"assignPolicy,omitempty" tf:"assign_policy,omitempty"`

	AssignRole *string `json:"assignRole,omitempty" tf:"assign_role,omitempty"`

	AssignTenant *string `json:"assignTenant,omitempty" tf:"assign_tenant,omitempty"`

	AssignUserprofile *string `json:"assignUserprofile,omitempty" tf:"assign_userprofile,omitempty"`

	AttributeMatch []AttributeMatchObservation `json:"attributeMatch,omitempty" tf:"attribute_match,omitempty"`

	DefaultTenantRef *string `json:"defaultTenantRef,omitempty" tf:"default_tenant_ref,omitempty"`

	GroupMatch []GroupMatchObservation `json:"groupMatch,omitempty" tf:"group_match,omitempty"`

	Index *string `json:"index,omitempty" tf:"index,omitempty"`

	IsSuperuser *string `json:"isSuperuser,omitempty" tf:"is_superuser,omitempty"`

	PolicyAttributeName *string `json:"policyAttributeName,omitempty" tf:"policy_attribute_name,omitempty"`

	RoleAttributeName *string `json:"roleAttributeName,omitempty" tf:"role_attribute_name,omitempty"`

	RoleRefs []*string `json:"roleRefs,omitempty" tf:"role_refs,omitempty"`

	TenantAttributeName *string `json:"tenantAttributeName,omitempty" tf:"tenant_attribute_name,omitempty"`

	TenantRefs []*string `json:"tenantRefs,omitempty" tf:"tenant_refs,omitempty"`

	UserprofileAttributeName *string `json:"userprofileAttributeName,omitempty" tf:"userprofile_attribute_name,omitempty"`

	UserprofileRef *string `json:"userprofileRef,omitempty" tf:"userprofile_ref,omitempty"`
}

type MappingRulesParameters struct {

	// +kubebuilder:validation:Optional
	AssignPolicy *string `json:"assignPolicy,omitempty" tf:"assign_policy,omitempty"`

	// +kubebuilder:validation:Optional
	AssignRole *string `json:"assignRole,omitempty" tf:"assign_role,omitempty"`

	// +kubebuilder:validation:Optional
	AssignTenant *string `json:"assignTenant,omitempty" tf:"assign_tenant,omitempty"`

	// +kubebuilder:validation:Optional
	AssignUserprofile *string `json:"assignUserprofile,omitempty" tf:"assign_userprofile,omitempty"`

	// +kubebuilder:validation:Optional
	AttributeMatch []AttributeMatchParameters `json:"attributeMatch,omitempty" tf:"attribute_match,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultTenantRef *string `json:"defaultTenantRef,omitempty" tf:"default_tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	GroupMatch []GroupMatchParameters `json:"groupMatch,omitempty" tf:"group_match,omitempty"`

	// +kubebuilder:validation:Optional
	Index *string `json:"index" tf:"index,omitempty"`

	// +kubebuilder:validation:Optional
	IsSuperuser *string `json:"isSuperuser,omitempty" tf:"is_superuser,omitempty"`

	// +kubebuilder:validation:Optional
	PolicyAttributeName *string `json:"policyAttributeName,omitempty" tf:"policy_attribute_name,omitempty"`

	// +kubebuilder:validation:Optional
	RoleAttributeName *string `json:"roleAttributeName,omitempty" tf:"role_attribute_name,omitempty"`

	// +kubebuilder:validation:Optional
	RoleRefs []*string `json:"roleRefs,omitempty" tf:"role_refs,omitempty"`

	// +kubebuilder:validation:Optional
	TenantAttributeName *string `json:"tenantAttributeName,omitempty" tf:"tenant_attribute_name,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRefs []*string `json:"tenantRefs,omitempty" tf:"tenant_refs,omitempty"`

	// +kubebuilder:validation:Optional
	UserprofileAttributeName *string `json:"userprofileAttributeName,omitempty" tf:"userprofile_attribute_name,omitempty"`

	// +kubebuilder:validation:Optional
	UserprofileRef *string `json:"userprofileRef,omitempty" tf:"userprofile_ref,omitempty"`
}

// AuthMappingProfileSpec defines the desired state of AuthMappingProfile
type AuthMappingProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     AuthMappingProfileParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider AuthMappingProfileInitParameters `json:"initProvider,omitempty"`
}

// AuthMappingProfileStatus defines the observed state of AuthMappingProfile.
type AuthMappingProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        AuthMappingProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// AuthMappingProfile is the Schema for the AuthMappingProfiles API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type AuthMappingProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.mappingRules) || has(self.initProvider.mappingRules)",message="mappingRules is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || has(self.initProvider.type)",message="type is a required parameter"
	Spec   AuthMappingProfileSpec   `json:"spec"`
	Status AuthMappingProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// AuthMappingProfileList contains a list of AuthMappingProfiles
type AuthMappingProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []AuthMappingProfile `json:"items"`
}

// Repository type metadata.
var (
	AuthMappingProfile_Kind             = "AuthMappingProfile"
	AuthMappingProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: AuthMappingProfile_Kind}.String()
	AuthMappingProfile_KindAPIVersion   = AuthMappingProfile_Kind + "." + CRDGroupVersion.String()
	AuthMappingProfile_GroupVersionKind = CRDGroupVersion.WithKind(AuthMappingProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&AuthMappingProfile{}, &AuthMappingProfileList{})
}
