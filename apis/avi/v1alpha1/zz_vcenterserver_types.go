/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type VcenterServerConfigpbAttributesInitParameters struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type VcenterServerConfigpbAttributesObservation struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type VcenterServerConfigpbAttributesParameters struct {

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type VcenterServerContentLibInitParameters struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type VcenterServerContentLibObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type VcenterServerContentLibParameters struct {

	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type VcenterServerInitParameters struct {
	CloudRef *string `json:"cloudRef,omitempty" tf:"cloud_ref,omitempty"`

	ConfigpbAttributes []VcenterServerConfigpbAttributesInitParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	ContentLib []VcenterServerContentLibInitParameters `json:"contentLib,omitempty" tf:"content_lib,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	VcenterCredentialsRef *string `json:"vcenterCredentialsRef,omitempty" tf:"vcenter_credentials_ref,omitempty"`

	VcenterURL *string `json:"vcenterUrl,omitempty" tf:"vcenter_url,omitempty"`
}

type VcenterServerObservation struct {
	CloudRef *string `json:"cloudRef,omitempty" tf:"cloud_ref,omitempty"`

	ConfigpbAttributes []VcenterServerConfigpbAttributesObservation `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	ContentLib []VcenterServerContentLibObservation `json:"contentLib,omitempty" tf:"content_lib,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	VcenterCredentialsRef *string `json:"vcenterCredentialsRef,omitempty" tf:"vcenter_credentials_ref,omitempty"`

	VcenterURL *string `json:"vcenterUrl,omitempty" tf:"vcenter_url,omitempty"`
}

type VcenterServerParameters struct {

	// +kubebuilder:validation:Optional
	CloudRef *string `json:"cloudRef,omitempty" tf:"cloud_ref,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigpbAttributes []VcenterServerConfigpbAttributesParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	ContentLib []VcenterServerContentLibParameters `json:"contentLib,omitempty" tf:"content_lib,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// +kubebuilder:validation:Optional
	VcenterCredentialsRef *string `json:"vcenterCredentialsRef,omitempty" tf:"vcenter_credentials_ref,omitempty"`

	// +kubebuilder:validation:Optional
	VcenterURL *string `json:"vcenterUrl,omitempty" tf:"vcenter_url,omitempty"`
}

// VcenterServerSpec defines the desired state of VcenterServer
type VcenterServerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     VcenterServerParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider VcenterServerInitParameters `json:"initProvider,omitempty"`
}

// VcenterServerStatus defines the observed state of VcenterServer.
type VcenterServerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        VcenterServerObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// VcenterServer is the Schema for the VcenterServers API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type VcenterServer struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.contentLib) || has(self.initProvider.contentLib)",message="contentLib is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vcenterCredentialsRef) || has(self.initProvider.vcenterCredentialsRef)",message="vcenterCredentialsRef is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vcenterUrl) || has(self.initProvider.vcenterUrl)",message="vcenterUrl is a required parameter"
	Spec   VcenterServerSpec   `json:"spec"`
	Status VcenterServerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// VcenterServerList contains a list of VcenterServers
type VcenterServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []VcenterServer `json:"items"`
}

// Repository type metadata.
var (
	VcenterServer_Kind             = "VcenterServer"
	VcenterServer_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: VcenterServer_Kind}.String()
	VcenterServer_KindAPIVersion   = VcenterServer_Kind + "." + CRDGroupVersion.String()
	VcenterServer_GroupVersionKind = CRDGroupVersion.WithKind(VcenterServer_Kind)
)

func init() {
	SchemeBuilder.Register(&VcenterServer{}, &VcenterServerList{})
}
