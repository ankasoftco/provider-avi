/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AwsProfileInitParameters struct {
	EgressServiceSubnets []*string `json:"egressServiceSubnets,omitempty" tf:"egress_service_subnets,omitempty"`

	IAMAssumeRole *string `json:"iamAssumeRole,omitempty" tf:"iam_assume_role,omitempty"`

	PublishVipToPublicZone *string `json:"publishVipToPublicZone,omitempty" tf:"publish_vip_to_public_zone,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`

	UsableDomains []*string `json:"usableDomains,omitempty" tf:"usable_domains,omitempty"`

	UsableNetworkUuids []*string `json:"usableNetworkUuids,omitempty" tf:"usable_network_uuids,omitempty"`

	UseIAMRoles *string `json:"useIamRoles,omitempty" tf:"use_iam_roles,omitempty"`

	VPC *string `json:"vpc,omitempty" tf:"vpc,omitempty"`

	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	Zones []AwsProfileZonesInitParameters `json:"zones,omitempty" tf:"zones,omitempty"`
}

type AwsProfileObservation struct {
	EgressServiceSubnets []*string `json:"egressServiceSubnets,omitempty" tf:"egress_service_subnets,omitempty"`

	IAMAssumeRole *string `json:"iamAssumeRole,omitempty" tf:"iam_assume_role,omitempty"`

	PublishVipToPublicZone *string `json:"publishVipToPublicZone,omitempty" tf:"publish_vip_to_public_zone,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`

	UsableDomains []*string `json:"usableDomains,omitempty" tf:"usable_domains,omitempty"`

	UsableNetworkUuids []*string `json:"usableNetworkUuids,omitempty" tf:"usable_network_uuids,omitempty"`

	UseIAMRoles *string `json:"useIamRoles,omitempty" tf:"use_iam_roles,omitempty"`

	VPC *string `json:"vpc,omitempty" tf:"vpc,omitempty"`

	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	Zones []AwsProfileZonesObservation `json:"zones,omitempty" tf:"zones,omitempty"`
}

type AwsProfileParameters struct {

	// +kubebuilder:validation:Optional
	AccessKeyIDSecretRef *v1.SecretKeySelector `json:"accessKeyIdSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	EgressServiceSubnets []*string `json:"egressServiceSubnets,omitempty" tf:"egress_service_subnets,omitempty"`

	// +kubebuilder:validation:Optional
	IAMAssumeRole *string `json:"iamAssumeRole,omitempty" tf:"iam_assume_role,omitempty"`

	// +kubebuilder:validation:Optional
	PublishVipToPublicZone *string `json:"publishVipToPublicZone,omitempty" tf:"publish_vip_to_public_zone,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	SecretAccessKeySecretRef *v1.SecretKeySelector `json:"secretAccessKeySecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// +kubebuilder:validation:Optional
	UsableDomains []*string `json:"usableDomains,omitempty" tf:"usable_domains,omitempty"`

	// +kubebuilder:validation:Optional
	UsableNetworkUuids []*string `json:"usableNetworkUuids,omitempty" tf:"usable_network_uuids,omitempty"`

	// +kubebuilder:validation:Optional
	UseIAMRoles *string `json:"useIamRoles,omitempty" tf:"use_iam_roles,omitempty"`

	// +kubebuilder:validation:Optional
	VPC *string `json:"vpc,omitempty" tf:"vpc,omitempty"`

	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId" tf:"vpc_id,omitempty"`

	// +kubebuilder:validation:Optional
	Zones []AwsProfileZonesParameters `json:"zones,omitempty" tf:"zones,omitempty"`
}

type AwsProfileZonesInitParameters struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	UsableNetworkUuids []*string `json:"usableNetworkUuids,omitempty" tf:"usable_network_uuids,omitempty"`
}

type AwsProfileZonesObservation struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	UsableNetworkUuids []*string `json:"usableNetworkUuids,omitempty" tf:"usable_network_uuids,omitempty"`
}

type AwsProfileZonesParameters struct {

	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone" tf:"availability_zone,omitempty"`

	// +kubebuilder:validation:Optional
	UsableNetworkUuids []*string `json:"usableNetworkUuids,omitempty" tf:"usable_network_uuids,omitempty"`
}

type AzureProfileAzureServiceprincipalInitParameters struct {
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type AzureProfileAzureServiceprincipalObservation struct {
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type AzureProfileAzureServiceprincipalParameters struct {

	// +kubebuilder:validation:Optional
	ApplicationID *string `json:"applicationId,omitempty" tf:"application_id,omitempty"`

	// +kubebuilder:validation:Optional
	AuthenticationTokenSecretRef *v1.SecretKeySelector `json:"authenticationTokenSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	TenantID *string `json:"tenantId,omitempty" tf:"tenant_id,omitempty"`
}

type AzureProfileAzureUserpassInitParameters struct {
	TenantName *string `json:"tenantName,omitempty" tf:"tenant_name,omitempty"`

	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type AzureProfileAzureUserpassObservation struct {
	TenantName *string `json:"tenantName,omitempty" tf:"tenant_name,omitempty"`

	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type AzureProfileAzureUserpassParameters struct {

	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	TenantName *string `json:"tenantName,omitempty" tf:"tenant_name,omitempty"`

	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type AzureProfileInitParameters struct {
	AzureServiceprincipal []AzureProfileAzureServiceprincipalInitParameters `json:"azureServiceprincipal,omitempty" tf:"azure_serviceprincipal,omitempty"`

	AzureUserpass []AzureProfileAzureUserpassInitParameters `json:"azureUserpass,omitempty" tf:"azure_userpass,omitempty"`

	EgressServiceSubnets []*string `json:"egressServiceSubnets,omitempty" tf:"egress_service_subnets,omitempty"`

	ResourceGroup *string `json:"resourceGroup,omitempty" tf:"resource_group,omitempty"`

	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`

	UsableDomains []*string `json:"usableDomains,omitempty" tf:"usable_domains,omitempty"`

	UsableNetworkUuids []*string `json:"usableNetworkUuids,omitempty" tf:"usable_network_uuids,omitempty"`

	UseEnhancedHa *string `json:"useEnhancedHa,omitempty" tf:"use_enhanced_ha,omitempty"`

	UseStandardALB *string `json:"useStandardAlb,omitempty" tf:"use_standard_alb,omitempty"`

	VirtualNetworkIds []*string `json:"virtualNetworkIds,omitempty" tf:"virtual_network_ids,omitempty"`
}

type AzureProfileObservation struct {
	AzureServiceprincipal []AzureProfileAzureServiceprincipalObservation `json:"azureServiceprincipal,omitempty" tf:"azure_serviceprincipal,omitempty"`

	AzureUserpass []AzureProfileAzureUserpassObservation `json:"azureUserpass,omitempty" tf:"azure_userpass,omitempty"`

	EgressServiceSubnets []*string `json:"egressServiceSubnets,omitempty" tf:"egress_service_subnets,omitempty"`

	ResourceGroup *string `json:"resourceGroup,omitempty" tf:"resource_group,omitempty"`

	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`

	UsableDomains []*string `json:"usableDomains,omitempty" tf:"usable_domains,omitempty"`

	UsableNetworkUuids []*string `json:"usableNetworkUuids,omitempty" tf:"usable_network_uuids,omitempty"`

	UseEnhancedHa *string `json:"useEnhancedHa,omitempty" tf:"use_enhanced_ha,omitempty"`

	UseStandardALB *string `json:"useStandardAlb,omitempty" tf:"use_standard_alb,omitempty"`

	VirtualNetworkIds []*string `json:"virtualNetworkIds,omitempty" tf:"virtual_network_ids,omitempty"`
}

type AzureProfileParameters struct {

	// +kubebuilder:validation:Optional
	AzureServiceprincipal []AzureProfileAzureServiceprincipalParameters `json:"azureServiceprincipal,omitempty" tf:"azure_serviceprincipal,omitempty"`

	// +kubebuilder:validation:Optional
	AzureUserpass []AzureProfileAzureUserpassParameters `json:"azureUserpass,omitempty" tf:"azure_userpass,omitempty"`

	// +kubebuilder:validation:Optional
	EgressServiceSubnets []*string `json:"egressServiceSubnets,omitempty" tf:"egress_service_subnets,omitempty"`

	// +kubebuilder:validation:Optional
	ResourceGroup *string `json:"resourceGroup,omitempty" tf:"resource_group,omitempty"`

	// +kubebuilder:validation:Optional
	SubscriptionID *string `json:"subscriptionId,omitempty" tf:"subscription_id,omitempty"`

	// +kubebuilder:validation:Optional
	UsableDomains []*string `json:"usableDomains,omitempty" tf:"usable_domains,omitempty"`

	// +kubebuilder:validation:Optional
	UsableNetworkUuids []*string `json:"usableNetworkUuids,omitempty" tf:"usable_network_uuids,omitempty"`

	// +kubebuilder:validation:Optional
	UseEnhancedHa *string `json:"useEnhancedHa,omitempty" tf:"use_enhanced_ha,omitempty"`

	// +kubebuilder:validation:Optional
	UseStandardALB *string `json:"useStandardAlb,omitempty" tf:"use_standard_alb,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualNetworkIds []*string `json:"virtualNetworkIds,omitempty" tf:"virtual_network_ids,omitempty"`
}

type CustomProfileInitParameters struct {
	CustomIpamDNSProfileRef *string `json:"customIpamDnsProfileRef,omitempty" tf:"custom_ipam_dns_profile_ref,omitempty"`

	DynamicParams []DynamicParamsInitParameters `json:"dynamicParams,omitempty" tf:"dynamic_params,omitempty"`

	UsableAllocSubnets []UsableAllocSubnetsInitParameters `json:"usableAllocSubnets,omitempty" tf:"usable_alloc_subnets,omitempty"`

	UsableDomains []*string `json:"usableDomains,omitempty" tf:"usable_domains,omitempty"`
}

type CustomProfileObservation struct {
	CustomIpamDNSProfileRef *string `json:"customIpamDnsProfileRef,omitempty" tf:"custom_ipam_dns_profile_ref,omitempty"`

	DynamicParams []DynamicParamsObservation `json:"dynamicParams,omitempty" tf:"dynamic_params,omitempty"`

	UsableAllocSubnets []UsableAllocSubnetsObservation `json:"usableAllocSubnets,omitempty" tf:"usable_alloc_subnets,omitempty"`

	UsableDomains []*string `json:"usableDomains,omitempty" tf:"usable_domains,omitempty"`
}

type CustomProfileParameters struct {

	// +kubebuilder:validation:Optional
	CustomIpamDNSProfileRef *string `json:"customIpamDnsProfileRef,omitempty" tf:"custom_ipam_dns_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	DynamicParams []DynamicParamsParameters `json:"dynamicParams,omitempty" tf:"dynamic_params,omitempty"`

	// +kubebuilder:validation:Optional
	UsableAllocSubnets []UsableAllocSubnetsParameters `json:"usableAllocSubnets,omitempty" tf:"usable_alloc_subnets,omitempty"`

	// +kubebuilder:validation:Optional
	UsableDomains []*string `json:"usableDomains,omitempty" tf:"usable_domains,omitempty"`
}

type DNSServiceDomainInitParameters struct {
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	PassThrough *string `json:"passThrough,omitempty" tf:"pass_through,omitempty"`

	RecordTTL *string `json:"recordTtl,omitempty" tf:"record_ttl,omitempty"`
}

type DNSServiceDomainObservation struct {
	DomainName *string `json:"domainName,omitempty" tf:"domain_name,omitempty"`

	PassThrough *string `json:"passThrough,omitempty" tf:"pass_through,omitempty"`

	RecordTTL *string `json:"recordTtl,omitempty" tf:"record_ttl,omitempty"`
}

type DNSServiceDomainParameters struct {

	// +kubebuilder:validation:Optional
	DomainName *string `json:"domainName" tf:"domain_name,omitempty"`

	// +kubebuilder:validation:Optional
	PassThrough *string `json:"passThrough,omitempty" tf:"pass_through,omitempty"`

	// +kubebuilder:validation:Optional
	RecordTTL *string `json:"recordTtl,omitempty" tf:"record_ttl,omitempty"`
}

type DynamicParamsInitParameters struct {
	IsDynamic *string `json:"isDynamic,omitempty" tf:"is_dynamic,omitempty"`

	IsSensitive *string `json:"isSensitive,omitempty" tf:"is_sensitive,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type DynamicParamsObservation struct {
	IsDynamic *string `json:"isDynamic,omitempty" tf:"is_dynamic,omitempty"`

	IsSensitive *string `json:"isSensitive,omitempty" tf:"is_sensitive,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type DynamicParamsParameters struct {

	// +kubebuilder:validation:Optional
	IsDynamic *string `json:"isDynamic,omitempty" tf:"is_dynamic,omitempty"`

	// +kubebuilder:validation:Optional
	IsSensitive *string `json:"isSensitive,omitempty" tf:"is_sensitive,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ExtensibleAttributesInitParameters struct {
	IsDynamic *string `json:"isDynamic,omitempty" tf:"is_dynamic,omitempty"`

	IsSensitive *string `json:"isSensitive,omitempty" tf:"is_sensitive,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ExtensibleAttributesObservation struct {
	IsDynamic *string `json:"isDynamic,omitempty" tf:"is_dynamic,omitempty"`

	IsSensitive *string `json:"isSensitive,omitempty" tf:"is_sensitive,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ExtensibleAttributesParameters struct {

	// +kubebuilder:validation:Optional
	IsDynamic *string `json:"isDynamic,omitempty" tf:"is_dynamic,omitempty"`

	// +kubebuilder:validation:Optional
	IsSensitive *string `json:"isSensitive,omitempty" tf:"is_sensitive,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type GCPProfileInitParameters struct {
	MatchSeGroupSubnet *string `json:"matchSeGroupSubnet,omitempty" tf:"match_se_group_subnet,omitempty"`

	NetworkHostProjectID *string `json:"networkHostProjectId,omitempty" tf:"network_host_project_id,omitempty"`

	RegionName *string `json:"regionName,omitempty" tf:"region_name,omitempty"`

	SeProjectID *string `json:"seProjectId,omitempty" tf:"se_project_id,omitempty"`

	UsableNetworkRefs []*string `json:"usableNetworkRefs,omitempty" tf:"usable_network_refs,omitempty"`

	UseGCPNetwork *string `json:"useGcpNetwork,omitempty" tf:"use_gcp_network,omitempty"`

	VPCNetworkName *string `json:"vpcNetworkName,omitempty" tf:"vpc_network_name,omitempty"`
}

type GCPProfileObservation struct {
	MatchSeGroupSubnet *string `json:"matchSeGroupSubnet,omitempty" tf:"match_se_group_subnet,omitempty"`

	NetworkHostProjectID *string `json:"networkHostProjectId,omitempty" tf:"network_host_project_id,omitempty"`

	RegionName *string `json:"regionName,omitempty" tf:"region_name,omitempty"`

	SeProjectID *string `json:"seProjectId,omitempty" tf:"se_project_id,omitempty"`

	UsableNetworkRefs []*string `json:"usableNetworkRefs,omitempty" tf:"usable_network_refs,omitempty"`

	UseGCPNetwork *string `json:"useGcpNetwork,omitempty" tf:"use_gcp_network,omitempty"`

	VPCNetworkName *string `json:"vpcNetworkName,omitempty" tf:"vpc_network_name,omitempty"`
}

type GCPProfileParameters struct {

	// +kubebuilder:validation:Optional
	MatchSeGroupSubnet *string `json:"matchSeGroupSubnet,omitempty" tf:"match_se_group_subnet,omitempty"`

	// +kubebuilder:validation:Optional
	NetworkHostProjectID *string `json:"networkHostProjectId,omitempty" tf:"network_host_project_id,omitempty"`

	// +kubebuilder:validation:Optional
	RegionName *string `json:"regionName,omitempty" tf:"region_name,omitempty"`

	// +kubebuilder:validation:Optional
	SeProjectID *string `json:"seProjectId,omitempty" tf:"se_project_id,omitempty"`

	// +kubebuilder:validation:Optional
	UsableNetworkRefs []*string `json:"usableNetworkRefs,omitempty" tf:"usable_network_refs,omitempty"`

	// +kubebuilder:validation:Optional
	UseGCPNetwork *string `json:"useGcpNetwork,omitempty" tf:"use_gcp_network,omitempty"`

	// +kubebuilder:validation:Optional
	VPCNetworkName *string `json:"vpcNetworkName,omitempty" tf:"vpc_network_name,omitempty"`
}

type InfobloxProfileIPAddressInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type InfobloxProfileIPAddressObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type InfobloxProfileIPAddressParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type InfobloxProfileInitParameters struct {
	DNSView *string `json:"dnsView,omitempty" tf:"dns_view,omitempty"`

	ExtensibleAttributes []ExtensibleAttributesInitParameters `json:"extensibleAttributes,omitempty" tf:"extensible_attributes,omitempty"`

	IPAddress []InfobloxProfileIPAddressInitParameters `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	NetworkView *string `json:"networkView,omitempty" tf:"network_view,omitempty"`

	UsableAllocSubnets []InfobloxProfileUsableAllocSubnetsInitParameters `json:"usableAllocSubnets,omitempty" tf:"usable_alloc_subnets,omitempty"`

	UsableDomains []*string `json:"usableDomains,omitempty" tf:"usable_domains,omitempty"`

	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	WapiVersion *string `json:"wapiVersion,omitempty" tf:"wapi_version,omitempty"`
}

type InfobloxProfileObservation struct {
	DNSView *string `json:"dnsView,omitempty" tf:"dns_view,omitempty"`

	ExtensibleAttributes []ExtensibleAttributesObservation `json:"extensibleAttributes,omitempty" tf:"extensible_attributes,omitempty"`

	IPAddress []InfobloxProfileIPAddressObservation `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	NetworkView *string `json:"networkView,omitempty" tf:"network_view,omitempty"`

	UsableAllocSubnets []InfobloxProfileUsableAllocSubnetsObservation `json:"usableAllocSubnets,omitempty" tf:"usable_alloc_subnets,omitempty"`

	UsableDomains []*string `json:"usableDomains,omitempty" tf:"usable_domains,omitempty"`

	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	WapiVersion *string `json:"wapiVersion,omitempty" tf:"wapi_version,omitempty"`
}

type InfobloxProfileParameters struct {

	// +kubebuilder:validation:Optional
	DNSView *string `json:"dnsView,omitempty" tf:"dns_view,omitempty"`

	// +kubebuilder:validation:Optional
	ExtensibleAttributes []ExtensibleAttributesParameters `json:"extensibleAttributes,omitempty" tf:"extensible_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	IPAddress []InfobloxProfileIPAddressParameters `json:"ipAddress" tf:"ip_address,omitempty"`

	// +kubebuilder:validation:Optional
	NetworkView *string `json:"networkView,omitempty" tf:"network_view,omitempty"`

	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// +kubebuilder:validation:Optional
	UsableAllocSubnets []InfobloxProfileUsableAllocSubnetsParameters `json:"usableAllocSubnets,omitempty" tf:"usable_alloc_subnets,omitempty"`

	// +kubebuilder:validation:Optional
	UsableDomains []*string `json:"usableDomains,omitempty" tf:"usable_domains,omitempty"`

	// +kubebuilder:validation:Optional
	Username *string `json:"username" tf:"username,omitempty"`

	// +kubebuilder:validation:Optional
	WapiVersion *string `json:"wapiVersion,omitempty" tf:"wapi_version,omitempty"`
}

type InfobloxProfileUsableAllocSubnetsInitParameters struct {
	Subnet []UsableAllocSubnetsSubnetInitParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	Subnet6 []UsableAllocSubnetsSubnet6InitParameters `json:"subnet6,omitempty" tf:"subnet6,omitempty"`
}

type InfobloxProfileUsableAllocSubnetsObservation struct {
	Subnet []UsableAllocSubnetsSubnetObservation `json:"subnet,omitempty" tf:"subnet,omitempty"`

	Subnet6 []UsableAllocSubnetsSubnet6Observation `json:"subnet6,omitempty" tf:"subnet6,omitempty"`
}

type InfobloxProfileUsableAllocSubnetsParameters struct {

	// +kubebuilder:validation:Optional
	Subnet []UsableAllocSubnetsSubnetParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet6 []UsableAllocSubnetsSubnet6Parameters `json:"subnet6,omitempty" tf:"subnet6,omitempty"`
}

type InternalProfileInitParameters struct {
	DNSServiceDomain []DNSServiceDomainInitParameters `json:"dnsServiceDomain,omitempty" tf:"dns_service_domain,omitempty"`

	DNSVirtualserviceRef *string `json:"dnsVirtualserviceRef,omitempty" tf:"dns_virtualservice_ref,omitempty"`

	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`

	UsableNetworks []UsableNetworksInitParameters `json:"usableNetworks,omitempty" tf:"usable_networks,omitempty"`
}

type InternalProfileObservation struct {
	DNSServiceDomain []DNSServiceDomainObservation `json:"dnsServiceDomain,omitempty" tf:"dns_service_domain,omitempty"`

	DNSVirtualserviceRef *string `json:"dnsVirtualserviceRef,omitempty" tf:"dns_virtualservice_ref,omitempty"`

	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`

	UsableNetworks []UsableNetworksObservation `json:"usableNetworks,omitempty" tf:"usable_networks,omitempty"`
}

type InternalProfileParameters struct {

	// +kubebuilder:validation:Optional
	DNSServiceDomain []DNSServiceDomainParameters `json:"dnsServiceDomain,omitempty" tf:"dns_service_domain,omitempty"`

	// +kubebuilder:validation:Optional
	DNSVirtualserviceRef *string `json:"dnsVirtualserviceRef,omitempty" tf:"dns_virtualservice_ref,omitempty"`

	// +kubebuilder:validation:Optional
	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// +kubebuilder:validation:Optional
	UsableNetworks []UsableNetworksParameters `json:"usableNetworks,omitempty" tf:"usable_networks,omitempty"`
}

type IpamDnsProviderProfileConfigpbAttributesInitParameters struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type IpamDnsProviderProfileConfigpbAttributesObservation struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type IpamDnsProviderProfileConfigpbAttributesParameters struct {

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type IpamDnsProviderProfileInitParameters struct {
	AllocateIPInVrf *string `json:"allocateIpInVrf,omitempty" tf:"allocate_ip_in_vrf,omitempty"`

	AwsProfile []AwsProfileInitParameters `json:"awsProfile,omitempty" tf:"aws_profile,omitempty"`

	AzureProfile []AzureProfileInitParameters `json:"azureProfile,omitempty" tf:"azure_profile,omitempty"`

	ConfigpbAttributes []IpamDnsProviderProfileConfigpbAttributesInitParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	CustomProfile []CustomProfileInitParameters `json:"customProfile,omitempty" tf:"custom_profile,omitempty"`

	GCPProfile []GCPProfileInitParameters `json:"gcpProfile,omitempty" tf:"gcp_profile,omitempty"`

	InfobloxProfile []InfobloxProfileInitParameters `json:"infobloxProfile,omitempty" tf:"infoblox_profile,omitempty"`

	InternalProfile []InternalProfileInitParameters `json:"internalProfile,omitempty" tf:"internal_profile,omitempty"`

	Markers []IpamDnsProviderProfileMarkersInitParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	OciProfile []OciProfileInitParameters `json:"ociProfile,omitempty" tf:"oci_profile,omitempty"`

	OpenstackProfile []OpenstackProfileInitParameters `json:"openstackProfile,omitempty" tf:"openstack_profile,omitempty"`

	ProxyConfiguration []IpamDnsProviderProfileProxyConfigurationInitParameters `json:"proxyConfiguration,omitempty" tf:"proxy_configuration,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	TencentProfile []TencentProfileInitParameters `json:"tencentProfile,omitempty" tf:"tencent_profile,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type IpamDnsProviderProfileMarkersInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type IpamDnsProviderProfileMarkersObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type IpamDnsProviderProfileMarkersParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type IpamDnsProviderProfileObservation struct {
	AllocateIPInVrf *string `json:"allocateIpInVrf,omitempty" tf:"allocate_ip_in_vrf,omitempty"`

	AwsProfile []AwsProfileObservation `json:"awsProfile,omitempty" tf:"aws_profile,omitempty"`

	AzureProfile []AzureProfileObservation `json:"azureProfile,omitempty" tf:"azure_profile,omitempty"`

	ConfigpbAttributes []IpamDnsProviderProfileConfigpbAttributesObservation `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	CustomProfile []CustomProfileObservation `json:"customProfile,omitempty" tf:"custom_profile,omitempty"`

	GCPProfile []GCPProfileObservation `json:"gcpProfile,omitempty" tf:"gcp_profile,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	InfobloxProfile []InfobloxProfileObservation `json:"infobloxProfile,omitempty" tf:"infoblox_profile,omitempty"`

	InternalProfile []InternalProfileObservation `json:"internalProfile,omitempty" tf:"internal_profile,omitempty"`

	Markers []IpamDnsProviderProfileMarkersObservation `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	OciProfile []OciProfileObservation `json:"ociProfile,omitempty" tf:"oci_profile,omitempty"`

	OpenstackProfile []OpenstackProfileObservation `json:"openstackProfile,omitempty" tf:"openstack_profile,omitempty"`

	ProxyConfiguration []IpamDnsProviderProfileProxyConfigurationObservation `json:"proxyConfiguration,omitempty" tf:"proxy_configuration,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	TencentProfile []TencentProfileObservation `json:"tencentProfile,omitempty" tf:"tencent_profile,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type IpamDnsProviderProfileParameters struct {

	// +kubebuilder:validation:Optional
	AllocateIPInVrf *string `json:"allocateIpInVrf,omitempty" tf:"allocate_ip_in_vrf,omitempty"`

	// +kubebuilder:validation:Optional
	AwsProfile []AwsProfileParameters `json:"awsProfile,omitempty" tf:"aws_profile,omitempty"`

	// +kubebuilder:validation:Optional
	AzureProfile []AzureProfileParameters `json:"azureProfile,omitempty" tf:"azure_profile,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigpbAttributes []IpamDnsProviderProfileConfigpbAttributesParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	CustomProfile []CustomProfileParameters `json:"customProfile,omitempty" tf:"custom_profile,omitempty"`

	// +kubebuilder:validation:Optional
	GCPProfile []GCPProfileParameters `json:"gcpProfile,omitempty" tf:"gcp_profile,omitempty"`

	// +kubebuilder:validation:Optional
	InfobloxProfile []InfobloxProfileParameters `json:"infobloxProfile,omitempty" tf:"infoblox_profile,omitempty"`

	// +kubebuilder:validation:Optional
	InternalProfile []InternalProfileParameters `json:"internalProfile,omitempty" tf:"internal_profile,omitempty"`

	// +kubebuilder:validation:Optional
	Markers []IpamDnsProviderProfileMarkersParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	OciProfile []OciProfileParameters `json:"ociProfile,omitempty" tf:"oci_profile,omitempty"`

	// +kubebuilder:validation:Optional
	OpenstackProfile []OpenstackProfileParameters `json:"openstackProfile,omitempty" tf:"openstack_profile,omitempty"`

	// +kubebuilder:validation:Optional
	ProxyConfiguration []IpamDnsProviderProfileProxyConfigurationParameters `json:"proxyConfiguration,omitempty" tf:"proxy_configuration,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	TencentProfile []TencentProfileParameters `json:"tencentProfile,omitempty" tf:"tencent_profile,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type IpamDnsProviderProfileProxyConfigurationInitParameters struct {
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type IpamDnsProviderProfileProxyConfigurationObservation struct {
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type IpamDnsProviderProfileProxyConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	Host *string `json:"host" tf:"host,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Port *string `json:"port" tf:"port,omitempty"`

	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type OciProfileInitParameters struct {
	CloudCredentialsRef *string `json:"cloudCredentialsRef,omitempty" tf:"cloud_credentials_ref,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	Tenancy *string `json:"tenancy,omitempty" tf:"tenancy,omitempty"`

	VcnCompartmentID *string `json:"vcnCompartmentId,omitempty" tf:"vcn_compartment_id,omitempty"`

	VcnID *string `json:"vcnId,omitempty" tf:"vcn_id,omitempty"`
}

type OciProfileObservation struct {
	CloudCredentialsRef *string `json:"cloudCredentialsRef,omitempty" tf:"cloud_credentials_ref,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	Tenancy *string `json:"tenancy,omitempty" tf:"tenancy,omitempty"`

	VcnCompartmentID *string `json:"vcnCompartmentId,omitempty" tf:"vcn_compartment_id,omitempty"`

	VcnID *string `json:"vcnId,omitempty" tf:"vcn_id,omitempty"`
}

type OciProfileParameters struct {

	// +kubebuilder:validation:Optional
	CloudCredentialsRef *string `json:"cloudCredentialsRef,omitempty" tf:"cloud_credentials_ref,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	Tenancy *string `json:"tenancy,omitempty" tf:"tenancy,omitempty"`

	// +kubebuilder:validation:Optional
	VcnCompartmentID *string `json:"vcnCompartmentId,omitempty" tf:"vcn_compartment_id,omitempty"`

	// +kubebuilder:validation:Optional
	VcnID *string `json:"vcnId,omitempty" tf:"vcn_id,omitempty"`
}

type OpenstackProfileInitParameters struct {
	KeystoneHost *string `json:"keystoneHost,omitempty" tf:"keystone_host,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	Tenant *string `json:"tenant,omitempty" tf:"tenant,omitempty"`

	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	VipNetworkName *string `json:"vipNetworkName,omitempty" tf:"vip_network_name,omitempty"`
}

type OpenstackProfileObservation struct {
	KeystoneHost *string `json:"keystoneHost,omitempty" tf:"keystone_host,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	Tenant *string `json:"tenant,omitempty" tf:"tenant,omitempty"`

	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	VipNetworkName *string `json:"vipNetworkName,omitempty" tf:"vip_network_name,omitempty"`
}

type OpenstackProfileParameters struct {

	// +kubebuilder:validation:Optional
	KeystoneHost *string `json:"keystoneHost,omitempty" tf:"keystone_host,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	Tenant *string `json:"tenant,omitempty" tf:"tenant,omitempty"`

	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`

	// +kubebuilder:validation:Optional
	VipNetworkName *string `json:"vipNetworkName,omitempty" tf:"vip_network_name,omitempty"`
}

type Subnet6IPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type Subnet6IPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type Subnet6IPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type Subnet6InitParameters struct {
	IPAddr []Subnet6IPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type Subnet6Observation struct {
	IPAddr []Subnet6IPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type Subnet6Parameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []Subnet6IPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type SubnetIPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SubnetIPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type SubnetIPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type SubnetInitParameters struct {
	IPAddr []SubnetIPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type SubnetObservation struct {
	IPAddr []SubnetIPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type SubnetParameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []SubnetIPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type TencentProfileInitParameters struct {
	CloudCredentialsRef *string `json:"cloudCredentialsRef,omitempty" tf:"cloud_credentials_ref,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	UsableSubnetIds []*string `json:"usableSubnetIds,omitempty" tf:"usable_subnet_ids,omitempty"`

	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	Zones []TencentProfileZonesInitParameters `json:"zones,omitempty" tf:"zones,omitempty"`
}

type TencentProfileObservation struct {
	CloudCredentialsRef *string `json:"cloudCredentialsRef,omitempty" tf:"cloud_credentials_ref,omitempty"`

	Region *string `json:"region,omitempty" tf:"region,omitempty"`

	UsableSubnetIds []*string `json:"usableSubnetIds,omitempty" tf:"usable_subnet_ids,omitempty"`

	VPCID *string `json:"vpcId,omitempty" tf:"vpc_id,omitempty"`

	Zones []TencentProfileZonesObservation `json:"zones,omitempty" tf:"zones,omitempty"`
}

type TencentProfileParameters struct {

	// +kubebuilder:validation:Optional
	CloudCredentialsRef *string `json:"cloudCredentialsRef,omitempty" tf:"cloud_credentials_ref,omitempty"`

	// +kubebuilder:validation:Optional
	Region *string `json:"region" tf:"region,omitempty"`

	// +kubebuilder:validation:Optional
	UsableSubnetIds []*string `json:"usableSubnetIds,omitempty" tf:"usable_subnet_ids,omitempty"`

	// +kubebuilder:validation:Optional
	VPCID *string `json:"vpcId" tf:"vpc_id,omitempty"`

	// +kubebuilder:validation:Optional
	Zones []TencentProfileZonesParameters `json:"zones,omitempty" tf:"zones,omitempty"`
}

type TencentProfileZonesInitParameters struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	UsableSubnetID *string `json:"usableSubnetId,omitempty" tf:"usable_subnet_id,omitempty"`
}

type TencentProfileZonesObservation struct {
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	UsableSubnetID *string `json:"usableSubnetId,omitempty" tf:"usable_subnet_id,omitempty"`
}

type TencentProfileZonesParameters struct {

	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone" tf:"availability_zone,omitempty"`

	// +kubebuilder:validation:Optional
	UsableSubnetID *string `json:"usableSubnetId" tf:"usable_subnet_id,omitempty"`
}

type UsableAllocSubnetsInitParameters struct {
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	Subnet []SubnetInitParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	Subnet6 []Subnet6InitParameters `json:"subnet6,omitempty" tf:"subnet6,omitempty"`
}

type UsableAllocSubnetsObservation struct {
	NetworkID *string `json:"networkId,omitempty" tf:"network_id,omitempty"`

	Subnet []SubnetObservation `json:"subnet,omitempty" tf:"subnet,omitempty"`

	Subnet6 []Subnet6Observation `json:"subnet6,omitempty" tf:"subnet6,omitempty"`
}

type UsableAllocSubnetsParameters struct {

	// +kubebuilder:validation:Optional
	NetworkID *string `json:"networkId" tf:"network_id,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet []SubnetParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet6 []Subnet6Parameters `json:"subnet6,omitempty" tf:"subnet6,omitempty"`
}

type UsableAllocSubnetsSubnet6IPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type UsableAllocSubnetsSubnet6IPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type UsableAllocSubnetsSubnet6IPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type UsableAllocSubnetsSubnet6InitParameters struct {
	IPAddr []UsableAllocSubnetsSubnet6IPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type UsableAllocSubnetsSubnet6Observation struct {
	IPAddr []UsableAllocSubnetsSubnet6IPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type UsableAllocSubnetsSubnet6Parameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []UsableAllocSubnetsSubnet6IPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type UsableAllocSubnetsSubnetIPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type UsableAllocSubnetsSubnetIPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type UsableAllocSubnetsSubnetIPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type UsableAllocSubnetsSubnetInitParameters struct {
	IPAddr []UsableAllocSubnetsSubnetIPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type UsableAllocSubnetsSubnetObservation struct {
	IPAddr []UsableAllocSubnetsSubnetIPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type UsableAllocSubnetsSubnetParameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []UsableAllocSubnetsSubnetIPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type UsableNetworksInitParameters struct {
	Labels []UsableNetworksLabelsInitParameters `json:"labels,omitempty" tf:"labels,omitempty"`

	NwRef *string `json:"nwRef,omitempty" tf:"nw_ref,omitempty"`
}

type UsableNetworksLabelsInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type UsableNetworksLabelsObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type UsableNetworksLabelsParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type UsableNetworksObservation struct {
	Labels []UsableNetworksLabelsObservation `json:"labels,omitempty" tf:"labels,omitempty"`

	NwRef *string `json:"nwRef,omitempty" tf:"nw_ref,omitempty"`
}

type UsableNetworksParameters struct {

	// +kubebuilder:validation:Optional
	Labels []UsableNetworksLabelsParameters `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Optional
	NwRef *string `json:"nwRef" tf:"nw_ref,omitempty"`
}

// IpamDnsProviderProfileSpec defines the desired state of IpamDnsProviderProfile
type IpamDnsProviderProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IpamDnsProviderProfileParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IpamDnsProviderProfileInitParameters `json:"initProvider,omitempty"`
}

// IpamDnsProviderProfileStatus defines the observed state of IpamDnsProviderProfile.
type IpamDnsProviderProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IpamDnsProviderProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IpamDnsProviderProfile is the Schema for the IpamDnsProviderProfiles API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type IpamDnsProviderProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || has(self.initProvider.type)",message="type is a required parameter"
	Spec   IpamDnsProviderProfileSpec   `json:"spec"`
	Status IpamDnsProviderProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IpamDnsProviderProfileList contains a list of IpamDnsProviderProfiles
type IpamDnsProviderProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IpamDnsProviderProfile `json:"items"`
}

// Repository type metadata.
var (
	IpamDnsProviderProfile_Kind             = "IpamDnsProviderProfile"
	IpamDnsProviderProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IpamDnsProviderProfile_Kind}.String()
	IpamDnsProviderProfile_KindAPIVersion   = IpamDnsProviderProfile_Kind + "." + CRDGroupVersion.String()
	IpamDnsProviderProfile_GroupVersionKind = CRDGroupVersion.WithKind(IpamDnsProviderProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&IpamDnsProviderProfile{}, &IpamDnsProviderProfileList{})
}
