/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type EquivalentLabelsInitParameters struct {
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`
}

type EquivalentLabelsObservation struct {
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`
}

type EquivalentLabelsParameters struct {

	// +kubebuilder:validation:Optional
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`
}

type PriorityLabelsConfigpbAttributesInitParameters struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type PriorityLabelsConfigpbAttributesObservation struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type PriorityLabelsConfigpbAttributesParameters struct {

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type PriorityLabelsInitParameters struct {
	CloudRef *string `json:"cloudRef,omitempty" tf:"cloud_ref,omitempty"`

	ConfigpbAttributes []PriorityLabelsConfigpbAttributesInitParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	EquivalentLabels []EquivalentLabelsInitParameters `json:"equivalentLabels,omitempty" tf:"equivalent_labels,omitempty"`

	Markers []PriorityLabelsMarkersInitParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type PriorityLabelsMarkersInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type PriorityLabelsMarkersObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type PriorityLabelsMarkersParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type PriorityLabelsObservation struct {
	CloudRef *string `json:"cloudRef,omitempty" tf:"cloud_ref,omitempty"`

	ConfigpbAttributes []PriorityLabelsConfigpbAttributesObservation `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	EquivalentLabels []EquivalentLabelsObservation `json:"equivalentLabels,omitempty" tf:"equivalent_labels,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Markers []PriorityLabelsMarkersObservation `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type PriorityLabelsParameters struct {

	// +kubebuilder:validation:Optional
	CloudRef *string `json:"cloudRef,omitempty" tf:"cloud_ref,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigpbAttributes []PriorityLabelsConfigpbAttributesParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	EquivalentLabels []EquivalentLabelsParameters `json:"equivalentLabels,omitempty" tf:"equivalent_labels,omitempty"`

	// +kubebuilder:validation:Optional
	Markers []PriorityLabelsMarkersParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

// PriorityLabelsSpec defines the desired state of PriorityLabels
type PriorityLabelsSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PriorityLabelsParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PriorityLabelsInitParameters `json:"initProvider,omitempty"`
}

// PriorityLabelsStatus defines the observed state of PriorityLabels.
type PriorityLabelsStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PriorityLabelsObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PriorityLabels is the Schema for the PriorityLabelss API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type PriorityLabels struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	Spec   PriorityLabelsSpec   `json:"spec"`
	Status PriorityLabelsStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PriorityLabelsList contains a list of PriorityLabelss
type PriorityLabelsList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PriorityLabels `json:"items"`
}

// Repository type metadata.
var (
	PriorityLabels_Kind             = "PriorityLabels"
	PriorityLabels_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PriorityLabels_Kind}.String()
	PriorityLabels_KindAPIVersion   = PriorityLabels_Kind + "." + CRDGroupVersion.String()
	PriorityLabels_GroupVersionKind = CRDGroupVersion.WithKind(PriorityLabels_Kind)
)

func init() {
	SchemeBuilder.Register(&PriorityLabels{}, &PriorityLabelsList{})
}
