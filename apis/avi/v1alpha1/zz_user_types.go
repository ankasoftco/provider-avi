/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AccessInitParameters struct {
	AllTenants *string `json:"allTenants,omitempty" tf:"all_tenants,omitempty"`

	RoleRef *string `json:"roleRef,omitempty" tf:"role_ref,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`
}

type AccessObservation struct {
	AllTenants *string `json:"allTenants,omitempty" tf:"all_tenants,omitempty"`

	RoleRef *string `json:"roleRef,omitempty" tf:"role_ref,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`
}

type AccessParameters struct {

	// +kubebuilder:validation:Optional
	AllTenants *string `json:"allTenants,omitempty" tf:"all_tenants,omitempty"`

	// +kubebuilder:validation:Optional
	RoleRef *string `json:"roleRef,omitempty" tf:"role_ref,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`
}

type UserInitParameters_2 struct {
	Access []AccessInitParameters `json:"access,omitempty" tf:"access,omitempty"`

	DefaultTenantRef *string `json:"defaultTenantRef,omitempty" tf:"default_tenant_ref,omitempty"`

	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	FullName *string `json:"fullName,omitempty" tf:"full_name,omitempty"`

	IsSuperuser *string `json:"isSuperuser,omitempty" tf:"is_superuser,omitempty"`

	Local *string `json:"local,omitempty" tf:"local,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	UserProfileRef *string `json:"userProfileRef,omitempty" tf:"user_profile_ref,omitempty"`

	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type UserObservation_2 struct {
	Access []AccessObservation `json:"access,omitempty" tf:"access,omitempty"`

	DefaultTenantRef *string `json:"defaultTenantRef,omitempty" tf:"default_tenant_ref,omitempty"`

	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	FullName *string `json:"fullName,omitempty" tf:"full_name,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IsSuperuser *string `json:"isSuperuser,omitempty" tf:"is_superuser,omitempty"`

	Local *string `json:"local,omitempty" tf:"local,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	UserProfileRef *string `json:"userProfileRef,omitempty" tf:"user_profile_ref,omitempty"`

	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type UserParameters_2 struct {

	// +kubebuilder:validation:Optional
	Access []AccessParameters `json:"access,omitempty" tf:"access,omitempty"`

	// +kubebuilder:validation:Optional
	DefaultTenantRef *string `json:"defaultTenantRef,omitempty" tf:"default_tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	// +kubebuilder:validation:Optional
	FullName *string `json:"fullName,omitempty" tf:"full_name,omitempty"`

	// +kubebuilder:validation:Optional
	IsSuperuser *string `json:"isSuperuser,omitempty" tf:"is_superuser,omitempty"`

	// +kubebuilder:validation:Optional
	Local *string `json:"local,omitempty" tf:"local,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// +kubebuilder:validation:Optional
	UserProfileRef *string `json:"userProfileRef,omitempty" tf:"user_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

// UserSpec defines the desired state of User
type UserSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     UserParameters_2 `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider UserInitParameters_2 `json:"initProvider,omitempty"`
}

// UserStatus defines the observed state of User.
type UserStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        UserObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// User is the Schema for the Users API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type User struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	Spec   UserSpec   `json:"spec"`
	Status UserStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// UserList contains a list of Users
type UserList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []User `json:"items"`
}

// Repository type metadata.
var (
	User_Kind             = "User"
	User_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: User_Kind}.String()
	User_KindAPIVersion   = User_Kind + "." + CRDGroupVersion.String()
	User_GroupVersionKind = CRDGroupVersion.WithKind(User_Kind)
)

func init() {
	SchemeBuilder.Register(&User{}, &UserList{})
}
