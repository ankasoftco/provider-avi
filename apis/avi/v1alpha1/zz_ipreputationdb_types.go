/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type IPReputationDBConfigpbAttributesInitParameters struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type IPReputationDBConfigpbAttributesObservation struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type IPReputationDBConfigpbAttributesParameters struct {

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type IPReputationDBInitParameters struct {
	BaseFileRefs []*string `json:"baseFileRefs,omitempty" tf:"base_file_refs,omitempty"`

	ConfigpbAttributes []IPReputationDBConfigpbAttributesInitParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	IncrementalFileRefs []*string `json:"incrementalFileRefs,omitempty" tf:"incremental_file_refs,omitempty"`

	Markers []IPReputationDBMarkersInitParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	ServiceStatus []ServiceStatusInitParameters `json:"serviceStatus,omitempty" tf:"service_status,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	Vendor *string `json:"vendor,omitempty" tf:"vendor,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type IPReputationDBMarkersInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type IPReputationDBMarkersObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type IPReputationDBMarkersParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type IPReputationDBObservation struct {
	BaseFileRefs []*string `json:"baseFileRefs,omitempty" tf:"base_file_refs,omitempty"`

	ConfigpbAttributes []IPReputationDBConfigpbAttributesObservation `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IncrementalFileRefs []*string `json:"incrementalFileRefs,omitempty" tf:"incremental_file_refs,omitempty"`

	Markers []IPReputationDBMarkersObservation `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	ServiceStatus []ServiceStatusObservation `json:"serviceStatus,omitempty" tf:"service_status,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	Vendor *string `json:"vendor,omitempty" tf:"vendor,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type IPReputationDBParameters struct {

	// +kubebuilder:validation:Optional
	BaseFileRefs []*string `json:"baseFileRefs,omitempty" tf:"base_file_refs,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigpbAttributes []IPReputationDBConfigpbAttributesParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	IncrementalFileRefs []*string `json:"incrementalFileRefs,omitempty" tf:"incremental_file_refs,omitempty"`

	// +kubebuilder:validation:Optional
	Markers []IPReputationDBMarkersParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceStatus []ServiceStatusParameters `json:"serviceStatus,omitempty" tf:"service_status,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// +kubebuilder:validation:Optional
	Vendor *string `json:"vendor,omitempty" tf:"vendor,omitempty"`

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type LastSuccessfulUpdateCheckInitParameters struct {
	Secs *string `json:"secs,omitempty" tf:"secs,omitempty"`

	Usecs *string `json:"usecs,omitempty" tf:"usecs,omitempty"`
}

type LastSuccessfulUpdateCheckObservation struct {
	Secs *string `json:"secs,omitempty" tf:"secs,omitempty"`

	Usecs *string `json:"usecs,omitempty" tf:"usecs,omitempty"`
}

type LastSuccessfulUpdateCheckParameters struct {

	// +kubebuilder:validation:Optional
	Secs *string `json:"secs" tf:"secs,omitempty"`

	// +kubebuilder:validation:Optional
	Usecs *string `json:"usecs" tf:"usecs,omitempty"`
}

type ServiceStatusInitParameters struct {
	Error *string `json:"error,omitempty" tf:"error,omitempty"`

	LastSuccessfulUpdateCheck []LastSuccessfulUpdateCheckInitParameters `json:"lastSuccessfulUpdateCheck,omitempty" tf:"last_successful_update_check,omitempty"`
}

type ServiceStatusObservation struct {
	Error *string `json:"error,omitempty" tf:"error,omitempty"`

	LastSuccessfulUpdateCheck []LastSuccessfulUpdateCheckObservation `json:"lastSuccessfulUpdateCheck,omitempty" tf:"last_successful_update_check,omitempty"`
}

type ServiceStatusParameters struct {

	// +kubebuilder:validation:Optional
	Error *string `json:"error,omitempty" tf:"error,omitempty"`

	// +kubebuilder:validation:Optional
	LastSuccessfulUpdateCheck []LastSuccessfulUpdateCheckParameters `json:"lastSuccessfulUpdateCheck,omitempty" tf:"last_successful_update_check,omitempty"`
}

// IPReputationDBSpec defines the desired state of IPReputationDB
type IPReputationDBSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     IPReputationDBParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider IPReputationDBInitParameters `json:"initProvider,omitempty"`
}

// IPReputationDBStatus defines the observed state of IPReputationDB.
type IPReputationDBStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        IPReputationDBObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// IPReputationDB is the Schema for the IPReputationDBs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type IPReputationDB struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.vendor) || has(self.initProvider.vendor)",message="vendor is a required parameter"
	Spec   IPReputationDBSpec   `json:"spec"`
	Status IPReputationDBStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// IPReputationDBList contains a list of IPReputationDBs
type IPReputationDBList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []IPReputationDB `json:"items"`
}

// Repository type metadata.
var (
	IPReputationDB_Kind             = "IPReputationDB"
	IPReputationDB_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: IPReputationDB_Kind}.String()
	IPReputationDB_KindAPIVersion   = IPReputationDB_Kind + "." + CRDGroupVersion.String()
	IPReputationDB_GroupVersionKind = CRDGroupVersion.WithKind(IPReputationDB_Kind)
)

func init() {
	SchemeBuilder.Register(&IPReputationDB{}, &IPReputationDBList{})
}
