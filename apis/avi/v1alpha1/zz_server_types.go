/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ServerDiscoveredNetworksInitParameters struct {
	NetworkRef *string `json:"networkRef,omitempty" tf:"network_ref,omitempty"`

	Subnet []ServerDiscoveredNetworksSubnetInitParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	Subnet6 []ServerDiscoveredNetworksSubnet6InitParameters `json:"subnet6,omitempty" tf:"subnet6,omitempty"`
}

type ServerDiscoveredNetworksObservation struct {
	NetworkRef *string `json:"networkRef,omitempty" tf:"network_ref,omitempty"`

	Subnet []ServerDiscoveredNetworksSubnetObservation `json:"subnet,omitempty" tf:"subnet,omitempty"`

	Subnet6 []ServerDiscoveredNetworksSubnet6Observation `json:"subnet6,omitempty" tf:"subnet6,omitempty"`
}

type ServerDiscoveredNetworksParameters struct {

	// +kubebuilder:validation:Optional
	NetworkRef *string `json:"networkRef" tf:"network_ref,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet []ServerDiscoveredNetworksSubnetParameters `json:"subnet,omitempty" tf:"subnet,omitempty"`

	// +kubebuilder:validation:Optional
	Subnet6 []ServerDiscoveredNetworksSubnet6Parameters `json:"subnet6,omitempty" tf:"subnet6,omitempty"`
}

type ServerDiscoveredNetworksSubnet6IPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ServerDiscoveredNetworksSubnet6IPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ServerDiscoveredNetworksSubnet6IPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type ServerDiscoveredNetworksSubnet6InitParameters struct {
	IPAddr []ServerDiscoveredNetworksSubnet6IPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type ServerDiscoveredNetworksSubnet6Observation struct {
	IPAddr []ServerDiscoveredNetworksSubnet6IPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type ServerDiscoveredNetworksSubnet6Parameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []ServerDiscoveredNetworksSubnet6IPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type ServerDiscoveredNetworksSubnetIPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ServerDiscoveredNetworksSubnetIPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ServerDiscoveredNetworksSubnetIPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type ServerDiscoveredNetworksSubnetInitParameters struct {
	IPAddr []ServerDiscoveredNetworksSubnetIPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type ServerDiscoveredNetworksSubnetObservation struct {
	IPAddr []ServerDiscoveredNetworksSubnetIPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type ServerDiscoveredNetworksSubnetParameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []ServerDiscoveredNetworksSubnetIPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type ServerInitParameters_2 struct {
	AutoscalingGroupName *string `json:"autoscalingGroupName,omitempty" tf:"autoscaling_group_name,omitempty"`

	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	DiscoveredNetworks []ServerDiscoveredNetworksInitParameters `json:"discoveredNetworks,omitempty" tf:"discovered_networks,omitempty"`

	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ExternalOrchestrationID *string `json:"externalOrchestrationId,omitempty" tf:"external_orchestration_id,omitempty"`

	ExternalUUID *string `json:"externalUuid,omitempty" tf:"external_uuid,omitempty"`

	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	Location []ServerLocationInitParameters `json:"location,omitempty" tf:"location,omitempty"`

	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	NwRef *string `json:"nwRef,omitempty" tf:"nw_ref,omitempty"`

	PoolRef *string `json:"poolRef,omitempty" tf:"pool_ref,omitempty"`

	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	PreferenceOrder *string `json:"preferenceOrder,omitempty" tf:"preference_order,omitempty"`

	PrstHdrVal *string `json:"prstHdrVal,omitempty" tf:"prst_hdr_val,omitempty"`

	Ratio *string `json:"ratio,omitempty" tf:"ratio,omitempty"`

	ResolveServerByDNS *string `json:"resolveServerByDns,omitempty" tf:"resolve_server_by_dns,omitempty"`

	RewriteHostHeader *string `json:"rewriteHostHeader,omitempty" tf:"rewrite_host_header,omitempty"`

	ServerNode *string `json:"serverNode,omitempty" tf:"server_node,omitempty"`

	Static *string `json:"static,omitempty" tf:"static,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	VMRef *string `json:"vmRef,omitempty" tf:"vm_ref,omitempty"`

	VerifyNetwork *string `json:"verifyNetwork,omitempty" tf:"verify_network,omitempty"`
}

type ServerLocationInitParameters struct {
	Latitude *string `json:"latitude,omitempty" tf:"latitude,omitempty"`

	Longitude *string `json:"longitude,omitempty" tf:"longitude,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type ServerLocationObservation struct {
	Latitude *string `json:"latitude,omitempty" tf:"latitude,omitempty"`

	Longitude *string `json:"longitude,omitempty" tf:"longitude,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type ServerLocationParameters struct {

	// +kubebuilder:validation:Optional
	Latitude *string `json:"latitude,omitempty" tf:"latitude,omitempty"`

	// +kubebuilder:validation:Optional
	Longitude *string `json:"longitude,omitempty" tf:"longitude,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Tag *string `json:"tag,omitempty" tf:"tag,omitempty"`
}

type ServerObservation_2 struct {
	AutoscalingGroupName *string `json:"autoscalingGroupName,omitempty" tf:"autoscaling_group_name,omitempty"`

	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	DiscoveredNetworks []ServerDiscoveredNetworksObservation `json:"discoveredNetworks,omitempty" tf:"discovered_networks,omitempty"`

	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	ExternalOrchestrationID *string `json:"externalOrchestrationId,omitempty" tf:"external_orchestration_id,omitempty"`

	ExternalUUID *string `json:"externalUuid,omitempty" tf:"external_uuid,omitempty"`

	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	Location []ServerLocationObservation `json:"location,omitempty" tf:"location,omitempty"`

	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	NwRef *string `json:"nwRef,omitempty" tf:"nw_ref,omitempty"`

	PoolRef *string `json:"poolRef,omitempty" tf:"pool_ref,omitempty"`

	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	PreferenceOrder *string `json:"preferenceOrder,omitempty" tf:"preference_order,omitempty"`

	PrstHdrVal *string `json:"prstHdrVal,omitempty" tf:"prst_hdr_val,omitempty"`

	Ratio *string `json:"ratio,omitempty" tf:"ratio,omitempty"`

	ResolveServerByDNS *string `json:"resolveServerByDns,omitempty" tf:"resolve_server_by_dns,omitempty"`

	RewriteHostHeader *string `json:"rewriteHostHeader,omitempty" tf:"rewrite_host_header,omitempty"`

	ServerNode *string `json:"serverNode,omitempty" tf:"server_node,omitempty"`

	Static *string `json:"static,omitempty" tf:"static,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	VMRef *string `json:"vmRef,omitempty" tf:"vm_ref,omitempty"`

	VerifyNetwork *string `json:"verifyNetwork,omitempty" tf:"verify_network,omitempty"`
}

type ServerParameters_2 struct {

	// +kubebuilder:validation:Optional
	AutoscalingGroupName *string `json:"autoscalingGroupName,omitempty" tf:"autoscaling_group_name,omitempty"`

	// +kubebuilder:validation:Optional
	AvailabilityZone *string `json:"availabilityZone,omitempty" tf:"availability_zone,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	DiscoveredNetworks []ServerDiscoveredNetworksParameters `json:"discoveredNetworks,omitempty" tf:"discovered_networks,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	ExternalOrchestrationID *string `json:"externalOrchestrationId,omitempty" tf:"external_orchestration_id,omitempty"`

	// +kubebuilder:validation:Optional
	ExternalUUID *string `json:"externalUuid,omitempty" tf:"external_uuid,omitempty"`

	// +kubebuilder:validation:Optional
	Hostname *string `json:"hostname,omitempty" tf:"hostname,omitempty"`

	// +kubebuilder:validation:Optional
	IP *string `json:"ip,omitempty" tf:"ip,omitempty"`

	// +kubebuilder:validation:Optional
	Location []ServerLocationParameters `json:"location,omitempty" tf:"location,omitempty"`

	// +kubebuilder:validation:Optional
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// +kubebuilder:validation:Optional
	NwRef *string `json:"nwRef,omitempty" tf:"nw_ref,omitempty"`

	// +kubebuilder:validation:Optional
	PoolRef *string `json:"poolRef,omitempty" tf:"pool_ref,omitempty"`

	// +kubebuilder:validation:Optional
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	// +kubebuilder:validation:Optional
	PreferenceOrder *string `json:"preferenceOrder,omitempty" tf:"preference_order,omitempty"`

	// +kubebuilder:validation:Optional
	PrstHdrVal *string `json:"prstHdrVal,omitempty" tf:"prst_hdr_val,omitempty"`

	// +kubebuilder:validation:Optional
	Ratio *string `json:"ratio,omitempty" tf:"ratio,omitempty"`

	// +kubebuilder:validation:Optional
	ResolveServerByDNS *string `json:"resolveServerByDns,omitempty" tf:"resolve_server_by_dns,omitempty"`

	// +kubebuilder:validation:Optional
	RewriteHostHeader *string `json:"rewriteHostHeader,omitempty" tf:"rewrite_host_header,omitempty"`

	// +kubebuilder:validation:Optional
	ServerNode *string `json:"serverNode,omitempty" tf:"server_node,omitempty"`

	// +kubebuilder:validation:Optional
	Static *string `json:"static,omitempty" tf:"static,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	VMRef *string `json:"vmRef,omitempty" tf:"vm_ref,omitempty"`

	// +kubebuilder:validation:Optional
	VerifyNetwork *string `json:"verifyNetwork,omitempty" tf:"verify_network,omitempty"`
}

// ServerSpec defines the desired state of Server
type ServerSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ServerParameters_2 `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ServerInitParameters_2 `json:"initProvider,omitempty"`
}

// ServerStatus defines the observed state of Server.
type ServerStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ServerObservation_2 `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Server is the Schema for the Servers API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type Server struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ip) || has(self.initProvider.ip)",message="ip is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.poolRef) || has(self.initProvider.poolRef)",message="poolRef is a required parameter"
	Spec   ServerSpec   `json:"spec"`
	Status ServerStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ServerList contains a list of Servers
type ServerList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Server `json:"items"`
}

// Repository type metadata.
var (
	Server_Kind             = "Server"
	Server_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Server_Kind}.String()
	Server_KindAPIVersion   = Server_Kind + "." + CRDGroupVersion.String()
	Server_GroupVersionKind = CRDGroupVersion.WithKind(Server_Kind)
)

func init() {
	SchemeBuilder.Register(&Server{}, &ServerList{})
}
