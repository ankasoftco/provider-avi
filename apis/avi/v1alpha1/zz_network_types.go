/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AttrsInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AttrsObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type AttrsParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type ConfiguredSubnetsInitParameters struct {
	Prefix []ConfiguredSubnetsPrefixInitParameters `json:"prefix,omitempty" tf:"prefix,omitempty"`

	StaticIPRanges []StaticIPRangesInitParameters `json:"staticIpRanges,omitempty" tf:"static_ip_ranges,omitempty"`
}

type ConfiguredSubnetsObservation struct {
	Prefix []ConfiguredSubnetsPrefixObservation `json:"prefix,omitempty" tf:"prefix,omitempty"`

	StaticIPRanges []StaticIPRangesObservation `json:"staticIpRanges,omitempty" tf:"static_ip_ranges,omitempty"`
}

type ConfiguredSubnetsParameters struct {

	// +kubebuilder:validation:Optional
	Prefix []ConfiguredSubnetsPrefixParameters `json:"prefix" tf:"prefix,omitempty"`

	// +kubebuilder:validation:Optional
	StaticIPRanges []StaticIPRangesParameters `json:"staticIpRanges,omitempty" tf:"static_ip_ranges,omitempty"`
}

type ConfiguredSubnetsPrefixIPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ConfiguredSubnetsPrefixIPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type ConfiguredSubnetsPrefixIPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type ConfiguredSubnetsPrefixInitParameters struct {
	IPAddr []ConfiguredSubnetsPrefixIPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type ConfiguredSubnetsPrefixObservation struct {
	IPAddr []ConfiguredSubnetsPrefixIPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type ConfiguredSubnetsPrefixParameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []ConfiguredSubnetsPrefixIPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type NetworkConfigpbAttributesInitParameters struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type NetworkConfigpbAttributesObservation struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type NetworkConfigpbAttributesParameters struct {

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type NetworkInitParameters struct {
	Attrs []AttrsInitParameters `json:"attrs,omitempty" tf:"attrs,omitempty"`

	CloudRef *string `json:"cloudRef,omitempty" tf:"cloud_ref,omitempty"`

	ConfigpbAttributes []NetworkConfigpbAttributesInitParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	ConfiguredSubnets []ConfiguredSubnetsInitParameters `json:"configuredSubnets,omitempty" tf:"configured_subnets,omitempty"`

	DHCPEnabled *string `json:"dhcpEnabled,omitempty" tf:"dhcp_enabled,omitempty"`

	ExcludeDiscoveredSubnets *string `json:"excludeDiscoveredSubnets,omitempty" tf:"exclude_discovered_subnets,omitempty"`

	Ip6AutocfgEnabled *string `json:"ip6AutocfgEnabled,omitempty" tf:"ip6_autocfg_enabled,omitempty"`

	Markers []NetworkMarkersInitParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	SyncedFromSe *string `json:"syncedFromSe,omitempty" tf:"synced_from_se,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	VcenterDvs *string `json:"vcenterDvs,omitempty" tf:"vcenter_dvs,omitempty"`

	VimgrnwRef *string `json:"vimgrnwRef,omitempty" tf:"vimgrnw_ref,omitempty"`

	VrfContextRef *string `json:"vrfContextRef,omitempty" tf:"vrf_context_ref,omitempty"`
}

type NetworkMarkersInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type NetworkMarkersObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type NetworkMarkersParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type NetworkObservation struct {
	Attrs []AttrsObservation `json:"attrs,omitempty" tf:"attrs,omitempty"`

	CloudRef *string `json:"cloudRef,omitempty" tf:"cloud_ref,omitempty"`

	ConfigpbAttributes []NetworkConfigpbAttributesObservation `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	ConfiguredSubnets []ConfiguredSubnetsObservation `json:"configuredSubnets,omitempty" tf:"configured_subnets,omitempty"`

	DHCPEnabled *string `json:"dhcpEnabled,omitempty" tf:"dhcp_enabled,omitempty"`

	ExcludeDiscoveredSubnets *string `json:"excludeDiscoveredSubnets,omitempty" tf:"exclude_discovered_subnets,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Ip6AutocfgEnabled *string `json:"ip6AutocfgEnabled,omitempty" tf:"ip6_autocfg_enabled,omitempty"`

	Markers []NetworkMarkersObservation `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	SyncedFromSe *string `json:"syncedFromSe,omitempty" tf:"synced_from_se,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	VcenterDvs *string `json:"vcenterDvs,omitempty" tf:"vcenter_dvs,omitempty"`

	VimgrnwRef *string `json:"vimgrnwRef,omitempty" tf:"vimgrnw_ref,omitempty"`

	VrfContextRef *string `json:"vrfContextRef,omitempty" tf:"vrf_context_ref,omitempty"`
}

type NetworkParameters struct {

	// +kubebuilder:validation:Optional
	Attrs []AttrsParameters `json:"attrs,omitempty" tf:"attrs,omitempty"`

	// +kubebuilder:validation:Optional
	CloudRef *string `json:"cloudRef,omitempty" tf:"cloud_ref,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigpbAttributes []NetworkConfigpbAttributesParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	ConfiguredSubnets []ConfiguredSubnetsParameters `json:"configuredSubnets,omitempty" tf:"configured_subnets,omitempty"`

	// +kubebuilder:validation:Optional
	DHCPEnabled *string `json:"dhcpEnabled,omitempty" tf:"dhcp_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	ExcludeDiscoveredSubnets *string `json:"excludeDiscoveredSubnets,omitempty" tf:"exclude_discovered_subnets,omitempty"`

	// +kubebuilder:validation:Optional
	Ip6AutocfgEnabled *string `json:"ip6AutocfgEnabled,omitempty" tf:"ip6_autocfg_enabled,omitempty"`

	// +kubebuilder:validation:Optional
	Markers []NetworkMarkersParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	SyncedFromSe *string `json:"syncedFromSe,omitempty" tf:"synced_from_se,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// +kubebuilder:validation:Optional
	VcenterDvs *string `json:"vcenterDvs,omitempty" tf:"vcenter_dvs,omitempty"`

	// +kubebuilder:validation:Optional
	VimgrnwRef *string `json:"vimgrnwRef,omitempty" tf:"vimgrnw_ref,omitempty"`

	// +kubebuilder:validation:Optional
	VrfContextRef *string `json:"vrfContextRef,omitempty" tf:"vrf_context_ref,omitempty"`
}

type RangeBeginInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RangeBeginObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RangeBeginParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type RangeEndInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RangeEndObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type RangeEndParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type RangeInitParameters struct {
	Begin []RangeBeginInitParameters `json:"begin,omitempty" tf:"begin,omitempty"`

	End []RangeEndInitParameters `json:"end,omitempty" tf:"end,omitempty"`
}

type RangeObservation struct {
	Begin []RangeBeginObservation `json:"begin,omitempty" tf:"begin,omitempty"`

	End []RangeEndObservation `json:"end,omitempty" tf:"end,omitempty"`
}

type RangeParameters struct {

	// +kubebuilder:validation:Optional
	Begin []RangeBeginParameters `json:"begin" tf:"begin,omitempty"`

	// +kubebuilder:validation:Optional
	End []RangeEndParameters `json:"end" tf:"end,omitempty"`
}

type StaticIPRangesInitParameters struct {
	Range []RangeInitParameters `json:"range,omitempty" tf:"range,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type StaticIPRangesObservation struct {
	Range []RangeObservation `json:"range,omitempty" tf:"range,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type StaticIPRangesParameters struct {

	// +kubebuilder:validation:Optional
	Range []RangeParameters `json:"range" tf:"range,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

// NetworkSpec defines the desired state of Network
type NetworkSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     NetworkParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider NetworkInitParameters `json:"initProvider,omitempty"`
}

// NetworkStatus defines the observed state of Network.
type NetworkStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        NetworkObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Network is the Schema for the Networks API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type Network struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	Spec   NetworkSpec   `json:"spec"`
	Status NetworkStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// NetworkList contains a list of Networks
type NetworkList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Network `json:"items"`
}

// Repository type metadata.
var (
	Network_Kind             = "Network"
	Network_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Network_Kind}.String()
	Network_KindAPIVersion   = Network_Kind + "." + CRDGroupVersion.String()
	Network_GroupVersionKind = CRDGroupVersion.WithKind(Network_Kind)
)

func init() {
	SchemeBuilder.Register(&Network{}, &NetworkList{})
}
