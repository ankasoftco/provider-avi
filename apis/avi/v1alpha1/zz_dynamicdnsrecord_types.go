/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type DynamicDnsRecordCnameInitParameters struct {
	Cname *string `json:"cname,omitempty" tf:"cname,omitempty"`
}

type DynamicDnsRecordCnameObservation struct {
	Cname *string `json:"cname,omitempty" tf:"cname,omitempty"`
}

type DynamicDnsRecordCnameParameters struct {

	// +kubebuilder:validation:Optional
	Cname *string `json:"cname" tf:"cname,omitempty"`
}

type DynamicDnsRecordIPAddressInitParameters struct {
	IPAddress []IPAddressIPAddressInitParameters `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`
}

type DynamicDnsRecordIPAddressObservation struct {
	IPAddress []IPAddressIPAddressObservation `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`
}

type DynamicDnsRecordIPAddressParameters struct {

	// +kubebuilder:validation:Optional
	IPAddress []IPAddressIPAddressParameters `json:"ipAddress" tf:"ip_address,omitempty"`
}

type DynamicDnsRecordInitParameters struct {
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	Cname []DynamicDnsRecordCnameInitParameters `json:"cname,omitempty" tf:"cname,omitempty"`

	DNSVsUUID *string `json:"dnsVsUuid,omitempty" tf:"dns_vs_uuid,omitempty"`

	Delegated *string `json:"delegated,omitempty" tf:"delegated,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	IPAddress []DynamicDnsRecordIPAddressInitParameters `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	Ip6Address []DynamicDnsRecordIp6AddressInitParameters `json:"ip6Address,omitempty" tf:"ip6_address,omitempty"`

	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	MxRecords []MxRecordsInitParameters `json:"mxRecords,omitempty" tf:"mx_records,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Ns []NsInitParameters `json:"ns,omitempty" tf:"ns,omitempty"`

	NumRecordsInResponse *string `json:"numRecordsInResponse,omitempty" tf:"num_records_in_response,omitempty"`

	ServiceLocators []ServiceLocatorsInitParameters `json:"serviceLocators,omitempty" tf:"service_locators,omitempty"`

	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	TxtRecords []TxtRecordsInitParameters `json:"txtRecords,omitempty" tf:"txt_records,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	WildcardMatch *string `json:"wildcardMatch,omitempty" tf:"wildcard_match,omitempty"`
}

type DynamicDnsRecordIp6AddressInitParameters struct {
	Ip6Address []Ip6AddressIp6AddressInitParameters `json:"ip6Address,omitempty" tf:"ip6_address,omitempty"`
}

type DynamicDnsRecordIp6AddressObservation struct {
	Ip6Address []Ip6AddressIp6AddressObservation `json:"ip6Address,omitempty" tf:"ip6_address,omitempty"`
}

type DynamicDnsRecordIp6AddressParameters struct {

	// +kubebuilder:validation:Optional
	Ip6Address []Ip6AddressIp6AddressParameters `json:"ip6Address" tf:"ip6_address,omitempty"`
}

type DynamicDnsRecordObservation struct {
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	Cname []DynamicDnsRecordCnameObservation `json:"cname,omitempty" tf:"cname,omitempty"`

	DNSVsUUID *string `json:"dnsVsUuid,omitempty" tf:"dns_vs_uuid,omitempty"`

	Delegated *string `json:"delegated,omitempty" tf:"delegated,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IPAddress []DynamicDnsRecordIPAddressObservation `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	Ip6Address []DynamicDnsRecordIp6AddressObservation `json:"ip6Address,omitempty" tf:"ip6_address,omitempty"`

	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	MxRecords []MxRecordsObservation `json:"mxRecords,omitempty" tf:"mx_records,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Ns []NsObservation `json:"ns,omitempty" tf:"ns,omitempty"`

	NumRecordsInResponse *string `json:"numRecordsInResponse,omitempty" tf:"num_records_in_response,omitempty"`

	ServiceLocators []ServiceLocatorsObservation `json:"serviceLocators,omitempty" tf:"service_locators,omitempty"`

	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	TxtRecords []TxtRecordsObservation `json:"txtRecords,omitempty" tf:"txt_records,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	WildcardMatch *string `json:"wildcardMatch,omitempty" tf:"wildcard_match,omitempty"`
}

type DynamicDnsRecordParameters struct {

	// +kubebuilder:validation:Optional
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	// +kubebuilder:validation:Optional
	Cname []DynamicDnsRecordCnameParameters `json:"cname,omitempty" tf:"cname,omitempty"`

	// +kubebuilder:validation:Optional
	DNSVsUUID *string `json:"dnsVsUuid,omitempty" tf:"dns_vs_uuid,omitempty"`

	// +kubebuilder:validation:Optional
	Delegated *string `json:"delegated,omitempty" tf:"delegated,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Fqdn *string `json:"fqdn,omitempty" tf:"fqdn,omitempty"`

	// +kubebuilder:validation:Optional
	IPAddress []DynamicDnsRecordIPAddressParameters `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// +kubebuilder:validation:Optional
	Ip6Address []DynamicDnsRecordIp6AddressParameters `json:"ip6Address,omitempty" tf:"ip6_address,omitempty"`

	// +kubebuilder:validation:Optional
	Metadata *string `json:"metadata,omitempty" tf:"metadata,omitempty"`

	// +kubebuilder:validation:Optional
	MxRecords []MxRecordsParameters `json:"mxRecords,omitempty" tf:"mx_records,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Ns []NsParameters `json:"ns,omitempty" tf:"ns,omitempty"`

	// +kubebuilder:validation:Optional
	NumRecordsInResponse *string `json:"numRecordsInResponse,omitempty" tf:"num_records_in_response,omitempty"`

	// +kubebuilder:validation:Optional
	ServiceLocators []ServiceLocatorsParameters `json:"serviceLocators,omitempty" tf:"service_locators,omitempty"`

	// +kubebuilder:validation:Optional
	TTL *string `json:"ttl,omitempty" tf:"ttl,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	TxtRecords []TxtRecordsParameters `json:"txtRecords,omitempty" tf:"txt_records,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// +kubebuilder:validation:Optional
	WildcardMatch *string `json:"wildcardMatch,omitempty" tf:"wildcard_match,omitempty"`
}

type IPAddressIPAddressInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IPAddressIPAddressObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IPAddressIPAddressParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type Ip6AddressIp6AddressInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type Ip6AddressIp6AddressObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type Ip6AddressIp6AddressParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type MxRecordsInitParameters struct {
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	Priority *string `json:"priority,omitempty" tf:"priority,omitempty"`
}

type MxRecordsObservation struct {
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	Priority *string `json:"priority,omitempty" tf:"priority,omitempty"`
}

type MxRecordsParameters struct {

	// +kubebuilder:validation:Optional
	Host *string `json:"host" tf:"host,omitempty"`

	// +kubebuilder:validation:Optional
	Priority *string `json:"priority" tf:"priority,omitempty"`
}

type NsIPAddressInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NsIPAddressObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NsIPAddressParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type NsInitParameters struct {
	IPAddress []NsIPAddressInitParameters `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	Ip6Address []NsIp6AddressInitParameters `json:"ip6Address,omitempty" tf:"ip6_address,omitempty"`

	Nsname *string `json:"nsname,omitempty" tf:"nsname,omitempty"`
}

type NsIp6AddressInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NsIp6AddressObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NsIp6AddressParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type NsObservation struct {
	IPAddress []NsIPAddressObservation `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	Ip6Address []NsIp6AddressObservation `json:"ip6Address,omitempty" tf:"ip6_address,omitempty"`

	Nsname *string `json:"nsname,omitempty" tf:"nsname,omitempty"`
}

type NsParameters struct {

	// +kubebuilder:validation:Optional
	IPAddress []NsIPAddressParameters `json:"ipAddress,omitempty" tf:"ip_address,omitempty"`

	// +kubebuilder:validation:Optional
	Ip6Address []NsIp6AddressParameters `json:"ip6Address,omitempty" tf:"ip6_address,omitempty"`

	// +kubebuilder:validation:Optional
	Nsname *string `json:"nsname" tf:"nsname,omitempty"`
}

type ServiceLocatorsInitParameters struct {
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	Priority *string `json:"priority,omitempty" tf:"priority,omitempty"`

	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	Weight *string `json:"weight,omitempty" tf:"weight,omitempty"`
}

type ServiceLocatorsObservation struct {
	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	Priority *string `json:"priority,omitempty" tf:"priority,omitempty"`

	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	Weight *string `json:"weight,omitempty" tf:"weight,omitempty"`
}

type ServiceLocatorsParameters struct {

	// +kubebuilder:validation:Optional
	Port *string `json:"port" tf:"port,omitempty"`

	// +kubebuilder:validation:Optional
	Priority *string `json:"priority,omitempty" tf:"priority,omitempty"`

	// +kubebuilder:validation:Optional
	Target *string `json:"target,omitempty" tf:"target,omitempty"`

	// +kubebuilder:validation:Optional
	Weight *string `json:"weight,omitempty" tf:"weight,omitempty"`
}

type TxtRecordsInitParameters struct {
	TextStr *string `json:"textStr,omitempty" tf:"text_str,omitempty"`
}

type TxtRecordsObservation struct {
	TextStr *string `json:"textStr,omitempty" tf:"text_str,omitempty"`
}

type TxtRecordsParameters struct {

	// +kubebuilder:validation:Optional
	TextStr *string `json:"textStr" tf:"text_str,omitempty"`
}

// DynamicDnsRecordSpec defines the desired state of DynamicDnsRecord
type DynamicDnsRecordSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     DynamicDnsRecordParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider DynamicDnsRecordInitParameters `json:"initProvider,omitempty"`
}

// DynamicDnsRecordStatus defines the observed state of DynamicDnsRecord.
type DynamicDnsRecordStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        DynamicDnsRecordObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// DynamicDnsRecord is the Schema for the DynamicDnsRecords API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type DynamicDnsRecord struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              DynamicDnsRecordSpec   `json:"spec"`
	Status            DynamicDnsRecordStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// DynamicDnsRecordList contains a list of DynamicDnsRecords
type DynamicDnsRecordList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []DynamicDnsRecord `json:"items"`
}

// Repository type metadata.
var (
	DynamicDnsRecord_Kind             = "DynamicDnsRecord"
	DynamicDnsRecord_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: DynamicDnsRecord_Kind}.String()
	DynamicDnsRecord_KindAPIVersion   = DynamicDnsRecord_Kind + "." + CRDGroupVersion.String()
	DynamicDnsRecord_GroupVersionKind = CRDGroupVersion.WithKind(DynamicDnsRecord_Kind)
)

func init() {
	SchemeBuilder.Register(&DynamicDnsRecord{}, &DynamicDnsRecordList{})
}
