/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AcceptedVersionsInitParameters struct {
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AcceptedVersionsObservation struct {
	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type AcceptedVersionsParameters struct {

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type SSLRatingInitParameters struct {
	CompatibilityRating *string `json:"compatibilityRating,omitempty" tf:"compatibility_rating,omitempty"`

	PerformanceRating *string `json:"performanceRating,omitempty" tf:"performance_rating,omitempty"`

	SecurityScore *string `json:"securityScore,omitempty" tf:"security_score,omitempty"`
}

type SSLRatingObservation struct {
	CompatibilityRating *string `json:"compatibilityRating,omitempty" tf:"compatibility_rating,omitempty"`

	PerformanceRating *string `json:"performanceRating,omitempty" tf:"performance_rating,omitempty"`

	SecurityScore *string `json:"securityScore,omitempty" tf:"security_score,omitempty"`
}

type SSLRatingParameters struct {

	// +kubebuilder:validation:Optional
	CompatibilityRating *string `json:"compatibilityRating,omitempty" tf:"compatibility_rating,omitempty"`

	// +kubebuilder:validation:Optional
	PerformanceRating *string `json:"performanceRating,omitempty" tf:"performance_rating,omitempty"`

	// +kubebuilder:validation:Optional
	SecurityScore *string `json:"securityScore,omitempty" tf:"security_score,omitempty"`
}

type SslProfileConfigpbAttributesInitParameters struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type SslProfileConfigpbAttributesObservation struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type SslProfileConfigpbAttributesParameters struct {

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type SslProfileInitParameters struct {
	AcceptedCiphers *string `json:"acceptedCiphers,omitempty" tf:"accepted_ciphers,omitempty"`

	AcceptedVersions []AcceptedVersionsInitParameters `json:"acceptedVersions,omitempty" tf:"accepted_versions,omitempty"`

	CipherEnums []*string `json:"cipherEnums,omitempty" tf:"cipher_enums,omitempty"`

	Ciphersuites *string `json:"ciphersuites,omitempty" tf:"ciphersuites,omitempty"`

	ConfigpbAttributes []SslProfileConfigpbAttributesInitParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Dhparam *string `json:"dhparam,omitempty" tf:"dhparam,omitempty"`

	EcNamedCurve *string `json:"ecNamedCurve,omitempty" tf:"ec_named_curve,omitempty"`

	EnableEarlyData *string `json:"enableEarlyData,omitempty" tf:"enable_early_data,omitempty"`

	EnableSSLSessionReuse *string `json:"enableSslSessionReuse,omitempty" tf:"enable_ssl_session_reuse,omitempty"`

	IsFederated *string `json:"isFederated,omitempty" tf:"is_federated,omitempty"`

	Markers []SslProfileMarkersInitParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	PreferClientCipherOrdering *string `json:"preferClientCipherOrdering,omitempty" tf:"prefer_client_cipher_ordering,omitempty"`

	SSLRating []SSLRatingInitParameters `json:"sslRating,omitempty" tf:"ssl_rating,omitempty"`

	SSLSessionTimeout *string `json:"sslSessionTimeout,omitempty" tf:"ssl_session_timeout,omitempty"`

	SendCloseNotify *string `json:"sendCloseNotify,omitempty" tf:"send_close_notify,omitempty"`

	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" tf:"signature_algorithm,omitempty"`

	Tags []TagsInitParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type SslProfileMarkersInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type SslProfileMarkersObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type SslProfileMarkersParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type SslProfileObservation struct {
	AcceptedCiphers *string `json:"acceptedCiphers,omitempty" tf:"accepted_ciphers,omitempty"`

	AcceptedVersions []AcceptedVersionsObservation `json:"acceptedVersions,omitempty" tf:"accepted_versions,omitempty"`

	CipherEnums []*string `json:"cipherEnums,omitempty" tf:"cipher_enums,omitempty"`

	Ciphersuites *string `json:"ciphersuites,omitempty" tf:"ciphersuites,omitempty"`

	ConfigpbAttributes []SslProfileConfigpbAttributesObservation `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Dhparam *string `json:"dhparam,omitempty" tf:"dhparam,omitempty"`

	EcNamedCurve *string `json:"ecNamedCurve,omitempty" tf:"ec_named_curve,omitempty"`

	EnableEarlyData *string `json:"enableEarlyData,omitempty" tf:"enable_early_data,omitempty"`

	EnableSSLSessionReuse *string `json:"enableSslSessionReuse,omitempty" tf:"enable_ssl_session_reuse,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IsFederated *string `json:"isFederated,omitempty" tf:"is_federated,omitempty"`

	Markers []SslProfileMarkersObservation `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	PreferClientCipherOrdering *string `json:"preferClientCipherOrdering,omitempty" tf:"prefer_client_cipher_ordering,omitempty"`

	SSLRating []SSLRatingObservation `json:"sslRating,omitempty" tf:"ssl_rating,omitempty"`

	SSLSessionTimeout *string `json:"sslSessionTimeout,omitempty" tf:"ssl_session_timeout,omitempty"`

	SendCloseNotify *string `json:"sendCloseNotify,omitempty" tf:"send_close_notify,omitempty"`

	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" tf:"signature_algorithm,omitempty"`

	Tags []TagsObservation `json:"tags,omitempty" tf:"tags,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type SslProfileParameters struct {

	// +kubebuilder:validation:Optional
	AcceptedCiphers *string `json:"acceptedCiphers,omitempty" tf:"accepted_ciphers,omitempty"`

	// +kubebuilder:validation:Optional
	AcceptedVersions []AcceptedVersionsParameters `json:"acceptedVersions,omitempty" tf:"accepted_versions,omitempty"`

	// +kubebuilder:validation:Optional
	CipherEnums []*string `json:"cipherEnums,omitempty" tf:"cipher_enums,omitempty"`

	// +kubebuilder:validation:Optional
	Ciphersuites *string `json:"ciphersuites,omitempty" tf:"ciphersuites,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigpbAttributes []SslProfileConfigpbAttributesParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Dhparam *string `json:"dhparam,omitempty" tf:"dhparam,omitempty"`

	// +kubebuilder:validation:Optional
	EcNamedCurve *string `json:"ecNamedCurve,omitempty" tf:"ec_named_curve,omitempty"`

	// +kubebuilder:validation:Optional
	EnableEarlyData *string `json:"enableEarlyData,omitempty" tf:"enable_early_data,omitempty"`

	// +kubebuilder:validation:Optional
	EnableSSLSessionReuse *string `json:"enableSslSessionReuse,omitempty" tf:"enable_ssl_session_reuse,omitempty"`

	// +kubebuilder:validation:Optional
	IsFederated *string `json:"isFederated,omitempty" tf:"is_federated,omitempty"`

	// +kubebuilder:validation:Optional
	Markers []SslProfileMarkersParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PreferClientCipherOrdering *string `json:"preferClientCipherOrdering,omitempty" tf:"prefer_client_cipher_ordering,omitempty"`

	// +kubebuilder:validation:Optional
	SSLRating []SSLRatingParameters `json:"sslRating,omitempty" tf:"ssl_rating,omitempty"`

	// +kubebuilder:validation:Optional
	SSLSessionTimeout *string `json:"sslSessionTimeout,omitempty" tf:"ssl_session_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	SendCloseNotify *string `json:"sendCloseNotify,omitempty" tf:"send_close_notify,omitempty"`

	// +kubebuilder:validation:Optional
	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" tf:"signature_algorithm,omitempty"`

	// +kubebuilder:validation:Optional
	Tags []TagsParameters `json:"tags,omitempty" tf:"tags,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type TagsInitParameters struct {
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagsObservation struct {
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type TagsParameters struct {

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value" tf:"value,omitempty"`
}

// SslProfileSpec defines the desired state of SslProfile
type SslProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SslProfileParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SslProfileInitParameters `json:"initProvider,omitempty"`
}

// SslProfileStatus defines the observed state of SslProfile.
type SslProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SslProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SslProfile is the Schema for the SslProfiles API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type SslProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.acceptedVersions) || has(self.initProvider.acceptedVersions)",message="acceptedVersions is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	Spec   SslProfileSpec   `json:"spec"`
	Status SslProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SslProfileList contains a list of SslProfiles
type SslProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SslProfile `json:"items"`
}

// Repository type metadata.
var (
	SslProfile_Kind             = "SslProfile"
	SslProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SslProfile_Kind}.String()
	SslProfile_KindAPIVersion   = SslProfile_Kind + "." + CRDGroupVersion.String()
	SslProfile_GroupVersionKind = CRDGroupVersion.WithKind(SslProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&SslProfile{}, &SslProfileList{})
}
