/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ALBServicesConfigConfigpbAttributesInitParameters struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ALBServicesConfigConfigpbAttributesObservation struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ALBServicesConfigConfigpbAttributesParameters struct {

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type ALBServicesConfigInitParameters struct {
	AppSignatureConfig []AppSignatureConfigInitParameters `json:"appSignatureConfig,omitempty" tf:"app_signature_config,omitempty"`

	AssetContact []AssetContactInitParameters `json:"assetContact,omitempty" tf:"asset_contact,omitempty"`

	CaseConfig []CaseConfigInitParameters `json:"caseConfig,omitempty" tf:"case_config,omitempty"`

	ConfigpbAttributes []ALBServicesConfigConfigpbAttributesInitParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	FeatureOptInStatus []FeatureOptInStatusInitParameters `json:"featureOptInStatus,omitempty" tf:"feature_opt_in_status,omitempty"`

	IPReputationConfig []IPReputationConfigInitParameters `json:"ipReputationConfig,omitempty" tf:"ip_reputation_config,omitempty"`

	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	OperationsConfig []OperationsConfigInitParameters `json:"operationsConfig,omitempty" tf:"operations_config,omitempty"`

	PollingInterval *string `json:"pollingInterval,omitempty" tf:"polling_interval,omitempty"`

	PortalURL *string `json:"portalUrl,omitempty" tf:"portal_url,omitempty"`

	SaasLicensingConfig []SaasLicensingConfigInitParameters `json:"saasLicensingConfig,omitempty" tf:"saas_licensing_config,omitempty"`

	SplitProxyConfiguration []SplitProxyConfigurationInitParameters `json:"splitProxyConfiguration,omitempty" tf:"split_proxy_configuration,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	UseSplitProxy *string `json:"useSplitProxy,omitempty" tf:"use_split_proxy,omitempty"`

	UseTLS *string `json:"useTls,omitempty" tf:"use_tls,omitempty"`

	UserAgentDBConfig []UserAgentDBConfigInitParameters `json:"userAgentDbConfig,omitempty" tf:"user_agent_db_config,omitempty"`

	WafConfig []WafConfigInitParameters `json:"wafConfig,omitempty" tf:"waf_config,omitempty"`
}

type ALBServicesConfigObservation struct {
	AppSignatureConfig []AppSignatureConfigObservation `json:"appSignatureConfig,omitempty" tf:"app_signature_config,omitempty"`

	AssetContact []AssetContactObservation `json:"assetContact,omitempty" tf:"asset_contact,omitempty"`

	CaseConfig []CaseConfigObservation `json:"caseConfig,omitempty" tf:"case_config,omitempty"`

	ConfigpbAttributes []ALBServicesConfigConfigpbAttributesObservation `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	FeatureOptInStatus []FeatureOptInStatusObservation `json:"featureOptInStatus,omitempty" tf:"feature_opt_in_status,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IPReputationConfig []IPReputationConfigObservation `json:"ipReputationConfig,omitempty" tf:"ip_reputation_config,omitempty"`

	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	OperationsConfig []OperationsConfigObservation `json:"operationsConfig,omitempty" tf:"operations_config,omitempty"`

	PollingInterval *string `json:"pollingInterval,omitempty" tf:"polling_interval,omitempty"`

	PortalURL *string `json:"portalUrl,omitempty" tf:"portal_url,omitempty"`

	SaasLicensingConfig []SaasLicensingConfigObservation `json:"saasLicensingConfig,omitempty" tf:"saas_licensing_config,omitempty"`

	SplitProxyConfiguration []SplitProxyConfigurationObservation `json:"splitProxyConfiguration,omitempty" tf:"split_proxy_configuration,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	UseSplitProxy *string `json:"useSplitProxy,omitempty" tf:"use_split_proxy,omitempty"`

	UseTLS *string `json:"useTls,omitempty" tf:"use_tls,omitempty"`

	UserAgentDBConfig []UserAgentDBConfigObservation `json:"userAgentDbConfig,omitempty" tf:"user_agent_db_config,omitempty"`

	WafConfig []WafConfigObservation `json:"wafConfig,omitempty" tf:"waf_config,omitempty"`
}

type ALBServicesConfigParameters struct {

	// +kubebuilder:validation:Optional
	AppSignatureConfig []AppSignatureConfigParameters `json:"appSignatureConfig,omitempty" tf:"app_signature_config,omitempty"`

	// +kubebuilder:validation:Optional
	AssetContact []AssetContactParameters `json:"assetContact,omitempty" tf:"asset_contact,omitempty"`

	// +kubebuilder:validation:Optional
	CaseConfig []CaseConfigParameters `json:"caseConfig,omitempty" tf:"case_config,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigpbAttributes []ALBServicesConfigConfigpbAttributesParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	FeatureOptInStatus []FeatureOptInStatusParameters `json:"featureOptInStatus,omitempty" tf:"feature_opt_in_status,omitempty"`

	// +kubebuilder:validation:Optional
	IPReputationConfig []IPReputationConfigParameters `json:"ipReputationConfig,omitempty" tf:"ip_reputation_config,omitempty"`

	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// +kubebuilder:validation:Optional
	OperationsConfig []OperationsConfigParameters `json:"operationsConfig,omitempty" tf:"operations_config,omitempty"`

	// +kubebuilder:validation:Optional
	PollingInterval *string `json:"pollingInterval,omitempty" tf:"polling_interval,omitempty"`

	// +kubebuilder:validation:Optional
	PortalURL *string `json:"portalUrl,omitempty" tf:"portal_url,omitempty"`

	// +kubebuilder:validation:Optional
	SaasLicensingConfig []SaasLicensingConfigParameters `json:"saasLicensingConfig,omitempty" tf:"saas_licensing_config,omitempty"`

	// +kubebuilder:validation:Optional
	SplitProxyConfiguration []SplitProxyConfigurationParameters `json:"splitProxyConfiguration,omitempty" tf:"split_proxy_configuration,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// +kubebuilder:validation:Optional
	UseSplitProxy *string `json:"useSplitProxy,omitempty" tf:"use_split_proxy,omitempty"`

	// +kubebuilder:validation:Optional
	UseTLS *string `json:"useTls,omitempty" tf:"use_tls,omitempty"`

	// +kubebuilder:validation:Optional
	UserAgentDBConfig []UserAgentDBConfigParameters `json:"userAgentDbConfig,omitempty" tf:"user_agent_db_config,omitempty"`

	// +kubebuilder:validation:Optional
	WafConfig []WafConfigParameters `json:"wafConfig,omitempty" tf:"waf_config,omitempty"`
}

type AppSignatureConfigInitParameters struct {
	AppSignatureSyncInterval *string `json:"appSignatureSyncInterval,omitempty" tf:"app_signature_sync_interval,omitempty"`
}

type AppSignatureConfigObservation struct {
	AppSignatureSyncInterval *string `json:"appSignatureSyncInterval,omitempty" tf:"app_signature_sync_interval,omitempty"`
}

type AppSignatureConfigParameters struct {

	// +kubebuilder:validation:Optional
	AppSignatureSyncInterval *string `json:"appSignatureSyncInterval,omitempty" tf:"app_signature_sync_interval,omitempty"`
}

type AssetContactInitParameters struct {
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	ManagedAccounts []ManagedAccountsInitParameters `json:"managedAccounts,omitempty" tf:"managed_accounts,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`
}

type AssetContactObservation struct {
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	ManagedAccounts []ManagedAccountsObservation `json:"managedAccounts,omitempty" tf:"managed_accounts,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`
}

type AssetContactParameters struct {

	// +kubebuilder:validation:Optional
	AccountID *string `json:"accountId,omitempty" tf:"account_id,omitempty"`

	// +kubebuilder:validation:Optional
	AccountName *string `json:"accountName,omitempty" tf:"account_name,omitempty"`

	// +kubebuilder:validation:Optional
	Email *string `json:"email" tf:"email,omitempty"`

	// +kubebuilder:validation:Optional
	ManagedAccounts []ManagedAccountsParameters `json:"managedAccounts,omitempty" tf:"managed_accounts,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`
}

type CaseConfigInitParameters struct {
	EnableAutoCaseCreationOnControllerFailure *string `json:"enableAutoCaseCreationOnControllerFailure,omitempty" tf:"enable_auto_case_creation_on_controller_failure,omitempty"`

	EnableAutoCaseCreationOnSeFailure *string `json:"enableAutoCaseCreationOnSeFailure,omitempty" tf:"enable_auto_case_creation_on_se_failure,omitempty"`

	EnableCleanupOfAttachedFiles *string `json:"enableCleanupOfAttachedFiles,omitempty" tf:"enable_cleanup_of_attached_files,omitempty"`
}

type CaseConfigObservation struct {
	EnableAutoCaseCreationOnControllerFailure *string `json:"enableAutoCaseCreationOnControllerFailure,omitempty" tf:"enable_auto_case_creation_on_controller_failure,omitempty"`

	EnableAutoCaseCreationOnSeFailure *string `json:"enableAutoCaseCreationOnSeFailure,omitempty" tf:"enable_auto_case_creation_on_se_failure,omitempty"`

	EnableCleanupOfAttachedFiles *string `json:"enableCleanupOfAttachedFiles,omitempty" tf:"enable_cleanup_of_attached_files,omitempty"`
}

type CaseConfigParameters struct {

	// +kubebuilder:validation:Optional
	EnableAutoCaseCreationOnControllerFailure *string `json:"enableAutoCaseCreationOnControllerFailure,omitempty" tf:"enable_auto_case_creation_on_controller_failure,omitempty"`

	// +kubebuilder:validation:Optional
	EnableAutoCaseCreationOnSeFailure *string `json:"enableAutoCaseCreationOnSeFailure,omitempty" tf:"enable_auto_case_creation_on_se_failure,omitempty"`

	// +kubebuilder:validation:Optional
	EnableCleanupOfAttachedFiles *string `json:"enableCleanupOfAttachedFiles,omitempty" tf:"enable_cleanup_of_attached_files,omitempty"`
}

type FeatureOptInStatusInitParameters struct {
	EnableAppsignatureSync *string `json:"enableAppsignatureSync,omitempty" tf:"enable_appsignature_sync,omitempty"`

	EnableIPReputation *string `json:"enableIpReputation,omitempty" tf:"enable_ip_reputation,omitempty"`

	EnablePulseCaseManagement *string `json:"enablePulseCaseManagement,omitempty" tf:"enable_pulse_case_management,omitempty"`

	EnablePulseWafManagement *string `json:"enablePulseWafManagement,omitempty" tf:"enable_pulse_waf_management,omitempty"`

	EnableUserAgentDBSync *string `json:"enableUserAgentDbSync,omitempty" tf:"enable_user_agent_db_sync,omitempty"`
}

type FeatureOptInStatusObservation struct {
	EnableAppsignatureSync *string `json:"enableAppsignatureSync,omitempty" tf:"enable_appsignature_sync,omitempty"`

	EnableIPReputation *string `json:"enableIpReputation,omitempty" tf:"enable_ip_reputation,omitempty"`

	EnablePulseCaseManagement *string `json:"enablePulseCaseManagement,omitempty" tf:"enable_pulse_case_management,omitempty"`

	EnablePulseWafManagement *string `json:"enablePulseWafManagement,omitempty" tf:"enable_pulse_waf_management,omitempty"`

	EnableUserAgentDBSync *string `json:"enableUserAgentDbSync,omitempty" tf:"enable_user_agent_db_sync,omitempty"`
}

type FeatureOptInStatusParameters struct {

	// +kubebuilder:validation:Optional
	EnableAppsignatureSync *string `json:"enableAppsignatureSync,omitempty" tf:"enable_appsignature_sync,omitempty"`

	// +kubebuilder:validation:Optional
	EnableIPReputation *string `json:"enableIpReputation,omitempty" tf:"enable_ip_reputation,omitempty"`

	// +kubebuilder:validation:Optional
	EnablePulseCaseManagement *string `json:"enablePulseCaseManagement,omitempty" tf:"enable_pulse_case_management,omitempty"`

	// +kubebuilder:validation:Optional
	EnablePulseWafManagement *string `json:"enablePulseWafManagement,omitempty" tf:"enable_pulse_waf_management,omitempty"`

	// +kubebuilder:validation:Optional
	EnableUserAgentDBSync *string `json:"enableUserAgentDbSync,omitempty" tf:"enable_user_agent_db_sync,omitempty"`
}

type IPReputationConfigInitParameters struct {
	IPReputationFileObjectExpiryDuration *string `json:"ipReputationFileObjectExpiryDuration,omitempty" tf:"ip_reputation_file_object_expiry_duration,omitempty"`

	IPReputationSyncInterval *string `json:"ipReputationSyncInterval,omitempty" tf:"ip_reputation_sync_interval,omitempty"`
}

type IPReputationConfigObservation struct {
	IPReputationFileObjectExpiryDuration *string `json:"ipReputationFileObjectExpiryDuration,omitempty" tf:"ip_reputation_file_object_expiry_duration,omitempty"`

	IPReputationSyncInterval *string `json:"ipReputationSyncInterval,omitempty" tf:"ip_reputation_sync_interval,omitempty"`
}

type IPReputationConfigParameters struct {

	// +kubebuilder:validation:Optional
	IPReputationFileObjectExpiryDuration *string `json:"ipReputationFileObjectExpiryDuration,omitempty" tf:"ip_reputation_file_object_expiry_duration,omitempty"`

	// +kubebuilder:validation:Optional
	IPReputationSyncInterval *string `json:"ipReputationSyncInterval,omitempty" tf:"ip_reputation_sync_interval,omitempty"`
}

type InventoryConfigInitParameters struct {
	Enable *string `json:"enable,omitempty" tf:"enable,omitempty"`
}

type InventoryConfigObservation struct {
	Enable *string `json:"enable,omitempty" tf:"enable,omitempty"`
}

type InventoryConfigParameters struct {

	// +kubebuilder:validation:Optional
	Enable *string `json:"enable,omitempty" tf:"enable,omitempty"`
}

type ManagedAccountsInitParameters struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Users []UsersInitParameters `json:"users,omitempty" tf:"users,omitempty"`
}

type ManagedAccountsObservation struct {
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Users []UsersObservation `json:"users,omitempty" tf:"users,omitempty"`
}

type ManagedAccountsParameters struct {

	// +kubebuilder:validation:Optional
	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Users []UsersParameters `json:"users,omitempty" tf:"users,omitempty"`
}

type OperationsConfigInitParameters struct {
	InventoryConfig []InventoryConfigInitParameters `json:"inventoryConfig,omitempty" tf:"inventory_config,omitempty"`
}

type OperationsConfigObservation struct {
	InventoryConfig []InventoryConfigObservation `json:"inventoryConfig,omitempty" tf:"inventory_config,omitempty"`
}

type OperationsConfigParameters struct {

	// +kubebuilder:validation:Optional
	InventoryConfig []InventoryConfigParameters `json:"inventoryConfig,omitempty" tf:"inventory_config,omitempty"`
}

type SaasLicensingConfigInitParameters struct {
	MaxServiceUnits *string `json:"maxServiceUnits,omitempty" tf:"max_service_units,omitempty"`

	ReserveServiceUnits *string `json:"reserveServiceUnits,omitempty" tf:"reserve_service_units,omitempty"`
}

type SaasLicensingConfigObservation struct {
	MaxServiceUnits *string `json:"maxServiceUnits,omitempty" tf:"max_service_units,omitempty"`

	ReserveServiceUnits *string `json:"reserveServiceUnits,omitempty" tf:"reserve_service_units,omitempty"`
}

type SaasLicensingConfigParameters struct {

	// +kubebuilder:validation:Optional
	MaxServiceUnits *string `json:"maxServiceUnits,omitempty" tf:"max_service_units,omitempty"`

	// +kubebuilder:validation:Optional
	ReserveServiceUnits *string `json:"reserveServiceUnits,omitempty" tf:"reserve_service_units,omitempty"`
}

type SplitProxyConfigurationInitParameters struct {
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type SplitProxyConfigurationObservation struct {
	Host *string `json:"host,omitempty" tf:"host,omitempty"`

	Port *string `json:"port,omitempty" tf:"port,omitempty"`

	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type SplitProxyConfigurationParameters struct {

	// +kubebuilder:validation:Optional
	Host *string `json:"host" tf:"host,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	Port *string `json:"port" tf:"port,omitempty"`

	// +kubebuilder:validation:Optional
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type UserAgentDBConfigInitParameters struct {
	AllowedBatchSize *string `json:"allowedBatchSize,omitempty" tf:"allowed_batch_size,omitempty"`
}

type UserAgentDBConfigObservation struct {
	AllowedBatchSize *string `json:"allowedBatchSize,omitempty" tf:"allowed_batch_size,omitempty"`
}

type UserAgentDBConfigParameters struct {

	// +kubebuilder:validation:Optional
	AllowedBatchSize *string `json:"allowedBatchSize,omitempty" tf:"allowed_batch_size,omitempty"`
}

type UsersInitParameters struct {
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`
}

type UsersObservation struct {
	Email *string `json:"email,omitempty" tf:"email,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Phone *string `json:"phone,omitempty" tf:"phone,omitempty"`
}

type UsersParameters struct {

	// +kubebuilder:validation:Optional
	Email *string `json:"email" tf:"email,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Phone *string `json:"phone" tf:"phone,omitempty"`
}

type WafConfigInitParameters struct {
	EnableAutoDownloadWafSignatures *string `json:"enableAutoDownloadWafSignatures,omitempty" tf:"enable_auto_download_waf_signatures,omitempty"`

	EnableWafSignaturesNotifications *string `json:"enableWafSignaturesNotifications,omitempty" tf:"enable_waf_signatures_notifications,omitempty"`
}

type WafConfigObservation struct {
	EnableAutoDownloadWafSignatures *string `json:"enableAutoDownloadWafSignatures,omitempty" tf:"enable_auto_download_waf_signatures,omitempty"`

	EnableWafSignaturesNotifications *string `json:"enableWafSignaturesNotifications,omitempty" tf:"enable_waf_signatures_notifications,omitempty"`
}

type WafConfigParameters struct {

	// +kubebuilder:validation:Optional
	EnableAutoDownloadWafSignatures *string `json:"enableAutoDownloadWafSignatures,omitempty" tf:"enable_auto_download_waf_signatures,omitempty"`

	// +kubebuilder:validation:Optional
	EnableWafSignaturesNotifications *string `json:"enableWafSignaturesNotifications,omitempty" tf:"enable_waf_signatures_notifications,omitempty"`
}

// ALBServicesConfigSpec defines the desired state of ALBServicesConfig
type ALBServicesConfigSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ALBServicesConfigParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ALBServicesConfigInitParameters `json:"initProvider,omitempty"`
}

// ALBServicesConfigStatus defines the observed state of ALBServicesConfig.
type ALBServicesConfigStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ALBServicesConfigObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// ALBServicesConfig is the Schema for the ALBServicesConfigs API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type ALBServicesConfig struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.appSignatureConfig) || has(self.initProvider.appSignatureConfig)",message="appSignatureConfig is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.caseConfig) || has(self.initProvider.caseConfig)",message="caseConfig is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.featureOptInStatus) || has(self.initProvider.featureOptInStatus)",message="featureOptInStatus is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.ipReputationConfig) || has(self.initProvider.ipReputationConfig)",message="ipReputationConfig is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.operationsConfig) || has(self.initProvider.operationsConfig)",message="operationsConfig is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.portalUrl) || has(self.initProvider.portalUrl)",message="portalUrl is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.saasLicensingConfig) || has(self.initProvider.saasLicensingConfig)",message="saasLicensingConfig is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.userAgentDbConfig) || has(self.initProvider.userAgentDbConfig)",message="userAgentDbConfig is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.wafConfig) || has(self.initProvider.wafConfig)",message="wafConfig is a required parameter"
	Spec   ALBServicesConfigSpec   `json:"spec"`
	Status ALBServicesConfigStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ALBServicesConfigList contains a list of ALBServicesConfigs
type ALBServicesConfigList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []ALBServicesConfig `json:"items"`
}

// Repository type metadata.
var (
	ALBServicesConfig_Kind             = "ALBServicesConfig"
	ALBServicesConfig_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: ALBServicesConfig_Kind}.String()
	ALBServicesConfig_KindAPIVersion   = ALBServicesConfig_Kind + "." + CRDGroupVersion.String()
	ALBServicesConfig_GroupVersionKind = CRDGroupVersion.WithKind(ALBServicesConfig_Kind)
)

func init() {
	SchemeBuilder.Register(&ALBServicesConfig{}, &ALBServicesConfigList{})
}
