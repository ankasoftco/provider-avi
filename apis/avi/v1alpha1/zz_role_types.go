/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type FiltersInitParameters struct {
	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	MatchLabel []FiltersMatchLabelInitParameters `json:"matchLabel,omitempty" tf:"match_label,omitempty"`

	MatchOperation *string `json:"matchOperation,omitempty" tf:"match_operation,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type FiltersMatchLabelInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type FiltersMatchLabelObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type FiltersMatchLabelParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type FiltersObservation struct {
	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	MatchLabel []FiltersMatchLabelObservation `json:"matchLabel,omitempty" tf:"match_label,omitempty"`

	MatchOperation *string `json:"matchOperation,omitempty" tf:"match_operation,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type FiltersParameters struct {

	// +kubebuilder:validation:Optional
	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	MatchLabel []FiltersMatchLabelParameters `json:"matchLabel" tf:"match_label,omitempty"`

	// +kubebuilder:validation:Optional
	MatchOperation *string `json:"matchOperation,omitempty" tf:"match_operation,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`
}

type PrivilegesInitParameters struct {
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	Subresource []SubresourceInitParameters `json:"subresource,omitempty" tf:"subresource,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PrivilegesObservation struct {
	Resource *string `json:"resource,omitempty" tf:"resource,omitempty"`

	Subresource []SubresourceObservation `json:"subresource,omitempty" tf:"subresource,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PrivilegesParameters struct {

	// +kubebuilder:validation:Optional
	Resource *string `json:"resource" tf:"resource,omitempty"`

	// +kubebuilder:validation:Optional
	Subresource []SubresourceParameters `json:"subresource,omitempty" tf:"subresource,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type RoleConfigpbAttributesInitParameters struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type RoleConfigpbAttributesObservation struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type RoleConfigpbAttributesParameters struct {

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type RoleInitParameters struct {
	AllowUnlabelledAccess *string `json:"allowUnlabelledAccess,omitempty" tf:"allow_unlabelled_access,omitempty"`

	ConfigpbAttributes []RoleConfigpbAttributesInitParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	Filters []FiltersInitParameters `json:"filters,omitempty" tf:"filters,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Privileges []PrivilegesInitParameters `json:"privileges,omitempty" tf:"privileges,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type RoleObservation struct {
	AllowUnlabelledAccess *string `json:"allowUnlabelledAccess,omitempty" tf:"allow_unlabelled_access,omitempty"`

	ConfigpbAttributes []RoleConfigpbAttributesObservation `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	Filters []FiltersObservation `json:"filters,omitempty" tf:"filters,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Privileges []PrivilegesObservation `json:"privileges,omitempty" tf:"privileges,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type RoleParameters struct {

	// +kubebuilder:validation:Optional
	AllowUnlabelledAccess *string `json:"allowUnlabelledAccess,omitempty" tf:"allow_unlabelled_access,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigpbAttributes []RoleConfigpbAttributesParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	Filters []FiltersParameters `json:"filters,omitempty" tf:"filters,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Privileges []PrivilegesParameters `json:"privileges,omitempty" tf:"privileges,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type SubresourceInitParameters struct {
	ExcludeSubresources *string `json:"excludeSubresources,omitempty" tf:"exclude_subresources,omitempty"`

	Subresources []*string `json:"subresources,omitempty" tf:"subresources,omitempty"`
}

type SubresourceObservation struct {
	ExcludeSubresources *string `json:"excludeSubresources,omitempty" tf:"exclude_subresources,omitempty"`

	Subresources []*string `json:"subresources,omitempty" tf:"subresources,omitempty"`
}

type SubresourceParameters struct {

	// +kubebuilder:validation:Optional
	ExcludeSubresources *string `json:"excludeSubresources,omitempty" tf:"exclude_subresources,omitempty"`

	// +kubebuilder:validation:Optional
	Subresources []*string `json:"subresources" tf:"subresources,omitempty"`
}

// RoleSpec defines the desired state of Role
type RoleSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     RoleParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider RoleInitParameters `json:"initProvider,omitempty"`
}

// RoleStatus defines the observed state of Role.
type RoleStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        RoleObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Role is the Schema for the Roles API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type Role struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	Spec   RoleSpec   `json:"spec"`
	Status RoleStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// RoleList contains a list of Roles
type RoleList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Role `json:"items"`
}

// Repository type metadata.
var (
	Role_Kind             = "Role"
	Role_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Role_Kind}.String()
	Role_KindAPIVersion   = Role_Kind + "." + CRDGroupVersion.String()
	Role_GroupVersionKind = CRDGroupVersion.WithKind(Role_Kind)
)

func init() {
	SchemeBuilder.Register(&Role{}, &RoleList{})
}
