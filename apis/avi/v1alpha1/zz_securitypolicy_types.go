/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AttacksInitParameters struct {
	AttackVector *string `json:"attackVector,omitempty" tf:"attack_vector,omitempty"`

	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	MaxMitigationAge *string `json:"maxMitigationAge,omitempty" tf:"max_mitigation_age,omitempty"`

	MitigationAction []MitigationActionInitParameters `json:"mitigationAction,omitempty" tf:"mitigation_action,omitempty"`

	Threshold *string `json:"threshold,omitempty" tf:"threshold,omitempty"`
}

type AttacksObservation struct {
	AttackVector *string `json:"attackVector,omitempty" tf:"attack_vector,omitempty"`

	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	MaxMitigationAge *string `json:"maxMitigationAge,omitempty" tf:"max_mitigation_age,omitempty"`

	MitigationAction []MitigationActionObservation `json:"mitigationAction,omitempty" tf:"mitigation_action,omitempty"`

	Threshold *string `json:"threshold,omitempty" tf:"threshold,omitempty"`
}

type AttacksParameters struct {

	// +kubebuilder:validation:Optional
	AttackVector *string `json:"attackVector" tf:"attack_vector,omitempty"`

	// +kubebuilder:validation:Optional
	Enabled *string `json:"enabled,omitempty" tf:"enabled,omitempty"`

	// +kubebuilder:validation:Optional
	MaxMitigationAge *string `json:"maxMitigationAge,omitempty" tf:"max_mitigation_age,omitempty"`

	// +kubebuilder:validation:Optional
	MitigationAction []MitigationActionParameters `json:"mitigationAction,omitempty" tf:"mitigation_action,omitempty"`

	// +kubebuilder:validation:Optional
	Threshold *string `json:"threshold,omitempty" tf:"threshold,omitempty"`
}

type DNSAmplificationDenyportsInitParameters struct {
	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`

	Ranges []DNSAmplificationDenyportsRangesInitParameters `json:"ranges,omitempty" tf:"ranges,omitempty"`
}

type DNSAmplificationDenyportsObservation struct {
	MatchCriteria *string `json:"matchCriteria,omitempty" tf:"match_criteria,omitempty"`

	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`

	Ranges []DNSAmplificationDenyportsRangesObservation `json:"ranges,omitempty" tf:"ranges,omitempty"`
}

type DNSAmplificationDenyportsParameters struct {

	// +kubebuilder:validation:Optional
	MatchCriteria *string `json:"matchCriteria" tf:"match_criteria,omitempty"`

	// +kubebuilder:validation:Optional
	Ports []*float64 `json:"ports,omitempty" tf:"ports,omitempty"`

	// +kubebuilder:validation:Optional
	Ranges []DNSAmplificationDenyportsRangesParameters `json:"ranges,omitempty" tf:"ranges,omitempty"`
}

type DNSAmplificationDenyportsRangesInitParameters struct {
	End *string `json:"end,omitempty" tf:"end,omitempty"`

	Start *string `json:"start,omitempty" tf:"start,omitempty"`
}

type DNSAmplificationDenyportsRangesObservation struct {
	End *string `json:"end,omitempty" tf:"end,omitempty"`

	Start *string `json:"start,omitempty" tf:"start,omitempty"`
}

type DNSAmplificationDenyportsRangesParameters struct {

	// +kubebuilder:validation:Optional
	End *string `json:"end" tf:"end,omitempty"`

	// +kubebuilder:validation:Optional
	Start *string `json:"start" tf:"start,omitempty"`
}

type DNSAttacksInitParameters struct {
	Attacks []AttacksInitParameters `json:"attacks,omitempty" tf:"attacks,omitempty"`

	OperMode *string `json:"operMode,omitempty" tf:"oper_mode,omitempty"`
}

type DNSAttacksObservation struct {
	Attacks []AttacksObservation `json:"attacks,omitempty" tf:"attacks,omitempty"`

	OperMode *string `json:"operMode,omitempty" tf:"oper_mode,omitempty"`
}

type DNSAttacksParameters struct {

	// +kubebuilder:validation:Optional
	Attacks []AttacksParameters `json:"attacks,omitempty" tf:"attacks,omitempty"`

	// +kubebuilder:validation:Optional
	OperMode *string `json:"operMode,omitempty" tf:"oper_mode,omitempty"`
}

type MitigationActionInitParameters struct {
	Deny *string `json:"deny,omitempty" tf:"deny,omitempty"`
}

type MitigationActionObservation struct {
	Deny *string `json:"deny,omitempty" tf:"deny,omitempty"`
}

type MitigationActionParameters struct {

	// +kubebuilder:validation:Optional
	Deny *string `json:"deny,omitempty" tf:"deny,omitempty"`
}

type SecurityPolicyConfigpbAttributesInitParameters struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type SecurityPolicyConfigpbAttributesObservation struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type SecurityPolicyConfigpbAttributesParameters struct {

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type SecurityPolicyInitParameters struct {
	ConfigpbAttributes []SecurityPolicyConfigpbAttributesInitParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	DNSAmplificationDenyports []DNSAmplificationDenyportsInitParameters `json:"dnsAmplificationDenyports,omitempty" tf:"dns_amplification_denyports,omitempty"`

	DNSAttacks []DNSAttacksInitParameters `json:"dnsAttacks,omitempty" tf:"dns_attacks,omitempty"`

	DNSPolicyIndex *string `json:"dnsPolicyIndex,omitempty" tf:"dns_policy_index,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	Markers []SecurityPolicyMarkersInitParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	NetworkSecurityPolicyIndex *string `json:"networkSecurityPolicyIndex,omitempty" tf:"network_security_policy_index,omitempty"`

	OperMode *string `json:"operMode,omitempty" tf:"oper_mode,omitempty"`

	TCPAttacks []TCPAttacksInitParameters `json:"tcpAttacks,omitempty" tf:"tcp_attacks,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UDPAttacks []UDPAttacksInitParameters `json:"udpAttacks,omitempty" tf:"udp_attacks,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type SecurityPolicyMarkersInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type SecurityPolicyMarkersObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type SecurityPolicyMarkersParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type SecurityPolicyObservation struct {
	ConfigpbAttributes []SecurityPolicyConfigpbAttributesObservation `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	DNSAmplificationDenyports []DNSAmplificationDenyportsObservation `json:"dnsAmplificationDenyports,omitempty" tf:"dns_amplification_denyports,omitempty"`

	DNSAttacks []DNSAttacksObservation `json:"dnsAttacks,omitempty" tf:"dns_attacks,omitempty"`

	DNSPolicyIndex *string `json:"dnsPolicyIndex,omitempty" tf:"dns_policy_index,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Markers []SecurityPolicyMarkersObservation `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	NetworkSecurityPolicyIndex *string `json:"networkSecurityPolicyIndex,omitempty" tf:"network_security_policy_index,omitempty"`

	OperMode *string `json:"operMode,omitempty" tf:"oper_mode,omitempty"`

	TCPAttacks []TCPAttacksParameters `json:"tcpAttacks,omitempty" tf:"tcp_attacks,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UDPAttacks []UDPAttacksParameters `json:"udpAttacks,omitempty" tf:"udp_attacks,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type SecurityPolicyParameters struct {

	// +kubebuilder:validation:Optional
	ConfigpbAttributes []SecurityPolicyConfigpbAttributesParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	DNSAmplificationDenyports []DNSAmplificationDenyportsParameters `json:"dnsAmplificationDenyports,omitempty" tf:"dns_amplification_denyports,omitempty"`

	// +kubebuilder:validation:Optional
	DNSAttacks []DNSAttacksParameters `json:"dnsAttacks,omitempty" tf:"dns_attacks,omitempty"`

	// +kubebuilder:validation:Optional
	DNSPolicyIndex *string `json:"dnsPolicyIndex,omitempty" tf:"dns_policy_index,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	Markers []SecurityPolicyMarkersParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NetworkSecurityPolicyIndex *string `json:"networkSecurityPolicyIndex,omitempty" tf:"network_security_policy_index,omitempty"`

	// +kubebuilder:validation:Optional
	OperMode *string `json:"operMode,omitempty" tf:"oper_mode,omitempty"`

	// +kubebuilder:validation:Optional
	TCPAttacks []TCPAttacksParameters `json:"tcpAttacks,omitempty" tf:"tcp_attacks,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	UDPAttacks []UDPAttacksParameters `json:"udpAttacks,omitempty" tf:"udp_attacks,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type TCPAttacksInitParameters struct {
}

type TCPAttacksObservation struct {
}

type TCPAttacksParameters struct {
}

type UDPAttacksInitParameters struct {
}

type UDPAttacksObservation struct {
}

type UDPAttacksParameters struct {
}

// SecurityPolicySpec defines the desired state of SecurityPolicy
type SecurityPolicySpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     SecurityPolicyParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider SecurityPolicyInitParameters `json:"initProvider,omitempty"`
}

// SecurityPolicyStatus defines the observed state of SecurityPolicy.
type SecurityPolicyStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        SecurityPolicyObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityPolicy is the Schema for the SecurityPolicys API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type SecurityPolicy struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	Spec   SecurityPolicySpec   `json:"spec"`
	Status SecurityPolicyStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// SecurityPolicyList contains a list of SecurityPolicys
type SecurityPolicyList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []SecurityPolicy `json:"items"`
}

// Repository type metadata.
var (
	SecurityPolicy_Kind             = "SecurityPolicy"
	SecurityPolicy_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: SecurityPolicy_Kind}.String()
	SecurityPolicy_KindAPIVersion   = SecurityPolicy_Kind + "." + CRDGroupVersion.String()
	SecurityPolicy_GroupVersionKind = CRDGroupVersion.WithKind(SecurityPolicy_Kind)
)

func init() {
	SchemeBuilder.Register(&SecurityPolicy{}, &SecurityPolicyList{})
}
