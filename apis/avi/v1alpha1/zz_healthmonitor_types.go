/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type AuthenticationInitParameters struct {
}

type AuthenticationObservation struct {
}

type AuthenticationParameters struct {

	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	UsernameSecretRef v1.SecretKeySelector `json:"usernameSecretRef" tf:"-"`
}

type DNSMonitorInitParameters struct {
	Qtype *string `json:"qtype,omitempty" tf:"qtype,omitempty"`

	QueryName *string `json:"queryName,omitempty" tf:"query_name,omitempty"`

	Rcode *string `json:"rcode,omitempty" tf:"rcode,omitempty"`

	RecordType *string `json:"recordType,omitempty" tf:"record_type,omitempty"`

	ResponseString *string `json:"responseString,omitempty" tf:"response_string,omitempty"`
}

type DNSMonitorObservation struct {
	Qtype *string `json:"qtype,omitempty" tf:"qtype,omitempty"`

	QueryName *string `json:"queryName,omitempty" tf:"query_name,omitempty"`

	Rcode *string `json:"rcode,omitempty" tf:"rcode,omitempty"`

	RecordType *string `json:"recordType,omitempty" tf:"record_type,omitempty"`

	ResponseString *string `json:"responseString,omitempty" tf:"response_string,omitempty"`
}

type DNSMonitorParameters struct {

	// +kubebuilder:validation:Optional
	Qtype *string `json:"qtype,omitempty" tf:"qtype,omitempty"`

	// +kubebuilder:validation:Optional
	QueryName *string `json:"queryName" tf:"query_name,omitempty"`

	// +kubebuilder:validation:Optional
	Rcode *string `json:"rcode,omitempty" tf:"rcode,omitempty"`

	// +kubebuilder:validation:Optional
	RecordType *string `json:"recordType,omitempty" tf:"record_type,omitempty"`

	// +kubebuilder:validation:Optional
	ResponseString *string `json:"responseString,omitempty" tf:"response_string,omitempty"`
}

type ExternalMonitorInitParameters struct {
	CommandCode *string `json:"commandCode,omitempty" tf:"command_code,omitempty"`

	CommandParameters *string `json:"commandParameters,omitempty" tf:"command_parameters,omitempty"`

	CommandPath *string `json:"commandPath,omitempty" tf:"command_path,omitempty"`

	CommandVariables *string `json:"commandVariables,omitempty" tf:"command_variables,omitempty"`
}

type ExternalMonitorObservation struct {
	CommandCode *string `json:"commandCode,omitempty" tf:"command_code,omitempty"`

	CommandParameters *string `json:"commandParameters,omitempty" tf:"command_parameters,omitempty"`

	CommandPath *string `json:"commandPath,omitempty" tf:"command_path,omitempty"`

	CommandVariables *string `json:"commandVariables,omitempty" tf:"command_variables,omitempty"`
}

type ExternalMonitorParameters struct {

	// +kubebuilder:validation:Optional
	CommandCode *string `json:"commandCode" tf:"command_code,omitempty"`

	// +kubebuilder:validation:Optional
	CommandParameters *string `json:"commandParameters,omitempty" tf:"command_parameters,omitempty"`

	// +kubebuilder:validation:Optional
	CommandPath *string `json:"commandPath,omitempty" tf:"command_path,omitempty"`

	// +kubebuilder:validation:Optional
	CommandVariables *string `json:"commandVariables,omitempty" tf:"command_variables,omitempty"`
}

type FtpMonitorInitParameters struct {
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`

	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	SSLAttributes []SSLAttributesInitParameters `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`
}

type FtpMonitorObservation struct {
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`

	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	SSLAttributes []SSLAttributesObservation `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`
}

type FtpMonitorParameters struct {

	// +kubebuilder:validation:Optional
	Filename *string `json:"filename" tf:"filename,omitempty"`

	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// +kubebuilder:validation:Optional
	SSLAttributes []SSLAttributesParameters `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`
}

type FtpsMonitorInitParameters struct {
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`

	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	SSLAttributes []FtpsMonitorSSLAttributesInitParameters `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`
}

type FtpsMonitorObservation struct {
	Filename *string `json:"filename,omitempty" tf:"filename,omitempty"`

	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	SSLAttributes []FtpsMonitorSSLAttributesObservation `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`
}

type FtpsMonitorParameters struct {

	// +kubebuilder:validation:Optional
	Filename *string `json:"filename" tf:"filename,omitempty"`

	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// +kubebuilder:validation:Optional
	SSLAttributes []FtpsMonitorSSLAttributesParameters `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`
}

type FtpsMonitorSSLAttributesInitParameters struct {
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	SSLProfileRef *string `json:"sslProfileRef,omitempty" tf:"ssl_profile_ref,omitempty"`

	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type FtpsMonitorSSLAttributesObservation struct {
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	SSLProfileRef *string `json:"sslProfileRef,omitempty" tf:"ssl_profile_ref,omitempty"`

	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type FtpsMonitorSSLAttributesParameters struct {

	// +kubebuilder:validation:Optional
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SSLProfileRef *string `json:"sslProfileRef" tf:"ssl_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type HTTPMonitorInitParameters struct {
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	ExactHTTPRequest *string `json:"exactHttpRequest,omitempty" tf:"exact_http_request,omitempty"`

	HTTPRequest *string `json:"httpRequest,omitempty" tf:"http_request,omitempty"`

	HTTPRequestBody *string `json:"httpRequestBody,omitempty" tf:"http_request_body,omitempty"`

	HTTPResponse *string `json:"httpResponse,omitempty" tf:"http_response,omitempty"`

	HTTPResponseCode []*string `json:"httpResponseCode,omitempty" tf:"http_response_code,omitempty"`

	MaintenanceCode []*float64 `json:"maintenanceCode,omitempty" tf:"maintenance_code,omitempty"`

	MaintenanceResponse *string `json:"maintenanceResponse,omitempty" tf:"maintenance_response,omitempty"`

	ResponseSize *string `json:"responseSize,omitempty" tf:"response_size,omitempty"`

	SSLAttributes []HTTPMonitorSSLAttributesInitParameters `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`
}

type HTTPMonitorObservation struct {
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	ExactHTTPRequest *string `json:"exactHttpRequest,omitempty" tf:"exact_http_request,omitempty"`

	HTTPRequest *string `json:"httpRequest,omitempty" tf:"http_request,omitempty"`

	HTTPRequestBody *string `json:"httpRequestBody,omitempty" tf:"http_request_body,omitempty"`

	HTTPResponse *string `json:"httpResponse,omitempty" tf:"http_response,omitempty"`

	HTTPResponseCode []*string `json:"httpResponseCode,omitempty" tf:"http_response_code,omitempty"`

	MaintenanceCode []*float64 `json:"maintenanceCode,omitempty" tf:"maintenance_code,omitempty"`

	MaintenanceResponse *string `json:"maintenanceResponse,omitempty" tf:"maintenance_response,omitempty"`

	ResponseSize *string `json:"responseSize,omitempty" tf:"response_size,omitempty"`

	SSLAttributes []HTTPMonitorSSLAttributesObservation `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`
}

type HTTPMonitorParameters struct {

	// +kubebuilder:validation:Optional
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// +kubebuilder:validation:Optional
	ExactHTTPRequest *string `json:"exactHttpRequest,omitempty" tf:"exact_http_request,omitempty"`

	// +kubebuilder:validation:Optional
	HTTPRequest *string `json:"httpRequest,omitempty" tf:"http_request,omitempty"`

	// +kubebuilder:validation:Optional
	HTTPRequestBody *string `json:"httpRequestBody,omitempty" tf:"http_request_body,omitempty"`

	// +kubebuilder:validation:Optional
	HTTPResponse *string `json:"httpResponse,omitempty" tf:"http_response,omitempty"`

	// +kubebuilder:validation:Optional
	HTTPResponseCode []*string `json:"httpResponseCode" tf:"http_response_code,omitempty"`

	// +kubebuilder:validation:Optional
	MaintenanceCode []*float64 `json:"maintenanceCode,omitempty" tf:"maintenance_code,omitempty"`

	// +kubebuilder:validation:Optional
	MaintenanceResponse *string `json:"maintenanceResponse,omitempty" tf:"maintenance_response,omitempty"`

	// +kubebuilder:validation:Optional
	ResponseSize *string `json:"responseSize,omitempty" tf:"response_size,omitempty"`

	// +kubebuilder:validation:Optional
	SSLAttributes []HTTPMonitorSSLAttributesParameters `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`
}

type HTTPMonitorSSLAttributesInitParameters struct {
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	SSLProfileRef *string `json:"sslProfileRef,omitempty" tf:"ssl_profile_ref,omitempty"`

	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type HTTPMonitorSSLAttributesObservation struct {
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	SSLProfileRef *string `json:"sslProfileRef,omitempty" tf:"ssl_profile_ref,omitempty"`

	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type HTTPMonitorSSLAttributesParameters struct {

	// +kubebuilder:validation:Optional
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SSLProfileRef *string `json:"sslProfileRef" tf:"ssl_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type HTTPSMonitorInitParameters struct {
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	ExactHTTPRequest *string `json:"exactHttpRequest,omitempty" tf:"exact_http_request,omitempty"`

	HTTPRequest *string `json:"httpRequest,omitempty" tf:"http_request,omitempty"`

	HTTPRequestBody *string `json:"httpRequestBody,omitempty" tf:"http_request_body,omitempty"`

	HTTPResponse *string `json:"httpResponse,omitempty" tf:"http_response,omitempty"`

	HTTPResponseCode []*string `json:"httpResponseCode,omitempty" tf:"http_response_code,omitempty"`

	MaintenanceCode []*float64 `json:"maintenanceCode,omitempty" tf:"maintenance_code,omitempty"`

	MaintenanceResponse *string `json:"maintenanceResponse,omitempty" tf:"maintenance_response,omitempty"`

	ResponseSize *string `json:"responseSize,omitempty" tf:"response_size,omitempty"`

	SSLAttributes []HTTPSMonitorSSLAttributesInitParameters `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`
}

type HTTPSMonitorObservation struct {
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	ExactHTTPRequest *string `json:"exactHttpRequest,omitempty" tf:"exact_http_request,omitempty"`

	HTTPRequest *string `json:"httpRequest,omitempty" tf:"http_request,omitempty"`

	HTTPRequestBody *string `json:"httpRequestBody,omitempty" tf:"http_request_body,omitempty"`

	HTTPResponse *string `json:"httpResponse,omitempty" tf:"http_response,omitempty"`

	HTTPResponseCode []*string `json:"httpResponseCode,omitempty" tf:"http_response_code,omitempty"`

	MaintenanceCode []*float64 `json:"maintenanceCode,omitempty" tf:"maintenance_code,omitempty"`

	MaintenanceResponse *string `json:"maintenanceResponse,omitempty" tf:"maintenance_response,omitempty"`

	ResponseSize *string `json:"responseSize,omitempty" tf:"response_size,omitempty"`

	SSLAttributes []HTTPSMonitorSSLAttributesObservation `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`
}

type HTTPSMonitorParameters struct {

	// +kubebuilder:validation:Optional
	AuthType *string `json:"authType,omitempty" tf:"auth_type,omitempty"`

	// +kubebuilder:validation:Optional
	ExactHTTPRequest *string `json:"exactHttpRequest,omitempty" tf:"exact_http_request,omitempty"`

	// +kubebuilder:validation:Optional
	HTTPRequest *string `json:"httpRequest,omitempty" tf:"http_request,omitempty"`

	// +kubebuilder:validation:Optional
	HTTPRequestBody *string `json:"httpRequestBody,omitempty" tf:"http_request_body,omitempty"`

	// +kubebuilder:validation:Optional
	HTTPResponse *string `json:"httpResponse,omitempty" tf:"http_response,omitempty"`

	// +kubebuilder:validation:Optional
	HTTPResponseCode []*string `json:"httpResponseCode" tf:"http_response_code,omitempty"`

	// +kubebuilder:validation:Optional
	MaintenanceCode []*float64 `json:"maintenanceCode,omitempty" tf:"maintenance_code,omitempty"`

	// +kubebuilder:validation:Optional
	MaintenanceResponse *string `json:"maintenanceResponse,omitempty" tf:"maintenance_response,omitempty"`

	// +kubebuilder:validation:Optional
	ResponseSize *string `json:"responseSize,omitempty" tf:"response_size,omitempty"`

	// +kubebuilder:validation:Optional
	SSLAttributes []HTTPSMonitorSSLAttributesParameters `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`
}

type HTTPSMonitorSSLAttributesInitParameters struct {
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	SSLProfileRef *string `json:"sslProfileRef,omitempty" tf:"ssl_profile_ref,omitempty"`

	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type HTTPSMonitorSSLAttributesObservation struct {
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	SSLProfileRef *string `json:"sslProfileRef,omitempty" tf:"ssl_profile_ref,omitempty"`

	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type HTTPSMonitorSSLAttributesParameters struct {

	// +kubebuilder:validation:Optional
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SSLProfileRef *string `json:"sslProfileRef" tf:"ssl_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type HealthMonitorConfigpbAttributesInitParameters struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type HealthMonitorConfigpbAttributesObservation struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type HealthMonitorConfigpbAttributesParameters struct {

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type HealthMonitorInitParameters struct {
	AllowDuplicateMonitors *string `json:"allowDuplicateMonitors,omitempty" tf:"allow_duplicate_monitors,omitempty"`

	Authentication []AuthenticationInitParameters `json:"authentication,omitempty" tf:"authentication,omitempty"`

	ConfigpbAttributes []HealthMonitorConfigpbAttributesInitParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	DNSMonitor []DNSMonitorInitParameters `json:"dnsMonitor,omitempty" tf:"dns_monitor,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	DisableQuickstart *string `json:"disableQuickstart,omitempty" tf:"disable_quickstart,omitempty"`

	ExternalMonitor []ExternalMonitorInitParameters `json:"externalMonitor,omitempty" tf:"external_monitor,omitempty"`

	FailedChecks *string `json:"failedChecks,omitempty" tf:"failed_checks,omitempty"`

	FtpMonitor []FtpMonitorInitParameters `json:"ftpMonitor,omitempty" tf:"ftp_monitor,omitempty"`

	FtpsMonitor []FtpsMonitorInitParameters `json:"ftpsMonitor,omitempty" tf:"ftps_monitor,omitempty"`

	HTTPMonitor []HTTPMonitorInitParameters `json:"httpMonitor,omitempty" tf:"http_monitor,omitempty"`

	HTTPSMonitor []HTTPSMonitorInitParameters `json:"httpsMonitor,omitempty" tf:"https_monitor,omitempty"`

	ImapMonitor []ImapMonitorInitParameters `json:"imapMonitor,omitempty" tf:"imap_monitor,omitempty"`

	ImapsMonitor []ImapsMonitorInitParameters `json:"imapsMonitor,omitempty" tf:"imaps_monitor,omitempty"`

	IsFederated *string `json:"isFederated,omitempty" tf:"is_federated,omitempty"`

	LdapMonitor []LdapMonitorInitParameters `json:"ldapMonitor,omitempty" tf:"ldap_monitor,omitempty"`

	LdapsMonitor []LdapsMonitorInitParameters `json:"ldapsMonitor,omitempty" tf:"ldaps_monitor,omitempty"`

	Markers []HealthMonitorMarkersInitParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	MonitorPort *string `json:"monitorPort,omitempty" tf:"monitor_port,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Pop3Monitor []Pop3MonitorInitParameters `json:"pop3Monitor,omitempty" tf:"pop3_monitor,omitempty"`

	Pop3SMonitor []Pop3SMonitorInitParameters `json:"pop3sMonitor,omitempty" tf:"pop3s_monitor,omitempty"`

	RadiusMonitor []RadiusMonitorInitParameters `json:"radiusMonitor,omitempty" tf:"radius_monitor,omitempty"`

	ReceiveTimeout *string `json:"receiveTimeout,omitempty" tf:"receive_timeout,omitempty"`

	SIPMonitor []SIPMonitorInitParameters `json:"sipMonitor,omitempty" tf:"sip_monitor,omitempty"`

	SMTPMonitor []SMTPMonitorInitParameters `json:"smtpMonitor,omitempty" tf:"smtp_monitor,omitempty"`

	SctpMonitor []SctpMonitorInitParameters `json:"sctpMonitor,omitempty" tf:"sctp_monitor,omitempty"`

	SendInterval *string `json:"sendInterval,omitempty" tf:"send_interval,omitempty"`

	SmtpsMonitor []SmtpsMonitorInitParameters `json:"smtpsMonitor,omitempty" tf:"smtps_monitor,omitempty"`

	SuccessfulChecks *string `json:"successfulChecks,omitempty" tf:"successful_checks,omitempty"`

	TCPMonitor []TCPMonitorInitParameters `json:"tcpMonitor,omitempty" tf:"tcp_monitor,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UDPMonitor []UDPMonitorInitParameters `json:"udpMonitor,omitempty" tf:"udp_monitor,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type HealthMonitorMarkersInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type HealthMonitorMarkersObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type HealthMonitorMarkersParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type HealthMonitorObservation struct {
	AllowDuplicateMonitors *string `json:"allowDuplicateMonitors,omitempty" tf:"allow_duplicate_monitors,omitempty"`

	Authentication []AuthenticationParameters `json:"authentication,omitempty" tf:"authentication,omitempty"`

	ConfigpbAttributes []HealthMonitorConfigpbAttributesObservation `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	DNSMonitor []DNSMonitorObservation `json:"dnsMonitor,omitempty" tf:"dns_monitor,omitempty"`

	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	DisableQuickstart *string `json:"disableQuickstart,omitempty" tf:"disable_quickstart,omitempty"`

	ExternalMonitor []ExternalMonitorObservation `json:"externalMonitor,omitempty" tf:"external_monitor,omitempty"`

	FailedChecks *string `json:"failedChecks,omitempty" tf:"failed_checks,omitempty"`

	FtpMonitor []FtpMonitorObservation `json:"ftpMonitor,omitempty" tf:"ftp_monitor,omitempty"`

	FtpsMonitor []FtpsMonitorObservation `json:"ftpsMonitor,omitempty" tf:"ftps_monitor,omitempty"`

	HTTPMonitor []HTTPMonitorObservation `json:"httpMonitor,omitempty" tf:"http_monitor,omitempty"`

	HTTPSMonitor []HTTPSMonitorObservation `json:"httpsMonitor,omitempty" tf:"https_monitor,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	ImapMonitor []ImapMonitorObservation `json:"imapMonitor,omitempty" tf:"imap_monitor,omitempty"`

	ImapsMonitor []ImapsMonitorObservation `json:"imapsMonitor,omitempty" tf:"imaps_monitor,omitempty"`

	IsFederated *string `json:"isFederated,omitempty" tf:"is_federated,omitempty"`

	LdapMonitor []LdapMonitorObservation `json:"ldapMonitor,omitempty" tf:"ldap_monitor,omitempty"`

	LdapsMonitor []LdapsMonitorObservation `json:"ldapsMonitor,omitempty" tf:"ldaps_monitor,omitempty"`

	Markers []HealthMonitorMarkersObservation `json:"markers,omitempty" tf:"markers,omitempty"`

	MonitorPort *string `json:"monitorPort,omitempty" tf:"monitor_port,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Pop3Monitor []Pop3MonitorObservation `json:"pop3Monitor,omitempty" tf:"pop3_monitor,omitempty"`

	Pop3SMonitor []Pop3SMonitorObservation `json:"pop3sMonitor,omitempty" tf:"pop3s_monitor,omitempty"`

	RadiusMonitor []RadiusMonitorObservation `json:"radiusMonitor,omitempty" tf:"radius_monitor,omitempty"`

	ReceiveTimeout *string `json:"receiveTimeout,omitempty" tf:"receive_timeout,omitempty"`

	SIPMonitor []SIPMonitorObservation `json:"sipMonitor,omitempty" tf:"sip_monitor,omitempty"`

	SMTPMonitor []SMTPMonitorObservation `json:"smtpMonitor,omitempty" tf:"smtp_monitor,omitempty"`

	SctpMonitor []SctpMonitorObservation `json:"sctpMonitor,omitempty" tf:"sctp_monitor,omitempty"`

	SendInterval *string `json:"sendInterval,omitempty" tf:"send_interval,omitempty"`

	SmtpsMonitor []SmtpsMonitorObservation `json:"smtpsMonitor,omitempty" tf:"smtps_monitor,omitempty"`

	SuccessfulChecks *string `json:"successfulChecks,omitempty" tf:"successful_checks,omitempty"`

	TCPMonitor []TCPMonitorObservation `json:"tcpMonitor,omitempty" tf:"tcp_monitor,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	UDPMonitor []UDPMonitorObservation `json:"udpMonitor,omitempty" tf:"udp_monitor,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type HealthMonitorParameters struct {

	// +kubebuilder:validation:Optional
	AllowDuplicateMonitors *string `json:"allowDuplicateMonitors,omitempty" tf:"allow_duplicate_monitors,omitempty"`

	// +kubebuilder:validation:Optional
	Authentication []AuthenticationParameters `json:"authentication,omitempty" tf:"authentication,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigpbAttributes []HealthMonitorConfigpbAttributesParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	DNSMonitor []DNSMonitorParameters `json:"dnsMonitor,omitempty" tf:"dns_monitor,omitempty"`

	// +kubebuilder:validation:Optional
	Description *string `json:"description,omitempty" tf:"description,omitempty"`

	// +kubebuilder:validation:Optional
	DisableQuickstart *string `json:"disableQuickstart,omitempty" tf:"disable_quickstart,omitempty"`

	// +kubebuilder:validation:Optional
	ExternalMonitor []ExternalMonitorParameters `json:"externalMonitor,omitempty" tf:"external_monitor,omitempty"`

	// +kubebuilder:validation:Optional
	FailedChecks *string `json:"failedChecks,omitempty" tf:"failed_checks,omitempty"`

	// +kubebuilder:validation:Optional
	FtpMonitor []FtpMonitorParameters `json:"ftpMonitor,omitempty" tf:"ftp_monitor,omitempty"`

	// +kubebuilder:validation:Optional
	FtpsMonitor []FtpsMonitorParameters `json:"ftpsMonitor,omitempty" tf:"ftps_monitor,omitempty"`

	// +kubebuilder:validation:Optional
	HTTPMonitor []HTTPMonitorParameters `json:"httpMonitor,omitempty" tf:"http_monitor,omitempty"`

	// +kubebuilder:validation:Optional
	HTTPSMonitor []HTTPSMonitorParameters `json:"httpsMonitor,omitempty" tf:"https_monitor,omitempty"`

	// +kubebuilder:validation:Optional
	ImapMonitor []ImapMonitorParameters `json:"imapMonitor,omitempty" tf:"imap_monitor,omitempty"`

	// +kubebuilder:validation:Optional
	ImapsMonitor []ImapsMonitorParameters `json:"imapsMonitor,omitempty" tf:"imaps_monitor,omitempty"`

	// +kubebuilder:validation:Optional
	IsFederated *string `json:"isFederated,omitempty" tf:"is_federated,omitempty"`

	// +kubebuilder:validation:Optional
	LdapMonitor []LdapMonitorParameters `json:"ldapMonitor,omitempty" tf:"ldap_monitor,omitempty"`

	// +kubebuilder:validation:Optional
	LdapsMonitor []LdapsMonitorParameters `json:"ldapsMonitor,omitempty" tf:"ldaps_monitor,omitempty"`

	// +kubebuilder:validation:Optional
	Markers []HealthMonitorMarkersParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	// +kubebuilder:validation:Optional
	MonitorPort *string `json:"monitorPort,omitempty" tf:"monitor_port,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Pop3Monitor []Pop3MonitorParameters `json:"pop3Monitor,omitempty" tf:"pop3_monitor,omitempty"`

	// +kubebuilder:validation:Optional
	Pop3SMonitor []Pop3SMonitorParameters `json:"pop3sMonitor,omitempty" tf:"pop3s_monitor,omitempty"`

	// +kubebuilder:validation:Optional
	RadiusMonitor []RadiusMonitorParameters `json:"radiusMonitor,omitempty" tf:"radius_monitor,omitempty"`

	// +kubebuilder:validation:Optional
	ReceiveTimeout *string `json:"receiveTimeout,omitempty" tf:"receive_timeout,omitempty"`

	// +kubebuilder:validation:Optional
	SIPMonitor []SIPMonitorParameters `json:"sipMonitor,omitempty" tf:"sip_monitor,omitempty"`

	// +kubebuilder:validation:Optional
	SMTPMonitor []SMTPMonitorParameters `json:"smtpMonitor,omitempty" tf:"smtp_monitor,omitempty"`

	// +kubebuilder:validation:Optional
	SctpMonitor []SctpMonitorParameters `json:"sctpMonitor,omitempty" tf:"sctp_monitor,omitempty"`

	// +kubebuilder:validation:Optional
	SendInterval *string `json:"sendInterval,omitempty" tf:"send_interval,omitempty"`

	// +kubebuilder:validation:Optional
	SmtpsMonitor []SmtpsMonitorParameters `json:"smtpsMonitor,omitempty" tf:"smtps_monitor,omitempty"`

	// +kubebuilder:validation:Optional
	SuccessfulChecks *string `json:"successfulChecks,omitempty" tf:"successful_checks,omitempty"`

	// +kubebuilder:validation:Optional
	TCPMonitor []TCPMonitorParameters `json:"tcpMonitor,omitempty" tf:"tcp_monitor,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type,omitempty" tf:"type,omitempty"`

	// +kubebuilder:validation:Optional
	UDPMonitor []UDPMonitorParameters `json:"udpMonitor,omitempty" tf:"udp_monitor,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type ImapMonitorInitParameters struct {
	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	SSLAttributes []ImapMonitorSSLAttributesInitParameters `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`
}

type ImapMonitorObservation struct {
	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	SSLAttributes []ImapMonitorSSLAttributesObservation `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`
}

type ImapMonitorParameters struct {

	// +kubebuilder:validation:Optional
	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	// +kubebuilder:validation:Optional
	SSLAttributes []ImapMonitorSSLAttributesParameters `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`
}

type ImapMonitorSSLAttributesInitParameters struct {
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	SSLProfileRef *string `json:"sslProfileRef,omitempty" tf:"ssl_profile_ref,omitempty"`

	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type ImapMonitorSSLAttributesObservation struct {
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	SSLProfileRef *string `json:"sslProfileRef,omitempty" tf:"ssl_profile_ref,omitempty"`

	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type ImapMonitorSSLAttributesParameters struct {

	// +kubebuilder:validation:Optional
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SSLProfileRef *string `json:"sslProfileRef" tf:"ssl_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type ImapsMonitorInitParameters struct {
	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	SSLAttributes []ImapsMonitorSSLAttributesInitParameters `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`
}

type ImapsMonitorObservation struct {
	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	SSLAttributes []ImapsMonitorSSLAttributesObservation `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`
}

type ImapsMonitorParameters struct {

	// +kubebuilder:validation:Optional
	Folder *string `json:"folder,omitempty" tf:"folder,omitempty"`

	// +kubebuilder:validation:Optional
	SSLAttributes []ImapsMonitorSSLAttributesParameters `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`
}

type ImapsMonitorSSLAttributesInitParameters struct {
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	SSLProfileRef *string `json:"sslProfileRef,omitempty" tf:"ssl_profile_ref,omitempty"`

	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type ImapsMonitorSSLAttributesObservation struct {
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	SSLProfileRef *string `json:"sslProfileRef,omitempty" tf:"ssl_profile_ref,omitempty"`

	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type ImapsMonitorSSLAttributesParameters struct {

	// +kubebuilder:validation:Optional
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SSLProfileRef *string `json:"sslProfileRef" tf:"ssl_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type LdapMonitorInitParameters struct {
	Attributes *string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	BaseDn *string `json:"baseDn,omitempty" tf:"base_dn,omitempty"`

	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	SSLAttributes []LdapMonitorSSLAttributesInitParameters `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`

	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

type LdapMonitorObservation struct {
	Attributes *string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	BaseDn *string `json:"baseDn,omitempty" tf:"base_dn,omitempty"`

	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	SSLAttributes []LdapMonitorSSLAttributesObservation `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`

	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

type LdapMonitorParameters struct {

	// +kubebuilder:validation:Optional
	Attributes *string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// +kubebuilder:validation:Optional
	BaseDn *string `json:"baseDn" tf:"base_dn,omitempty"`

	// +kubebuilder:validation:Optional
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// +kubebuilder:validation:Optional
	SSLAttributes []LdapMonitorSSLAttributesParameters `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

type LdapMonitorSSLAttributesInitParameters struct {
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	SSLProfileRef *string `json:"sslProfileRef,omitempty" tf:"ssl_profile_ref,omitempty"`

	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type LdapMonitorSSLAttributesObservation struct {
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	SSLProfileRef *string `json:"sslProfileRef,omitempty" tf:"ssl_profile_ref,omitempty"`

	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type LdapMonitorSSLAttributesParameters struct {

	// +kubebuilder:validation:Optional
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SSLProfileRef *string `json:"sslProfileRef" tf:"ssl_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type LdapsMonitorInitParameters struct {
	Attributes *string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	BaseDn *string `json:"baseDn,omitempty" tf:"base_dn,omitempty"`

	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	SSLAttributes []LdapsMonitorSSLAttributesInitParameters `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`

	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

type LdapsMonitorObservation struct {
	Attributes *string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	BaseDn *string `json:"baseDn,omitempty" tf:"base_dn,omitempty"`

	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	SSLAttributes []LdapsMonitorSSLAttributesObservation `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`

	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

type LdapsMonitorParameters struct {

	// +kubebuilder:validation:Optional
	Attributes *string `json:"attributes,omitempty" tf:"attributes,omitempty"`

	// +kubebuilder:validation:Optional
	BaseDn *string `json:"baseDn" tf:"base_dn,omitempty"`

	// +kubebuilder:validation:Optional
	Filter *string `json:"filter,omitempty" tf:"filter,omitempty"`

	// +kubebuilder:validation:Optional
	SSLAttributes []LdapsMonitorSSLAttributesParameters `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	Scope *string `json:"scope,omitempty" tf:"scope,omitempty"`
}

type LdapsMonitorSSLAttributesInitParameters struct {
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	SSLProfileRef *string `json:"sslProfileRef,omitempty" tf:"ssl_profile_ref,omitempty"`

	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type LdapsMonitorSSLAttributesObservation struct {
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	SSLProfileRef *string `json:"sslProfileRef,omitempty" tf:"ssl_profile_ref,omitempty"`

	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type LdapsMonitorSSLAttributesParameters struct {

	// +kubebuilder:validation:Optional
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SSLProfileRef *string `json:"sslProfileRef" tf:"ssl_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type Pop3MonitorInitParameters struct {
	SSLAttributes []Pop3MonitorSSLAttributesInitParameters `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`
}

type Pop3MonitorObservation struct {
	SSLAttributes []Pop3MonitorSSLAttributesObservation `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`
}

type Pop3MonitorParameters struct {

	// +kubebuilder:validation:Optional
	SSLAttributes []Pop3MonitorSSLAttributesParameters `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`
}

type Pop3MonitorSSLAttributesInitParameters struct {
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	SSLProfileRef *string `json:"sslProfileRef,omitempty" tf:"ssl_profile_ref,omitempty"`

	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type Pop3MonitorSSLAttributesObservation struct {
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	SSLProfileRef *string `json:"sslProfileRef,omitempty" tf:"ssl_profile_ref,omitempty"`

	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type Pop3MonitorSSLAttributesParameters struct {

	// +kubebuilder:validation:Optional
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SSLProfileRef *string `json:"sslProfileRef" tf:"ssl_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type Pop3SMonitorInitParameters struct {
	SSLAttributes []Pop3SMonitorSSLAttributesInitParameters `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`
}

type Pop3SMonitorObservation struct {
	SSLAttributes []Pop3SMonitorSSLAttributesObservation `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`
}

type Pop3SMonitorParameters struct {

	// +kubebuilder:validation:Optional
	SSLAttributes []Pop3SMonitorSSLAttributesParameters `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`
}

type Pop3SMonitorSSLAttributesInitParameters struct {
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	SSLProfileRef *string `json:"sslProfileRef,omitempty" tf:"ssl_profile_ref,omitempty"`

	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type Pop3SMonitorSSLAttributesObservation struct {
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	SSLProfileRef *string `json:"sslProfileRef,omitempty" tf:"ssl_profile_ref,omitempty"`

	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type Pop3SMonitorSSLAttributesParameters struct {

	// +kubebuilder:validation:Optional
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SSLProfileRef *string `json:"sslProfileRef" tf:"ssl_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type RadiusMonitorInitParameters struct {
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type RadiusMonitorObservation struct {
	Username *string `json:"username,omitempty" tf:"username,omitempty"`
}

type RadiusMonitorParameters struct {

	// +kubebuilder:validation:Required
	PasswordSecretRef v1.SecretKeySelector `json:"passwordSecretRef" tf:"-"`

	// +kubebuilder:validation:Required
	SharedSecretSecretRef v1.SecretKeySelector `json:"sharedSecretSecretRef" tf:"-"`

	// +kubebuilder:validation:Optional
	Username *string `json:"username" tf:"username,omitempty"`
}

type SIPMonitorInitParameters struct {
	SIPMonitorTransport *string `json:"sipMonitorTransport,omitempty" tf:"sip_monitor_transport,omitempty"`

	SIPRequestCode *string `json:"sipRequestCode,omitempty" tf:"sip_request_code,omitempty"`

	SIPResponse *string `json:"sipResponse,omitempty" tf:"sip_response,omitempty"`
}

type SIPMonitorObservation struct {
	SIPMonitorTransport *string `json:"sipMonitorTransport,omitempty" tf:"sip_monitor_transport,omitempty"`

	SIPRequestCode *string `json:"sipRequestCode,omitempty" tf:"sip_request_code,omitempty"`

	SIPResponse *string `json:"sipResponse,omitempty" tf:"sip_response,omitempty"`
}

type SIPMonitorParameters struct {

	// +kubebuilder:validation:Optional
	SIPMonitorTransport *string `json:"sipMonitorTransport,omitempty" tf:"sip_monitor_transport,omitempty"`

	// +kubebuilder:validation:Optional
	SIPRequestCode *string `json:"sipRequestCode,omitempty" tf:"sip_request_code,omitempty"`

	// +kubebuilder:validation:Optional
	SIPResponse *string `json:"sipResponse,omitempty" tf:"sip_response,omitempty"`
}

type SMTPMonitorInitParameters struct {
	Domainname *string `json:"domainname,omitempty" tf:"domainname,omitempty"`

	MailData *string `json:"mailData,omitempty" tf:"mail_data,omitempty"`

	RecipientsIds []*string `json:"recipientsIds,omitempty" tf:"recipients_ids,omitempty"`

	SSLAttributes []SMTPMonitorSSLAttributesInitParameters `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`

	SenderID *string `json:"senderId,omitempty" tf:"sender_id,omitempty"`
}

type SMTPMonitorObservation struct {
	Domainname *string `json:"domainname,omitempty" tf:"domainname,omitempty"`

	MailData *string `json:"mailData,omitempty" tf:"mail_data,omitempty"`

	RecipientsIds []*string `json:"recipientsIds,omitempty" tf:"recipients_ids,omitempty"`

	SSLAttributes []SMTPMonitorSSLAttributesObservation `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`

	SenderID *string `json:"senderId,omitempty" tf:"sender_id,omitempty"`
}

type SMTPMonitorParameters struct {

	// +kubebuilder:validation:Optional
	Domainname *string `json:"domainname,omitempty" tf:"domainname,omitempty"`

	// +kubebuilder:validation:Optional
	MailData *string `json:"mailData,omitempty" tf:"mail_data,omitempty"`

	// +kubebuilder:validation:Optional
	RecipientsIds []*string `json:"recipientsIds,omitempty" tf:"recipients_ids,omitempty"`

	// +kubebuilder:validation:Optional
	SSLAttributes []SMTPMonitorSSLAttributesParameters `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	SenderID *string `json:"senderId,omitempty" tf:"sender_id,omitempty"`
}

type SMTPMonitorSSLAttributesInitParameters struct {
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	SSLProfileRef *string `json:"sslProfileRef,omitempty" tf:"ssl_profile_ref,omitempty"`

	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type SMTPMonitorSSLAttributesObservation struct {
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	SSLProfileRef *string `json:"sslProfileRef,omitempty" tf:"ssl_profile_ref,omitempty"`

	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type SMTPMonitorSSLAttributesParameters struct {

	// +kubebuilder:validation:Optional
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SSLProfileRef *string `json:"sslProfileRef" tf:"ssl_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type SSLAttributesInitParameters struct {
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	SSLProfileRef *string `json:"sslProfileRef,omitempty" tf:"ssl_profile_ref,omitempty"`

	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type SSLAttributesObservation struct {
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	SSLProfileRef *string `json:"sslProfileRef,omitempty" tf:"ssl_profile_ref,omitempty"`

	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type SSLAttributesParameters struct {

	// +kubebuilder:validation:Optional
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SSLProfileRef *string `json:"sslProfileRef" tf:"ssl_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type SctpMonitorInitParameters struct {
	SctpRequest *string `json:"sctpRequest,omitempty" tf:"sctp_request,omitempty"`

	SctpResponse *string `json:"sctpResponse,omitempty" tf:"sctp_response,omitempty"`
}

type SctpMonitorObservation struct {
	SctpRequest *string `json:"sctpRequest,omitempty" tf:"sctp_request,omitempty"`

	SctpResponse *string `json:"sctpResponse,omitempty" tf:"sctp_response,omitempty"`
}

type SctpMonitorParameters struct {

	// +kubebuilder:validation:Optional
	SctpRequest *string `json:"sctpRequest,omitempty" tf:"sctp_request,omitempty"`

	// +kubebuilder:validation:Optional
	SctpResponse *string `json:"sctpResponse,omitempty" tf:"sctp_response,omitempty"`
}

type SmtpsMonitorInitParameters struct {
	Domainname *string `json:"domainname,omitempty" tf:"domainname,omitempty"`

	MailData *string `json:"mailData,omitempty" tf:"mail_data,omitempty"`

	RecipientsIds []*string `json:"recipientsIds,omitempty" tf:"recipients_ids,omitempty"`

	SSLAttributes []SmtpsMonitorSSLAttributesInitParameters `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`

	SenderID *string `json:"senderId,omitempty" tf:"sender_id,omitempty"`
}

type SmtpsMonitorObservation struct {
	Domainname *string `json:"domainname,omitempty" tf:"domainname,omitempty"`

	MailData *string `json:"mailData,omitempty" tf:"mail_data,omitempty"`

	RecipientsIds []*string `json:"recipientsIds,omitempty" tf:"recipients_ids,omitempty"`

	SSLAttributes []SmtpsMonitorSSLAttributesObservation `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`

	SenderID *string `json:"senderId,omitempty" tf:"sender_id,omitempty"`
}

type SmtpsMonitorParameters struct {

	// +kubebuilder:validation:Optional
	Domainname *string `json:"domainname,omitempty" tf:"domainname,omitempty"`

	// +kubebuilder:validation:Optional
	MailData *string `json:"mailData,omitempty" tf:"mail_data,omitempty"`

	// +kubebuilder:validation:Optional
	RecipientsIds []*string `json:"recipientsIds,omitempty" tf:"recipients_ids,omitempty"`

	// +kubebuilder:validation:Optional
	SSLAttributes []SmtpsMonitorSSLAttributesParameters `json:"sslAttributes,omitempty" tf:"ssl_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	SenderID *string `json:"senderId,omitempty" tf:"sender_id,omitempty"`
}

type SmtpsMonitorSSLAttributesInitParameters struct {
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	SSLProfileRef *string `json:"sslProfileRef,omitempty" tf:"ssl_profile_ref,omitempty"`

	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type SmtpsMonitorSSLAttributesObservation struct {
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	SSLProfileRef *string `json:"sslProfileRef,omitempty" tf:"ssl_profile_ref,omitempty"`

	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type SmtpsMonitorSSLAttributesParameters struct {

	// +kubebuilder:validation:Optional
	PkiProfileRef *string `json:"pkiProfileRef,omitempty" tf:"pki_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SSLKeyAndCertificateRef *string `json:"sslKeyAndCertificateRef,omitempty" tf:"ssl_key_and_certificate_ref,omitempty"`

	// +kubebuilder:validation:Optional
	SSLProfileRef *string `json:"sslProfileRef" tf:"ssl_profile_ref,omitempty"`

	// +kubebuilder:validation:Optional
	ServerName *string `json:"serverName,omitempty" tf:"server_name,omitempty"`
}

type TCPMonitorInitParameters struct {
	MaintenanceResponse *string `json:"maintenanceResponse,omitempty" tf:"maintenance_response,omitempty"`

	TCPHalfOpen *string `json:"tcpHalfOpen,omitempty" tf:"tcp_half_open,omitempty"`

	TCPRequest *string `json:"tcpRequest,omitempty" tf:"tcp_request,omitempty"`

	TCPResponse *string `json:"tcpResponse,omitempty" tf:"tcp_response,omitempty"`
}

type TCPMonitorObservation struct {
	MaintenanceResponse *string `json:"maintenanceResponse,omitempty" tf:"maintenance_response,omitempty"`

	TCPHalfOpen *string `json:"tcpHalfOpen,omitempty" tf:"tcp_half_open,omitempty"`

	TCPRequest *string `json:"tcpRequest,omitempty" tf:"tcp_request,omitempty"`

	TCPResponse *string `json:"tcpResponse,omitempty" tf:"tcp_response,omitempty"`
}

type TCPMonitorParameters struct {

	// +kubebuilder:validation:Optional
	MaintenanceResponse *string `json:"maintenanceResponse,omitempty" tf:"maintenance_response,omitempty"`

	// +kubebuilder:validation:Optional
	TCPHalfOpen *string `json:"tcpHalfOpen,omitempty" tf:"tcp_half_open,omitempty"`

	// +kubebuilder:validation:Optional
	TCPRequest *string `json:"tcpRequest,omitempty" tf:"tcp_request,omitempty"`

	// +kubebuilder:validation:Optional
	TCPResponse *string `json:"tcpResponse,omitempty" tf:"tcp_response,omitempty"`
}

type UDPMonitorInitParameters struct {
	MaintenanceResponse *string `json:"maintenanceResponse,omitempty" tf:"maintenance_response,omitempty"`

	UDPRequest *string `json:"udpRequest,omitempty" tf:"udp_request,omitempty"`

	UDPResponse *string `json:"udpResponse,omitempty" tf:"udp_response,omitempty"`
}

type UDPMonitorObservation struct {
	MaintenanceResponse *string `json:"maintenanceResponse,omitempty" tf:"maintenance_response,omitempty"`

	UDPRequest *string `json:"udpRequest,omitempty" tf:"udp_request,omitempty"`

	UDPResponse *string `json:"udpResponse,omitempty" tf:"udp_response,omitempty"`
}

type UDPMonitorParameters struct {

	// +kubebuilder:validation:Optional
	MaintenanceResponse *string `json:"maintenanceResponse,omitempty" tf:"maintenance_response,omitempty"`

	// +kubebuilder:validation:Optional
	UDPRequest *string `json:"udpRequest,omitempty" tf:"udp_request,omitempty"`

	// +kubebuilder:validation:Optional
	UDPResponse *string `json:"udpResponse,omitempty" tf:"udp_response,omitempty"`
}

// HealthMonitorSpec defines the desired state of HealthMonitor
type HealthMonitorSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     HealthMonitorParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider HealthMonitorInitParameters `json:"initProvider,omitempty"`
}

// HealthMonitorStatus defines the observed state of HealthMonitor.
type HealthMonitorStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        HealthMonitorObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// HealthMonitor is the Schema for the HealthMonitors API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type HealthMonitor struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.type) || has(self.initProvider.type)",message="type is a required parameter"
	Spec   HealthMonitorSpec   `json:"spec"`
	Status HealthMonitorStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// HealthMonitorList contains a list of HealthMonitors
type HealthMonitorList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []HealthMonitor `json:"items"`
}

// Repository type metadata.
var (
	HealthMonitor_Kind             = "HealthMonitor"
	HealthMonitor_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: HealthMonitor_Kind}.String()
	HealthMonitor_KindAPIVersion   = HealthMonitor_Kind + "." + CRDGroupVersion.String()
	HealthMonitor_GroupVersionKind = CRDGroupVersion.WithKind(HealthMonitor_Kind)
)

func init() {
	SchemeBuilder.Register(&HealthMonitor{}, &HealthMonitorList{})
}
