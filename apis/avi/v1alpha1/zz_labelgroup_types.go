/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type LabelGroupConfigpbAttributesInitParameters struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type LabelGroupConfigpbAttributesObservation struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type LabelGroupConfigpbAttributesParameters struct {

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type LabelGroupInitParameters struct {
	ConfigpbAttributes []LabelGroupConfigpbAttributesInitParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	Labels []LabelGroupLabelsInitParameters `json:"labels,omitempty" tf:"labels,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type LabelGroupLabelsInitParameters struct {
	MatchLabel []MatchLabelInitParameters `json:"matchLabel,omitempty" tf:"match_label,omitempty"`

	MatchOperation *string `json:"matchOperation,omitempty" tf:"match_operation,omitempty"`
}

type LabelGroupLabelsObservation struct {
	MatchLabel []MatchLabelObservation `json:"matchLabel,omitempty" tf:"match_label,omitempty"`

	MatchOperation *string `json:"matchOperation,omitempty" tf:"match_operation,omitempty"`
}

type LabelGroupLabelsParameters struct {

	// +kubebuilder:validation:Optional
	MatchLabel []MatchLabelParameters `json:"matchLabel" tf:"match_label,omitempty"`

	// +kubebuilder:validation:Optional
	MatchOperation *string `json:"matchOperation,omitempty" tf:"match_operation,omitempty"`
}

type LabelGroupObservation struct {
	ConfigpbAttributes []LabelGroupConfigpbAttributesObservation `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Labels []LabelGroupLabelsObservation `json:"labels,omitempty" tf:"labels,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type LabelGroupParameters struct {

	// +kubebuilder:validation:Optional
	ConfigpbAttributes []LabelGroupConfigpbAttributesParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	Labels []LabelGroupLabelsParameters `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type MatchLabelInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type MatchLabelObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type MatchLabelParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

// LabelGroupSpec defines the desired state of LabelGroup
type LabelGroupSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     LabelGroupParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider LabelGroupInitParameters `json:"initProvider,omitempty"`
}

// LabelGroupStatus defines the observed state of LabelGroup.
type LabelGroupStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        LabelGroupObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// LabelGroup is the Schema for the LabelGroups API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type LabelGroup struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	Spec   LabelGroupSpec   `json:"spec"`
	Status LabelGroupStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// LabelGroupList contains a list of LabelGroups
type LabelGroupList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []LabelGroup `json:"items"`
}

// Repository type metadata.
var (
	LabelGroup_Kind             = "LabelGroup"
	LabelGroup_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: LabelGroup_Kind}.String()
	LabelGroup_KindAPIVersion   = LabelGroup_Kind + "." + CRDGroupVersion.String()
	LabelGroup_GroupVersionKind = CRDGroupVersion.WithKind(LabelGroup_Kind)
)

func init() {
	SchemeBuilder.Register(&LabelGroup{}, &LabelGroupList{})
}
