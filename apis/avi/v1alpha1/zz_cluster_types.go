/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type ClusterInitParameters struct {
	ClusterState []ClusterStateInitParameters `json:"clusterState,omitempty" tf:"cluster_state,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Nodes []NodesInitParameters `json:"nodes,omitempty" tf:"nodes,omitempty"`

	RejoinNodesAutomatically *string `json:"rejoinNodesAutomatically,omitempty" tf:"rejoin_nodes_automatically,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	VirtualIP []VirtualIPInitParameters `json:"virtualIp,omitempty" tf:"virtual_ip,omitempty"`
}

type ClusterObservation struct {
	ClusterState []ClusterStateObservation `json:"clusterState,omitempty" tf:"cluster_state,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	Nodes []NodesObservation `json:"nodes,omitempty" tf:"nodes,omitempty"`

	RejoinNodesAutomatically *string `json:"rejoinNodesAutomatically,omitempty" tf:"rejoin_nodes_automatically,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	VirtualIP []VirtualIPObservation `json:"virtualIp,omitempty" tf:"virtual_ip,omitempty"`
}

type ClusterParameters struct {

	// +kubebuilder:validation:Optional
	ClusterState []ClusterStateParameters `json:"clusterState,omitempty" tf:"cluster_state,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	Nodes []NodesParameters `json:"nodes,omitempty" tf:"nodes,omitempty"`

	// +kubebuilder:validation:Optional
	RejoinNodesAutomatically *string `json:"rejoinNodesAutomatically,omitempty" tf:"rejoin_nodes_automatically,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// +kubebuilder:validation:Optional
	VirtualIP []VirtualIPParameters `json:"virtualIp,omitempty" tf:"virtual_ip,omitempty"`
}

type ClusterStateInitParameters struct {
	Progress *string `json:"progress,omitempty" tf:"progress,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	UpSince *string `json:"upSince,omitempty" tf:"up_since,omitempty"`
}

type ClusterStateObservation struct {
	Progress *string `json:"progress,omitempty" tf:"progress,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`

	UpSince *string `json:"upSince,omitempty" tf:"up_since,omitempty"`
}

type ClusterStateParameters struct {

	// +kubebuilder:validation:Optional
	Progress *string `json:"progress,omitempty" tf:"progress,omitempty"`

	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`

	// +kubebuilder:validation:Optional
	UpSince *string `json:"upSince,omitempty" tf:"up_since,omitempty"`
}

type Gateway6InitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type Gateway6Observation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type Gateway6Parameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type GatewayInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type GatewayObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type GatewayParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type IPIPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IPIPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type IPIPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type IPInitParameters struct {
	IPAddr []IPIPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type IPObservation struct {
	IPAddr []IPIPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type IPParameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []IPIPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type InterfacesInitParameters struct {
	Gateway []GatewayInitParameters `json:"gateway,omitempty" tf:"gateway,omitempty"`

	Gateway6 []Gateway6InitParameters `json:"gateway6,omitempty" tf:"gateway6,omitempty"`

	IP []IPInitParameters `json:"ip,omitempty" tf:"ip,omitempty"`

	IfName *string `json:"ifName,omitempty" tf:"if_name,omitempty"`

	Ip6 []Ip6InitParameters `json:"ip6,omitempty" tf:"ip6,omitempty"`

	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	Mode6 *string `json:"mode6,omitempty" tf:"mode6,omitempty"`

	PublicIPOrName []PublicIPOrNameInitParameters `json:"publicIpOrName,omitempty" tf:"public_ip_or_name,omitempty"`
}

type InterfacesObservation struct {
	Gateway []GatewayObservation `json:"gateway,omitempty" tf:"gateway,omitempty"`

	Gateway6 []Gateway6Observation `json:"gateway6,omitempty" tf:"gateway6,omitempty"`

	IP []IPObservation `json:"ip,omitempty" tf:"ip,omitempty"`

	IfName *string `json:"ifName,omitempty" tf:"if_name,omitempty"`

	Ip6 []Ip6Observation `json:"ip6,omitempty" tf:"ip6,omitempty"`

	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	Mode6 *string `json:"mode6,omitempty" tf:"mode6,omitempty"`

	PublicIPOrName []PublicIPOrNameObservation `json:"publicIpOrName,omitempty" tf:"public_ip_or_name,omitempty"`
}

type InterfacesParameters struct {

	// +kubebuilder:validation:Optional
	Gateway []GatewayParameters `json:"gateway,omitempty" tf:"gateway,omitempty"`

	// +kubebuilder:validation:Optional
	Gateway6 []Gateway6Parameters `json:"gateway6,omitempty" tf:"gateway6,omitempty"`

	// +kubebuilder:validation:Optional
	IP []IPParameters `json:"ip,omitempty" tf:"ip,omitempty"`

	// +kubebuilder:validation:Optional
	IfName *string `json:"ifName,omitempty" tf:"if_name,omitempty"`

	// +kubebuilder:validation:Optional
	Ip6 []Ip6Parameters `json:"ip6,omitempty" tf:"ip6,omitempty"`

	// +kubebuilder:validation:Optional
	Labels []*string `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Optional
	MacAddress *string `json:"macAddress,omitempty" tf:"mac_address,omitempty"`

	// +kubebuilder:validation:Optional
	Mode *string `json:"mode,omitempty" tf:"mode,omitempty"`

	// +kubebuilder:validation:Optional
	Mode6 *string `json:"mode6,omitempty" tf:"mode6,omitempty"`

	// +kubebuilder:validation:Optional
	PublicIPOrName []PublicIPOrNameParameters `json:"publicIpOrName,omitempty" tf:"public_ip_or_name,omitempty"`
}

type Ip6IPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type Ip6IPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type Ip6IPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type Ip6InitParameters struct {
	IPAddr []Ip6IPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type Ip6Observation struct {
	IPAddr []Ip6IPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type Ip6Parameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []Ip6IPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type LabelsInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type LabelsObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type LabelsParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Value *string `json:"value,omitempty" tf:"value,omitempty"`
}

type NextHopInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NextHopObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NextHopParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type NodesIPInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NodesIPObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NodesIPParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type NodesInitParameters struct {
	Categories []*string `json:"categories,omitempty" tf:"categories,omitempty"`

	IP []NodesIPInitParameters `json:"ip,omitempty" tf:"ip,omitempty"`

	Interfaces []InterfacesInitParameters `json:"interfaces,omitempty" tf:"interfaces,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	PublicIPOrName []NodesPublicIPOrNameInitParameters `json:"publicIpOrName,omitempty" tf:"public_ip_or_name,omitempty"`

	StaticRoutes []StaticRoutesInitParameters `json:"staticRoutes,omitempty" tf:"static_routes,omitempty"`

	VMHostname *string `json:"vmHostname,omitempty" tf:"vm_hostname,omitempty"`

	VMMor *string `json:"vmMor,omitempty" tf:"vm_mor,omitempty"`

	VMName *string `json:"vmName,omitempty" tf:"vm_name,omitempty"`

	VMUUID *string `json:"vmUuid,omitempty" tf:"vm_uuid,omitempty"`
}

type NodesObservation struct {
	Categories []*string `json:"categories,omitempty" tf:"categories,omitempty"`

	IP []NodesIPObservation `json:"ip,omitempty" tf:"ip,omitempty"`

	Interfaces []InterfacesObservation `json:"interfaces,omitempty" tf:"interfaces,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	PublicIPOrName []NodesPublicIPOrNameObservation `json:"publicIpOrName,omitempty" tf:"public_ip_or_name,omitempty"`

	StaticRoutes []StaticRoutesObservation `json:"staticRoutes,omitempty" tf:"static_routes,omitempty"`

	VMHostname *string `json:"vmHostname,omitempty" tf:"vm_hostname,omitempty"`

	VMMor *string `json:"vmMor,omitempty" tf:"vm_mor,omitempty"`

	VMName *string `json:"vmName,omitempty" tf:"vm_name,omitempty"`

	VMUUID *string `json:"vmUuid,omitempty" tf:"vm_uuid,omitempty"`
}

type NodesParameters struct {

	// +kubebuilder:validation:Optional
	Categories []*string `json:"categories,omitempty" tf:"categories,omitempty"`

	// +kubebuilder:validation:Optional
	IP []NodesIPParameters `json:"ip" tf:"ip,omitempty"`

	// +kubebuilder:validation:Optional
	Interfaces []InterfacesParameters `json:"interfaces,omitempty" tf:"interfaces,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	PasswordSecretRef *v1.SecretKeySelector `json:"passwordSecretRef,omitempty" tf:"-"`

	// +kubebuilder:validation:Optional
	PublicIPOrName []NodesPublicIPOrNameParameters `json:"publicIpOrName,omitempty" tf:"public_ip_or_name,omitempty"`

	// +kubebuilder:validation:Optional
	StaticRoutes []StaticRoutesParameters `json:"staticRoutes,omitempty" tf:"static_routes,omitempty"`

	// +kubebuilder:validation:Optional
	VMHostname *string `json:"vmHostname,omitempty" tf:"vm_hostname,omitempty"`

	// +kubebuilder:validation:Optional
	VMMor *string `json:"vmMor,omitempty" tf:"vm_mor,omitempty"`

	// +kubebuilder:validation:Optional
	VMName *string `json:"vmName,omitempty" tf:"vm_name,omitempty"`

	// +kubebuilder:validation:Optional
	VMUUID *string `json:"vmUuid,omitempty" tf:"vm_uuid,omitempty"`
}

type NodesPublicIPOrNameInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NodesPublicIPOrNameObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type NodesPublicIPOrNameParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type PrefixIPAddrInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PrefixIPAddrObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PrefixIPAddrParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type PrefixInitParameters struct {
	IPAddr []PrefixIPAddrInitParameters `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type PrefixObservation struct {
	IPAddr []PrefixIPAddrObservation `json:"ipAddr,omitempty" tf:"ip_addr,omitempty"`

	Mask *string `json:"mask,omitempty" tf:"mask,omitempty"`
}

type PrefixParameters struct {

	// +kubebuilder:validation:Optional
	IPAddr []PrefixIPAddrParameters `json:"ipAddr" tf:"ip_addr,omitempty"`

	// +kubebuilder:validation:Optional
	Mask *string `json:"mask" tf:"mask,omitempty"`
}

type PublicIPOrNameInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PublicIPOrNameObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type PublicIPOrNameParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

type StaticRoutesInitParameters struct {
	DisableGatewayMonitor *string `json:"disableGatewayMonitor,omitempty" tf:"disable_gateway_monitor,omitempty"`

	IfName *string `json:"ifName,omitempty" tf:"if_name,omitempty"`

	Labels []LabelsInitParameters `json:"labels,omitempty" tf:"labels,omitempty"`

	NextHop []NextHopInitParameters `json:"nextHop,omitempty" tf:"next_hop,omitempty"`

	Prefix []PrefixInitParameters `json:"prefix,omitempty" tf:"prefix,omitempty"`

	RouteID *string `json:"routeId,omitempty" tf:"route_id,omitempty"`
}

type StaticRoutesObservation struct {
	DisableGatewayMonitor *string `json:"disableGatewayMonitor,omitempty" tf:"disable_gateway_monitor,omitempty"`

	IfName *string `json:"ifName,omitempty" tf:"if_name,omitempty"`

	Labels []LabelsObservation `json:"labels,omitempty" tf:"labels,omitempty"`

	NextHop []NextHopObservation `json:"nextHop,omitempty" tf:"next_hop,omitempty"`

	Prefix []PrefixObservation `json:"prefix,omitempty" tf:"prefix,omitempty"`

	RouteID *string `json:"routeId,omitempty" tf:"route_id,omitempty"`
}

type StaticRoutesParameters struct {

	// +kubebuilder:validation:Optional
	DisableGatewayMonitor *string `json:"disableGatewayMonitor,omitempty" tf:"disable_gateway_monitor,omitempty"`

	// +kubebuilder:validation:Optional
	IfName *string `json:"ifName,omitempty" tf:"if_name,omitempty"`

	// +kubebuilder:validation:Optional
	Labels []LabelsParameters `json:"labels,omitempty" tf:"labels,omitempty"`

	// +kubebuilder:validation:Optional
	NextHop []NextHopParameters `json:"nextHop" tf:"next_hop,omitempty"`

	// +kubebuilder:validation:Optional
	Prefix []PrefixParameters `json:"prefix" tf:"prefix,omitempty"`

	// +kubebuilder:validation:Optional
	RouteID *string `json:"routeId" tf:"route_id,omitempty"`
}

type VirtualIPInitParameters struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VirtualIPObservation struct {
	Addr *string `json:"addr,omitempty" tf:"addr,omitempty"`

	Type *string `json:"type,omitempty" tf:"type,omitempty"`
}

type VirtualIPParameters struct {

	// +kubebuilder:validation:Optional
	Addr *string `json:"addr" tf:"addr,omitempty"`

	// +kubebuilder:validation:Optional
	Type *string `json:"type" tf:"type,omitempty"`
}

// ClusterSpec defines the desired state of Cluster
type ClusterSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     ClusterParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider ClusterInitParameters `json:"initProvider,omitempty"`
}

// ClusterStatus defines the observed state of Cluster.
type ClusterStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        ClusterObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// Cluster is the Schema for the Clusters API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type Cluster struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.nodes) || has(self.initProvider.nodes)",message="nodes is a required parameter"
	Spec   ClusterSpec   `json:"spec"`
	Status ClusterStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// ClusterList contains a list of Clusters
type ClusterList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []Cluster `json:"items"`
}

// Repository type metadata.
var (
	Cluster_Kind             = "Cluster"
	Cluster_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: Cluster_Kind}.String()
	Cluster_KindAPIVersion   = Cluster_Kind + "." + CRDGroupVersion.String()
	Cluster_GroupVersionKind = CRDGroupVersion.WithKind(Cluster_Kind)
)

func init() {
	SchemeBuilder.Register(&Cluster{}, &ClusterList{})
}
