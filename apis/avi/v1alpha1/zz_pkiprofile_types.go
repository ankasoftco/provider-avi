/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type CACertsInitParameters struct {
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	CertificateSigningRequest *string `json:"certificateSigningRequest,omitempty" tf:"certificate_signing_request,omitempty"`

	ChainVerified *string `json:"chainVerified,omitempty" tf:"chain_verified,omitempty"`

	DaysUntilExpire *string `json:"daysUntilExpire,omitempty" tf:"days_until_expire,omitempty"`

	ExpiryStatus *string `json:"expiryStatus,omitempty" tf:"expiry_status,omitempty"`

	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	Issuer []IssuerInitParameters `json:"issuer,omitempty" tf:"issuer,omitempty"`

	KeyParams []KeyParamsInitParameters `json:"keyParams,omitempty" tf:"key_params,omitempty"`

	NotAfter *string `json:"notAfter,omitempty" tf:"not_after,omitempty"`

	NotBefore *string `json:"notBefore,omitempty" tf:"not_before,omitempty"`

	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	SelfSigned *string `json:"selfSigned,omitempty" tf:"self_signed,omitempty"`

	SerialNumber *string `json:"serialNumber,omitempty" tf:"serial_number,omitempty"`

	Signature *string `json:"signature,omitempty" tf:"signature,omitempty"`

	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" tf:"signature_algorithm,omitempty"`

	Subject []SubjectInitParameters `json:"subject,omitempty" tf:"subject,omitempty"`

	SubjectAltNames []*string `json:"subjectAltNames,omitempty" tf:"subject_alt_names,omitempty"`

	Text *string `json:"text,omitempty" tf:"text,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type CACertsObservation struct {
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	CertificateSigningRequest *string `json:"certificateSigningRequest,omitempty" tf:"certificate_signing_request,omitempty"`

	ChainVerified *string `json:"chainVerified,omitempty" tf:"chain_verified,omitempty"`

	DaysUntilExpire *string `json:"daysUntilExpire,omitempty" tf:"days_until_expire,omitempty"`

	ExpiryStatus *string `json:"expiryStatus,omitempty" tf:"expiry_status,omitempty"`

	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	Issuer []IssuerObservation `json:"issuer,omitempty" tf:"issuer,omitempty"`

	KeyParams []KeyParamsObservation `json:"keyParams,omitempty" tf:"key_params,omitempty"`

	NotAfter *string `json:"notAfter,omitempty" tf:"not_after,omitempty"`

	NotBefore *string `json:"notBefore,omitempty" tf:"not_before,omitempty"`

	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	SelfSigned *string `json:"selfSigned,omitempty" tf:"self_signed,omitempty"`

	SerialNumber *string `json:"serialNumber,omitempty" tf:"serial_number,omitempty"`

	Signature *string `json:"signature,omitempty" tf:"signature,omitempty"`

	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" tf:"signature_algorithm,omitempty"`

	Subject []SubjectObservation `json:"subject,omitempty" tf:"subject,omitempty"`

	SubjectAltNames []*string `json:"subjectAltNames,omitempty" tf:"subject_alt_names,omitempty"`

	Text *string `json:"text,omitempty" tf:"text,omitempty"`

	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type CACertsParameters struct {

	// +kubebuilder:validation:Optional
	Certificate *string `json:"certificate,omitempty" tf:"certificate,omitempty"`

	// +kubebuilder:validation:Optional
	CertificateSigningRequest *string `json:"certificateSigningRequest,omitempty" tf:"certificate_signing_request,omitempty"`

	// +kubebuilder:validation:Optional
	ChainVerified *string `json:"chainVerified,omitempty" tf:"chain_verified,omitempty"`

	// +kubebuilder:validation:Optional
	DaysUntilExpire *string `json:"daysUntilExpire,omitempty" tf:"days_until_expire,omitempty"`

	// +kubebuilder:validation:Optional
	ExpiryStatus *string `json:"expiryStatus,omitempty" tf:"expiry_status,omitempty"`

	// +kubebuilder:validation:Optional
	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	// +kubebuilder:validation:Optional
	Issuer []IssuerParameters `json:"issuer,omitempty" tf:"issuer,omitempty"`

	// +kubebuilder:validation:Optional
	KeyParams []KeyParamsParameters `json:"keyParams,omitempty" tf:"key_params,omitempty"`

	// +kubebuilder:validation:Optional
	NotAfter *string `json:"notAfter,omitempty" tf:"not_after,omitempty"`

	// +kubebuilder:validation:Optional
	NotBefore *string `json:"notBefore,omitempty" tf:"not_before,omitempty"`

	// +kubebuilder:validation:Optional
	PublicKey *string `json:"publicKey,omitempty" tf:"public_key,omitempty"`

	// +kubebuilder:validation:Optional
	SelfSigned *string `json:"selfSigned,omitempty" tf:"self_signed,omitempty"`

	// +kubebuilder:validation:Optional
	SerialNumber *string `json:"serialNumber,omitempty" tf:"serial_number,omitempty"`

	// +kubebuilder:validation:Optional
	Signature *string `json:"signature,omitempty" tf:"signature,omitempty"`

	// +kubebuilder:validation:Optional
	SignatureAlgorithm *string `json:"signatureAlgorithm,omitempty" tf:"signature_algorithm,omitempty"`

	// +kubebuilder:validation:Optional
	Subject []SubjectParameters `json:"subject,omitempty" tf:"subject,omitempty"`

	// +kubebuilder:validation:Optional
	SubjectAltNames []*string `json:"subjectAltNames,omitempty" tf:"subject_alt_names,omitempty"`

	// +kubebuilder:validation:Optional
	Text *string `json:"text,omitempty" tf:"text,omitempty"`

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type CrlsInitParameters struct {
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	DistinguishedName *string `json:"distinguishedName,omitempty" tf:"distinguished_name,omitempty"`

	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	LastRefreshed *string `json:"lastRefreshed,omitempty" tf:"last_refreshed,omitempty"`

	LastUpdate *string `json:"lastUpdate,omitempty" tf:"last_update,omitempty"`

	NextUpdate *string `json:"nextUpdate,omitempty" tf:"next_update,omitempty"`

	ServerURL *string `json:"serverUrl,omitempty" tf:"server_url,omitempty"`

	Text *string `json:"text,omitempty" tf:"text,omitempty"`

	UpdateInterval *string `json:"updateInterval,omitempty" tf:"update_interval,omitempty"`
}

type CrlsObservation struct {
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	DistinguishedName *string `json:"distinguishedName,omitempty" tf:"distinguished_name,omitempty"`

	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	LastRefreshed *string `json:"lastRefreshed,omitempty" tf:"last_refreshed,omitempty"`

	LastUpdate *string `json:"lastUpdate,omitempty" tf:"last_update,omitempty"`

	NextUpdate *string `json:"nextUpdate,omitempty" tf:"next_update,omitempty"`

	ServerURL *string `json:"serverUrl,omitempty" tf:"server_url,omitempty"`

	Text *string `json:"text,omitempty" tf:"text,omitempty"`

	UpdateInterval *string `json:"updateInterval,omitempty" tf:"update_interval,omitempty"`
}

type CrlsParameters struct {

	// +kubebuilder:validation:Optional
	Body *string `json:"body,omitempty" tf:"body,omitempty"`

	// +kubebuilder:validation:Optional
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	// +kubebuilder:validation:Optional
	DistinguishedName *string `json:"distinguishedName,omitempty" tf:"distinguished_name,omitempty"`

	// +kubebuilder:validation:Optional
	Etag *string `json:"etag,omitempty" tf:"etag,omitempty"`

	// +kubebuilder:validation:Optional
	Fingerprint *string `json:"fingerprint,omitempty" tf:"fingerprint,omitempty"`

	// +kubebuilder:validation:Optional
	LastRefreshed *string `json:"lastRefreshed,omitempty" tf:"last_refreshed,omitempty"`

	// +kubebuilder:validation:Optional
	LastUpdate *string `json:"lastUpdate,omitempty" tf:"last_update,omitempty"`

	// +kubebuilder:validation:Optional
	NextUpdate *string `json:"nextUpdate,omitempty" tf:"next_update,omitempty"`

	// +kubebuilder:validation:Optional
	ServerURL *string `json:"serverUrl,omitempty" tf:"server_url,omitempty"`

	// +kubebuilder:validation:Optional
	Text *string `json:"text,omitempty" tf:"text,omitempty"`

	// +kubebuilder:validation:Optional
	UpdateInterval *string `json:"updateInterval,omitempty" tf:"update_interval,omitempty"`
}

type EcParamsInitParameters struct {
	Curve *string `json:"curve,omitempty" tf:"curve,omitempty"`
}

type EcParamsObservation struct {
	Curve *string `json:"curve,omitempty" tf:"curve,omitempty"`
}

type EcParamsParameters struct {

	// +kubebuilder:validation:Optional
	Curve *string `json:"curve,omitempty" tf:"curve,omitempty"`
}

type IssuerInitParameters struct {
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	DistinguishedName *string `json:"distinguishedName,omitempty" tf:"distinguished_name,omitempty"`

	EmailAddress *string `json:"emailAddress,omitempty" tf:"email_address,omitempty"`

	Locality *string `json:"locality,omitempty" tf:"locality,omitempty"`

	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	OrganizationUnit *string `json:"organizationUnit,omitempty" tf:"organization_unit,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type IssuerObservation struct {
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	DistinguishedName *string `json:"distinguishedName,omitempty" tf:"distinguished_name,omitempty"`

	EmailAddress *string `json:"emailAddress,omitempty" tf:"email_address,omitempty"`

	Locality *string `json:"locality,omitempty" tf:"locality,omitempty"`

	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	OrganizationUnit *string `json:"organizationUnit,omitempty" tf:"organization_unit,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type IssuerParameters struct {

	// +kubebuilder:validation:Optional
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	// +kubebuilder:validation:Optional
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// +kubebuilder:validation:Optional
	DistinguishedName *string `json:"distinguishedName,omitempty" tf:"distinguished_name,omitempty"`

	// +kubebuilder:validation:Optional
	EmailAddress *string `json:"emailAddress,omitempty" tf:"email_address,omitempty"`

	// +kubebuilder:validation:Optional
	Locality *string `json:"locality,omitempty" tf:"locality,omitempty"`

	// +kubebuilder:validation:Optional
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// +kubebuilder:validation:Optional
	OrganizationUnit *string `json:"organizationUnit,omitempty" tf:"organization_unit,omitempty"`

	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type KeyParamsInitParameters struct {
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	EcParams []EcParamsInitParameters `json:"ecParams,omitempty" tf:"ec_params,omitempty"`

	RsaParams []RsaParamsInitParameters `json:"rsaParams,omitempty" tf:"rsa_params,omitempty"`
}

type KeyParamsObservation struct {
	Algorithm *string `json:"algorithm,omitempty" tf:"algorithm,omitempty"`

	EcParams []EcParamsObservation `json:"ecParams,omitempty" tf:"ec_params,omitempty"`

	RsaParams []RsaParamsObservation `json:"rsaParams,omitempty" tf:"rsa_params,omitempty"`
}

type KeyParamsParameters struct {

	// +kubebuilder:validation:Optional
	Algorithm *string `json:"algorithm" tf:"algorithm,omitempty"`

	// +kubebuilder:validation:Optional
	EcParams []EcParamsParameters `json:"ecParams,omitempty" tf:"ec_params,omitempty"`

	// +kubebuilder:validation:Optional
	RsaParams []RsaParamsParameters `json:"rsaParams,omitempty" tf:"rsa_params,omitempty"`
}

type PkiProfileConfigpbAttributesInitParameters struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type PkiProfileConfigpbAttributesObservation struct {
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type PkiProfileConfigpbAttributesParameters struct {

	// +kubebuilder:validation:Optional
	Version *string `json:"version,omitempty" tf:"version,omitempty"`
}

type PkiProfileInitParameters struct {
	CACerts []CACertsInitParameters `json:"caCerts,omitempty" tf:"ca_certs,omitempty"`

	ConfigpbAttributes []PkiProfileConfigpbAttributesInitParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	CrlCheck *string `json:"crlCheck,omitempty" tf:"crl_check,omitempty"`

	Crls []CrlsInitParameters `json:"crls,omitempty" tf:"crls,omitempty"`

	IgnorePeerChain *string `json:"ignorePeerChain,omitempty" tf:"ignore_peer_chain,omitempty"`

	IsFederated *string `json:"isFederated,omitempty" tf:"is_federated,omitempty"`

	Markers []PkiProfileMarkersInitParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	ValidateOnlyLeafCrl *string `json:"validateOnlyLeafCrl,omitempty" tf:"validate_only_leaf_crl,omitempty"`
}

type PkiProfileMarkersInitParameters struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type PkiProfileMarkersObservation struct {
	Key *string `json:"key,omitempty" tf:"key,omitempty"`

	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type PkiProfileMarkersParameters struct {

	// +kubebuilder:validation:Optional
	Key *string `json:"key" tf:"key,omitempty"`

	// +kubebuilder:validation:Optional
	Values []*string `json:"values,omitempty" tf:"values,omitempty"`
}

type PkiProfileObservation struct {
	CACerts []CACertsObservation `json:"caCerts,omitempty" tf:"ca_certs,omitempty"`

	ConfigpbAttributes []PkiProfileConfigpbAttributesObservation `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	CrlCheck *string `json:"crlCheck,omitempty" tf:"crl_check,omitempty"`

	Crls []CrlsObservation `json:"crls,omitempty" tf:"crls,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	IgnorePeerChain *string `json:"ignorePeerChain,omitempty" tf:"ignore_peer_chain,omitempty"`

	IsFederated *string `json:"isFederated,omitempty" tf:"is_federated,omitempty"`

	Markers []PkiProfileMarkersObservation `json:"markers,omitempty" tf:"markers,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	ValidateOnlyLeafCrl *string `json:"validateOnlyLeafCrl,omitempty" tf:"validate_only_leaf_crl,omitempty"`
}

type PkiProfileParameters struct {

	// +kubebuilder:validation:Optional
	CACerts []CACertsParameters `json:"caCerts,omitempty" tf:"ca_certs,omitempty"`

	// +kubebuilder:validation:Optional
	ConfigpbAttributes []PkiProfileConfigpbAttributesParameters `json:"configpbAttributes,omitempty" tf:"configpb_attributes,omitempty"`

	// +kubebuilder:validation:Optional
	CreatedBy *string `json:"createdBy,omitempty" tf:"created_by,omitempty"`

	// +kubebuilder:validation:Optional
	CrlCheck *string `json:"crlCheck,omitempty" tf:"crl_check,omitempty"`

	// +kubebuilder:validation:Optional
	Crls []CrlsParameters `json:"crls,omitempty" tf:"crls,omitempty"`

	// +kubebuilder:validation:Optional
	IgnorePeerChain *string `json:"ignorePeerChain,omitempty" tf:"ignore_peer_chain,omitempty"`

	// +kubebuilder:validation:Optional
	IsFederated *string `json:"isFederated,omitempty" tf:"is_federated,omitempty"`

	// +kubebuilder:validation:Optional
	Markers []PkiProfileMarkersParameters `json:"markers,omitempty" tf:"markers,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`

	// +kubebuilder:validation:Optional
	ValidateOnlyLeafCrl *string `json:"validateOnlyLeafCrl,omitempty" tf:"validate_only_leaf_crl,omitempty"`
}

type RsaParamsInitParameters struct {
	Exponent *string `json:"exponent,omitempty" tf:"exponent,omitempty"`

	KeySize *string `json:"keySize,omitempty" tf:"key_size,omitempty"`
}

type RsaParamsObservation struct {
	Exponent *string `json:"exponent,omitempty" tf:"exponent,omitempty"`

	KeySize *string `json:"keySize,omitempty" tf:"key_size,omitempty"`
}

type RsaParamsParameters struct {

	// +kubebuilder:validation:Optional
	Exponent *string `json:"exponent,omitempty" tf:"exponent,omitempty"`

	// +kubebuilder:validation:Optional
	KeySize *string `json:"keySize,omitempty" tf:"key_size,omitempty"`
}

type SubjectInitParameters struct {
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	DistinguishedName *string `json:"distinguishedName,omitempty" tf:"distinguished_name,omitempty"`

	EmailAddress *string `json:"emailAddress,omitempty" tf:"email_address,omitempty"`

	Locality *string `json:"locality,omitempty" tf:"locality,omitempty"`

	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	OrganizationUnit *string `json:"organizationUnit,omitempty" tf:"organization_unit,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type SubjectObservation struct {
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	DistinguishedName *string `json:"distinguishedName,omitempty" tf:"distinguished_name,omitempty"`

	EmailAddress *string `json:"emailAddress,omitempty" tf:"email_address,omitempty"`

	Locality *string `json:"locality,omitempty" tf:"locality,omitempty"`

	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	OrganizationUnit *string `json:"organizationUnit,omitempty" tf:"organization_unit,omitempty"`

	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

type SubjectParameters struct {

	// +kubebuilder:validation:Optional
	CommonName *string `json:"commonName,omitempty" tf:"common_name,omitempty"`

	// +kubebuilder:validation:Optional
	Country *string `json:"country,omitempty" tf:"country,omitempty"`

	// +kubebuilder:validation:Optional
	DistinguishedName *string `json:"distinguishedName,omitempty" tf:"distinguished_name,omitempty"`

	// +kubebuilder:validation:Optional
	EmailAddress *string `json:"emailAddress,omitempty" tf:"email_address,omitempty"`

	// +kubebuilder:validation:Optional
	Locality *string `json:"locality,omitempty" tf:"locality,omitempty"`

	// +kubebuilder:validation:Optional
	Organization *string `json:"organization,omitempty" tf:"organization,omitempty"`

	// +kubebuilder:validation:Optional
	OrganizationUnit *string `json:"organizationUnit,omitempty" tf:"organization_unit,omitempty"`

	// +kubebuilder:validation:Optional
	State *string `json:"state,omitempty" tf:"state,omitempty"`
}

// PkiProfileSpec defines the desired state of PkiProfile
type PkiProfileSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     PkiProfileParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider PkiProfileInitParameters `json:"initProvider,omitempty"`
}

// PkiProfileStatus defines the observed state of PkiProfile.
type PkiProfileStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        PkiProfileObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// PkiProfile is the Schema for the PkiProfiles API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type PkiProfile struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	// +kubebuilder:validation:XValidation:rule="!('*' in self.managementPolicies || 'Create' in self.managementPolicies || 'Update' in self.managementPolicies) || has(self.forProvider.name) || has(self.initProvider.name)",message="name is a required parameter"
	Spec   PkiProfileSpec   `json:"spec"`
	Status PkiProfileStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// PkiProfileList contains a list of PkiProfiles
type PkiProfileList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []PkiProfile `json:"items"`
}

// Repository type metadata.
var (
	PkiProfile_Kind             = "PkiProfile"
	PkiProfile_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: PkiProfile_Kind}.String()
	PkiProfile_KindAPIVersion   = PkiProfile_Kind + "." + CRDGroupVersion.String()
	PkiProfile_GroupVersionKind = CRDGroupVersion.WithKind(PkiProfile_Kind)
)

func init() {
	SchemeBuilder.Register(&PkiProfile{}, &PkiProfileList{})
}
