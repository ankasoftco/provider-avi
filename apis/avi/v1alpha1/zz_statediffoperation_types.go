/*
Copyright 2022 Upbound Inc.
*/

// Code generated by upjet. DO NOT EDIT.

package v1alpha1

import (
	metav1 "k8s.io/apimachinery/pkg/apis/meta/v1"
	"k8s.io/apimachinery/pkg/runtime/schema"

	v1 "github.com/crossplane/crossplane-runtime/apis/common/v1"
)

type StateDiffOperationEventsInitParameters struct {
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	TaskName *string `json:"taskName,omitempty" tf:"task_name,omitempty"`
}

type StateDiffOperationEventsObservation struct {
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	TaskName *string `json:"taskName,omitempty" tf:"task_name,omitempty"`
}

type StateDiffOperationEventsParameters struct {

	// +kubebuilder:validation:Optional
	Duration *string `json:"duration,omitempty" tf:"duration,omitempty"`

	// +kubebuilder:validation:Optional
	EndTime *string `json:"endTime,omitempty" tf:"end_time,omitempty"`

	// +kubebuilder:validation:Optional
	Message *string `json:"message,omitempty" tf:"message,omitempty"`

	// +kubebuilder:validation:Optional
	StartTime *string `json:"startTime,omitempty" tf:"start_time,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	TaskName *string `json:"taskName,omitempty" tf:"task_name,omitempty"`
}

type StateDiffOperationInitParameters struct {
	Events []StateDiffOperationEventsInitParameters `json:"events,omitempty" tf:"events,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	NodeUUID *string `json:"nodeUuid,omitempty" tf:"node_uuid,omitempty"`

	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`

	Phase *string `json:"phase,omitempty" tf:"phase,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type StateDiffOperationObservation struct {
	Events []StateDiffOperationEventsObservation `json:"events,omitempty" tf:"events,omitempty"`

	ID *string `json:"id,omitempty" tf:"id,omitempty"`

	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	NodeUUID *string `json:"nodeUuid,omitempty" tf:"node_uuid,omitempty"`

	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`

	Phase *string `json:"phase,omitempty" tf:"phase,omitempty"`

	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

type StateDiffOperationParameters struct {

	// +kubebuilder:validation:Optional
	Events []StateDiffOperationEventsParameters `json:"events,omitempty" tf:"events,omitempty"`

	// +kubebuilder:validation:Optional
	Name *string `json:"name,omitempty" tf:"name,omitempty"`

	// +kubebuilder:validation:Optional
	NodeUUID *string `json:"nodeUuid,omitempty" tf:"node_uuid,omitempty"`

	// +kubebuilder:validation:Optional
	Operation *string `json:"operation,omitempty" tf:"operation,omitempty"`

	// +kubebuilder:validation:Optional
	Phase *string `json:"phase,omitempty" tf:"phase,omitempty"`

	// +kubebuilder:validation:Optional
	Status *string `json:"status,omitempty" tf:"status,omitempty"`

	// +kubebuilder:validation:Optional
	TenantRef *string `json:"tenantRef,omitempty" tf:"tenant_ref,omitempty"`

	// +kubebuilder:validation:Optional
	UUID *string `json:"uuid,omitempty" tf:"uuid,omitempty"`
}

// StateDiffOperationSpec defines the desired state of StateDiffOperation
type StateDiffOperationSpec struct {
	v1.ResourceSpec `json:",inline"`
	ForProvider     StateDiffOperationParameters `json:"forProvider"`
	// THIS IS AN ALPHA FIELD. Do not use it in production. It is not honored
	// unless the relevant Crossplane feature flag is enabled, and may be
	// changed or removed without notice.
	// InitProvider holds the same fields as ForProvider, with the exception
	// of Identifier and other resource reference fields. The fields that are
	// in InitProvider are merged into ForProvider when the resource is created.
	// The same fields are also added to the terraform ignore_changes hook, to
	// avoid updating them after creation. This is useful for fields that are
	// required on creation, but we do not desire to update them after creation,
	// for example because of an external controller is managing them, like an
	// autoscaler.
	InitProvider StateDiffOperationInitParameters `json:"initProvider,omitempty"`
}

// StateDiffOperationStatus defines the observed state of StateDiffOperation.
type StateDiffOperationStatus struct {
	v1.ResourceStatus `json:",inline"`
	AtProvider        StateDiffOperationObservation `json:"atProvider,omitempty"`
}

// +kubebuilder:object:root=true

// StateDiffOperation is the Schema for the StateDiffOperations API. <no value>
// +kubebuilder:printcolumn:name="READY",type="string",JSONPath=".status.conditions[?(@.type=='Ready')].status"
// +kubebuilder:printcolumn:name="SYNCED",type="string",JSONPath=".status.conditions[?(@.type=='Synced')].status"
// +kubebuilder:printcolumn:name="EXTERNAL-NAME",type="string",JSONPath=".metadata.annotations.crossplane\\.io/external-name"
// +kubebuilder:printcolumn:name="AGE",type="date",JSONPath=".metadata.creationTimestamp"
// +kubebuilder:subresource:status
// +kubebuilder:resource:scope=Cluster,categories={crossplane,managed,avi}
type StateDiffOperation struct {
	metav1.TypeMeta   `json:",inline"`
	metav1.ObjectMeta `json:"metadata,omitempty"`
	Spec              StateDiffOperationSpec   `json:"spec"`
	Status            StateDiffOperationStatus `json:"status,omitempty"`
}

// +kubebuilder:object:root=true

// StateDiffOperationList contains a list of StateDiffOperations
type StateDiffOperationList struct {
	metav1.TypeMeta `json:",inline"`
	metav1.ListMeta `json:"metadata,omitempty"`
	Items           []StateDiffOperation `json:"items"`
}

// Repository type metadata.
var (
	StateDiffOperation_Kind             = "StateDiffOperation"
	StateDiffOperation_GroupKind        = schema.GroupKind{Group: CRDGroup, Kind: StateDiffOperation_Kind}.String()
	StateDiffOperation_KindAPIVersion   = StateDiffOperation_Kind + "." + CRDGroupVersion.String()
	StateDiffOperation_GroupVersionKind = CRDGroupVersion.WithKind(StateDiffOperation_Kind)
)

func init() {
	SchemeBuilder.Register(&StateDiffOperation{}, &StateDiffOperationList{})
}
